/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/chart/Chart.min.js":
/*!*****************************************!*\
  !*** ./resources/js/chart/Chart.min.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * Chart.js v2.9.4\n * https://www.chartjs.org\n * (c) 2020 Chart.js Contributors\n * Released under the MIT License\n */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e(function () {\n    try {\n      return __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'moment'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    } catch (t) {}\n  }()) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (t) {\n    return e(function () {\n      try {\n        return __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'moment'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n      } catch (t) {}\n    }());\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (t) {\n  \"use strict\";\n\n  t = t && t.hasOwnProperty(\"default\") ? t[\"default\"] : t;\n\n  var e = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  },\n      n = function (t, e) {\n    return t(e = {\n      exports: {}\n    }, e.exports), e.exports;\n  }(function (t) {\n    var n = {};\n\n    for (var i in e) {\n      e.hasOwnProperty(i) && (n[e[i]] = i);\n    }\n\n    var a = t.exports = {\n      rgb: {\n        channels: 3,\n        labels: \"rgb\"\n      },\n      hsl: {\n        channels: 3,\n        labels: \"hsl\"\n      },\n      hsv: {\n        channels: 3,\n        labels: \"hsv\"\n      },\n      hwb: {\n        channels: 3,\n        labels: \"hwb\"\n      },\n      cmyk: {\n        channels: 4,\n        labels: \"cmyk\"\n      },\n      xyz: {\n        channels: 3,\n        labels: \"xyz\"\n      },\n      lab: {\n        channels: 3,\n        labels: \"lab\"\n      },\n      lch: {\n        channels: 3,\n        labels: \"lch\"\n      },\n      hex: {\n        channels: 1,\n        labels: [\"hex\"]\n      },\n      keyword: {\n        channels: 1,\n        labels: [\"keyword\"]\n      },\n      ansi16: {\n        channels: 1,\n        labels: [\"ansi16\"]\n      },\n      ansi256: {\n        channels: 1,\n        labels: [\"ansi256\"]\n      },\n      hcg: {\n        channels: 3,\n        labels: [\"h\", \"c\", \"g\"]\n      },\n      apple: {\n        channels: 3,\n        labels: [\"r16\", \"g16\", \"b16\"]\n      },\n      gray: {\n        channels: 1,\n        labels: [\"gray\"]\n      }\n    };\n\n    for (var r in a) {\n      if (a.hasOwnProperty(r)) {\n        if (!(\"channels\" in a[r])) throw new Error(\"missing channels property: \" + r);\n        if (!(\"labels\" in a[r])) throw new Error(\"missing channel labels property: \" + r);\n        if (a[r].labels.length !== a[r].channels) throw new Error(\"channel and label counts mismatch: \" + r);\n        var o = a[r].channels,\n            s = a[r].labels;\n        delete a[r].channels, delete a[r].labels, Object.defineProperty(a[r], \"channels\", {\n          value: o\n        }), Object.defineProperty(a[r], \"labels\", {\n          value: s\n        });\n      }\n    }\n\n    a.rgb.hsl = function (t) {\n      var e,\n          n,\n          i = t[0] / 255,\n          a = t[1] / 255,\n          r = t[2] / 255,\n          o = Math.min(i, a, r),\n          s = Math.max(i, a, r),\n          l = s - o;\n      return s === o ? e = 0 : i === s ? e = (a - r) / l : a === s ? e = 2 + (r - i) / l : r === s && (e = 4 + (i - a) / l), (e = Math.min(60 * e, 360)) < 0 && (e += 360), n = (o + s) / 2, [e, 100 * (s === o ? 0 : n <= .5 ? l / (s + o) : l / (2 - s - o)), 100 * n];\n    }, a.rgb.hsv = function (t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o = t[0] / 255,\n          s = t[1] / 255,\n          l = t[2] / 255,\n          u = Math.max(o, s, l),\n          d = u - Math.min(o, s, l),\n          h = function h(t) {\n        return (u - t) / 6 / d + .5;\n      };\n\n      return 0 === d ? a = r = 0 : (r = d / u, e = h(o), n = h(s), i = h(l), o === u ? a = i - n : s === u ? a = 1 / 3 + e - i : l === u && (a = 2 / 3 + n - e), a < 0 ? a += 1 : a > 1 && (a -= 1)), [360 * a, 100 * r, 100 * u];\n    }, a.rgb.hwb = function (t) {\n      var e = t[0],\n          n = t[1],\n          i = t[2];\n      return [a.rgb.hsl(t)[0], 100 * (1 / 255 * Math.min(e, Math.min(n, i))), 100 * (i = 1 - 1 / 255 * Math.max(e, Math.max(n, i)))];\n    }, a.rgb.cmyk = function (t) {\n      var e,\n          n = t[0] / 255,\n          i = t[1] / 255,\n          a = t[2] / 255;\n      return [100 * ((1 - n - (e = Math.min(1 - n, 1 - i, 1 - a))) / (1 - e) || 0), 100 * ((1 - i - e) / (1 - e) || 0), 100 * ((1 - a - e) / (1 - e) || 0), 100 * e];\n    }, a.rgb.keyword = function (t) {\n      var i = n[t];\n      if (i) return i;\n      var a,\n          r,\n          o,\n          s = 1 / 0;\n\n      for (var l in e) {\n        if (e.hasOwnProperty(l)) {\n          var u = e[l],\n              d = (r = t, o = u, Math.pow(r[0] - o[0], 2) + Math.pow(r[1] - o[1], 2) + Math.pow(r[2] - o[2], 2));\n          d < s && (s = d, a = l);\n        }\n      }\n\n      return a;\n    }, a.keyword.rgb = function (t) {\n      return e[t];\n    }, a.rgb.xyz = function (t) {\n      var e = t[0] / 255,\n          n = t[1] / 255,\n          i = t[2] / 255;\n      return [100 * (.4124 * (e = e > .04045 ? Math.pow((e + .055) / 1.055, 2.4) : e / 12.92) + .3576 * (n = n > .04045 ? Math.pow((n + .055) / 1.055, 2.4) : n / 12.92) + .1805 * (i = i > .04045 ? Math.pow((i + .055) / 1.055, 2.4) : i / 12.92)), 100 * (.2126 * e + .7152 * n + .0722 * i), 100 * (.0193 * e + .1192 * n + .9505 * i)];\n    }, a.rgb.lab = function (t) {\n      var e = a.rgb.xyz(t),\n          n = e[0],\n          i = e[1],\n          r = e[2];\n      return i /= 100, r /= 108.883, n = (n /= 95.047) > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116, [116 * (i = i > .008856 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116) - 16, 500 * (n - i), 200 * (i - (r = r > .008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116))];\n    }, a.hsl.rgb = function (t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o = t[0] / 360,\n          s = t[1] / 100,\n          l = t[2] / 100;\n      if (0 === s) return [r = 255 * l, r, r];\n      e = 2 * l - (n = l < .5 ? l * (1 + s) : l + s - l * s), a = [0, 0, 0];\n\n      for (var u = 0; u < 3; u++) {\n        (i = o + 1 / 3 * -(u - 1)) < 0 && i++, i > 1 && i--, r = 6 * i < 1 ? e + 6 * (n - e) * i : 2 * i < 1 ? n : 3 * i < 2 ? e + (n - e) * (2 / 3 - i) * 6 : e, a[u] = 255 * r;\n      }\n\n      return a;\n    }, a.hsl.hsv = function (t) {\n      var e = t[0],\n          n = t[1] / 100,\n          i = t[2] / 100,\n          a = n,\n          r = Math.max(i, .01);\n      return n *= (i *= 2) <= 1 ? i : 2 - i, a *= r <= 1 ? r : 2 - r, [e, 100 * (0 === i ? 2 * a / (r + a) : 2 * n / (i + n)), 100 * ((i + n) / 2)];\n    }, a.hsv.rgb = function (t) {\n      var e = t[0] / 60,\n          n = t[1] / 100,\n          i = t[2] / 100,\n          a = Math.floor(e) % 6,\n          r = e - Math.floor(e),\n          o = 255 * i * (1 - n),\n          s = 255 * i * (1 - n * r),\n          l = 255 * i * (1 - n * (1 - r));\n\n      switch (i *= 255, a) {\n        case 0:\n          return [i, l, o];\n\n        case 1:\n          return [s, i, o];\n\n        case 2:\n          return [o, i, l];\n\n        case 3:\n          return [o, s, i];\n\n        case 4:\n          return [l, o, i];\n\n        case 5:\n          return [i, o, s];\n      }\n    }, a.hsv.hsl = function (t) {\n      var e,\n          n,\n          i,\n          a = t[0],\n          r = t[1] / 100,\n          o = t[2] / 100,\n          s = Math.max(o, .01);\n      return i = (2 - r) * o, n = r * s, [a, 100 * (n = (n /= (e = (2 - r) * s) <= 1 ? e : 2 - e) || 0), 100 * (i /= 2)];\n    }, a.hwb.rgb = function (t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s,\n          l = t[0] / 360,\n          u = t[1] / 100,\n          d = t[2] / 100,\n          h = u + d;\n\n      switch (h > 1 && (u /= h, d /= h), i = 6 * l - (e = Math.floor(6 * l)), 0 != (1 & e) && (i = 1 - i), a = u + i * ((n = 1 - d) - u), e) {\n        default:\n        case 6:\n        case 0:\n          r = n, o = a, s = u;\n          break;\n\n        case 1:\n          r = a, o = n, s = u;\n          break;\n\n        case 2:\n          r = u, o = n, s = a;\n          break;\n\n        case 3:\n          r = u, o = a, s = n;\n          break;\n\n        case 4:\n          r = a, o = u, s = n;\n          break;\n\n        case 5:\n          r = n, o = u, s = a;\n      }\n\n      return [255 * r, 255 * o, 255 * s];\n    }, a.cmyk.rgb = function (t) {\n      var e = t[0] / 100,\n          n = t[1] / 100,\n          i = t[2] / 100,\n          a = t[3] / 100;\n      return [255 * (1 - Math.min(1, e * (1 - a) + a)), 255 * (1 - Math.min(1, n * (1 - a) + a)), 255 * (1 - Math.min(1, i * (1 - a) + a))];\n    }, a.xyz.rgb = function (t) {\n      var e,\n          n,\n          i,\n          a = t[0] / 100,\n          r = t[1] / 100,\n          o = t[2] / 100;\n      return n = -.9689 * a + 1.8758 * r + .0415 * o, i = .0557 * a + -.204 * r + 1.057 * o, e = (e = 3.2406 * a + -1.5372 * r + -.4986 * o) > .0031308 ? 1.055 * Math.pow(e, 1 / 2.4) - .055 : 12.92 * e, n = n > .0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - .055 : 12.92 * n, i = i > .0031308 ? 1.055 * Math.pow(i, 1 / 2.4) - .055 : 12.92 * i, [255 * (e = Math.min(Math.max(0, e), 1)), 255 * (n = Math.min(Math.max(0, n), 1)), 255 * (i = Math.min(Math.max(0, i), 1))];\n    }, a.xyz.lab = function (t) {\n      var e = t[0],\n          n = t[1],\n          i = t[2];\n      return n /= 100, i /= 108.883, e = (e /= 95.047) > .008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116, [116 * (n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116) - 16, 500 * (e - n), 200 * (n - (i = i > .008856 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116))];\n    }, a.lab.xyz = function (t) {\n      var e,\n          n,\n          i,\n          a = t[0];\n      e = t[1] / 500 + (n = (a + 16) / 116), i = n - t[2] / 200;\n      var r = Math.pow(n, 3),\n          o = Math.pow(e, 3),\n          s = Math.pow(i, 3);\n      return n = r > .008856 ? r : (n - 16 / 116) / 7.787, e = o > .008856 ? o : (e - 16 / 116) / 7.787, i = s > .008856 ? s : (i - 16 / 116) / 7.787, [e *= 95.047, n *= 100, i *= 108.883];\n    }, a.lab.lch = function (t) {\n      var e,\n          n = t[0],\n          i = t[1],\n          a = t[2];\n      return (e = 360 * Math.atan2(a, i) / 2 / Math.PI) < 0 && (e += 360), [n, Math.sqrt(i * i + a * a), e];\n    }, a.lch.lab = function (t) {\n      var e,\n          n = t[0],\n          i = t[1];\n      return e = t[2] / 360 * 2 * Math.PI, [n, i * Math.cos(e), i * Math.sin(e)];\n    }, a.rgb.ansi16 = function (t) {\n      var e = t[0],\n          n = t[1],\n          i = t[2],\n          r = 1 in arguments ? arguments[1] : a.rgb.hsv(t)[2];\n      if (0 === (r = Math.round(r / 50))) return 30;\n      var o = 30 + (Math.round(i / 255) << 2 | Math.round(n / 255) << 1 | Math.round(e / 255));\n      return 2 === r && (o += 60), o;\n    }, a.hsv.ansi16 = function (t) {\n      return a.rgb.ansi16(a.hsv.rgb(t), t[2]);\n    }, a.rgb.ansi256 = function (t) {\n      var e = t[0],\n          n = t[1],\n          i = t[2];\n      return e === n && n === i ? e < 8 ? 16 : e > 248 ? 231 : Math.round((e - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(n / 255 * 5) + Math.round(i / 255 * 5);\n    }, a.ansi16.rgb = function (t) {\n      var e = t % 10;\n      if (0 === e || 7 === e) return t > 50 && (e += 3.5), [e = e / 10.5 * 255, e, e];\n      var n = .5 * (1 + ~~(t > 50));\n      return [(1 & e) * n * 255, (e >> 1 & 1) * n * 255, (e >> 2 & 1) * n * 255];\n    }, a.ansi256.rgb = function (t) {\n      if (t >= 232) {\n        var e = 10 * (t - 232) + 8;\n        return [e, e, e];\n      }\n\n      var n;\n      return t -= 16, [Math.floor(t / 36) / 5 * 255, Math.floor((n = t % 36) / 6) / 5 * 255, n % 6 / 5 * 255];\n    }, a.rgb.hex = function (t) {\n      var e = (((255 & Math.round(t[0])) << 16) + ((255 & Math.round(t[1])) << 8) + (255 & Math.round(t[2]))).toString(16).toUpperCase();\n      return \"000000\".substring(e.length) + e;\n    }, a.hex.rgb = function (t) {\n      var e = t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n      if (!e) return [0, 0, 0];\n      var n = e[0];\n      3 === e[0].length && (n = n.split(\"\").map(function (t) {\n        return t + t;\n      }).join(\"\"));\n      var i = parseInt(n, 16);\n      return [i >> 16 & 255, i >> 8 & 255, 255 & i];\n    }, a.rgb.hcg = function (t) {\n      var e,\n          n = t[0] / 255,\n          i = t[1] / 255,\n          a = t[2] / 255,\n          r = Math.max(Math.max(n, i), a),\n          o = Math.min(Math.min(n, i), a),\n          s = r - o;\n      return e = s <= 0 ? 0 : r === n ? (i - a) / s % 6 : r === i ? 2 + (a - n) / s : 4 + (n - i) / s + 4, e /= 6, [360 * (e %= 1), 100 * s, 100 * (s < 1 ? o / (1 - s) : 0)];\n    }, a.hsl.hcg = function (t) {\n      var e = t[1] / 100,\n          n = t[2] / 100,\n          i = 1,\n          a = 0;\n      return (i = n < .5 ? 2 * e * n : 2 * e * (1 - n)) < 1 && (a = (n - .5 * i) / (1 - i)), [t[0], 100 * i, 100 * a];\n    }, a.hsv.hcg = function (t) {\n      var e = t[1] / 100,\n          n = t[2] / 100,\n          i = e * n,\n          a = 0;\n      return i < 1 && (a = (n - i) / (1 - i)), [t[0], 100 * i, 100 * a];\n    }, a.hcg.rgb = function (t) {\n      var e = t[0] / 360,\n          n = t[1] / 100,\n          i = t[2] / 100;\n      if (0 === n) return [255 * i, 255 * i, 255 * i];\n      var a,\n          r = [0, 0, 0],\n          o = e % 1 * 6,\n          s = o % 1,\n          l = 1 - s;\n\n      switch (Math.floor(o)) {\n        case 0:\n          r[0] = 1, r[1] = s, r[2] = 0;\n          break;\n\n        case 1:\n          r[0] = l, r[1] = 1, r[2] = 0;\n          break;\n\n        case 2:\n          r[0] = 0, r[1] = 1, r[2] = s;\n          break;\n\n        case 3:\n          r[0] = 0, r[1] = l, r[2] = 1;\n          break;\n\n        case 4:\n          r[0] = s, r[1] = 0, r[2] = 1;\n          break;\n\n        default:\n          r[0] = 1, r[1] = 0, r[2] = l;\n      }\n\n      return a = (1 - n) * i, [255 * (n * r[0] + a), 255 * (n * r[1] + a), 255 * (n * r[2] + a)];\n    }, a.hcg.hsv = function (t) {\n      var e = t[1] / 100,\n          n = e + t[2] / 100 * (1 - e),\n          i = 0;\n      return n > 0 && (i = e / n), [t[0], 100 * i, 100 * n];\n    }, a.hcg.hsl = function (t) {\n      var e = t[1] / 100,\n          n = t[2] / 100 * (1 - e) + .5 * e,\n          i = 0;\n      return n > 0 && n < .5 ? i = e / (2 * n) : n >= .5 && n < 1 && (i = e / (2 * (1 - n))), [t[0], 100 * i, 100 * n];\n    }, a.hcg.hwb = function (t) {\n      var e = t[1] / 100,\n          n = e + t[2] / 100 * (1 - e);\n      return [t[0], 100 * (n - e), 100 * (1 - n)];\n    }, a.hwb.hcg = function (t) {\n      var e = t[1] / 100,\n          n = 1 - t[2] / 100,\n          i = n - e,\n          a = 0;\n      return i < 1 && (a = (n - i) / (1 - i)), [t[0], 100 * i, 100 * a];\n    }, a.apple.rgb = function (t) {\n      return [t[0] / 65535 * 255, t[1] / 65535 * 255, t[2] / 65535 * 255];\n    }, a.rgb.apple = function (t) {\n      return [t[0] / 255 * 65535, t[1] / 255 * 65535, t[2] / 255 * 65535];\n    }, a.gray.rgb = function (t) {\n      return [t[0] / 100 * 255, t[0] / 100 * 255, t[0] / 100 * 255];\n    }, a.gray.hsl = a.gray.hsv = function (t) {\n      return [0, 0, t[0]];\n    }, a.gray.hwb = function (t) {\n      return [0, 100, t[0]];\n    }, a.gray.cmyk = function (t) {\n      return [0, 0, 0, t[0]];\n    }, a.gray.lab = function (t) {\n      return [t[0], 0, 0];\n    }, a.gray.hex = function (t) {\n      var e = 255 & Math.round(t[0] / 100 * 255),\n          n = ((e << 16) + (e << 8) + e).toString(16).toUpperCase();\n      return \"000000\".substring(n.length) + n;\n    }, a.rgb.gray = function (t) {\n      return [(t[0] + t[1] + t[2]) / 3 / 255 * 100];\n    };\n  });\n\n  n.rgb, n.hsl, n.hsv, n.hwb, n.cmyk, n.xyz, n.lab, n.lch, n.hex, n.keyword, n.ansi16, n.ansi256, n.hcg, n.apple, n.gray;\n\n  function i(t) {\n    var e = function () {\n      for (var t = {}, e = Object.keys(n), i = e.length, a = 0; a < i; a++) {\n        t[e[a]] = {\n          distance: -1,\n          parent: null\n        };\n      }\n\n      return t;\n    }(),\n        i = [t];\n\n    for (e[t].distance = 0; i.length;) {\n      for (var a = i.pop(), r = Object.keys(n[a]), o = r.length, s = 0; s < o; s++) {\n        var l = r[s],\n            u = e[l];\n        -1 === u.distance && (u.distance = e[a].distance + 1, u.parent = a, i.unshift(l));\n      }\n    }\n\n    return e;\n  }\n\n  function a(t, e) {\n    return function (n) {\n      return e(t(n));\n    };\n  }\n\n  function r(t, e) {\n    for (var i = [e[t].parent, t], r = n[e[t].parent][t], o = e[t].parent; e[o].parent;) {\n      i.unshift(e[o].parent), r = a(n[e[o].parent][o], r), o = e[o].parent;\n    }\n\n    return r.conversion = i, r;\n  }\n\n  var o = {};\n  Object.keys(n).forEach(function (t) {\n    o[t] = {}, Object.defineProperty(o[t], \"channels\", {\n      value: n[t].channels\n    }), Object.defineProperty(o[t], \"labels\", {\n      value: n[t].labels\n    });\n\n    var e = function (t) {\n      for (var e = i(t), n = {}, a = Object.keys(e), o = a.length, s = 0; s < o; s++) {\n        var l = a[s];\n        null !== e[l].parent && (n[l] = r(l, e));\n      }\n\n      return n;\n    }(t);\n\n    Object.keys(e).forEach(function (n) {\n      var i = e[n];\n      o[t][n] = function (t) {\n        var e = function e(_e2) {\n          if (null == _e2) return _e2;\n          arguments.length > 1 && (_e2 = Array.prototype.slice.call(arguments));\n          var n = t(_e2);\n          if (\"object\" == _typeof(n)) for (var i = n.length, a = 0; a < i; a++) {\n            n[a] = Math.round(n[a]);\n          }\n          return n;\n        };\n\n        return \"conversion\" in t && (e.conversion = t.conversion), e;\n      }(i), o[t][n].raw = function (t) {\n        var e = function e(_e3) {\n          return null == _e3 ? _e3 : (arguments.length > 1 && (_e3 = Array.prototype.slice.call(arguments)), t(_e3));\n        };\n\n        return \"conversion\" in t && (e.conversion = t.conversion), e;\n      }(i);\n    });\n  });\n  var s = o,\n      l = {\n    aliceblue: [240, 248, 255],\n    antiquewhite: [250, 235, 215],\n    aqua: [0, 255, 255],\n    aquamarine: [127, 255, 212],\n    azure: [240, 255, 255],\n    beige: [245, 245, 220],\n    bisque: [255, 228, 196],\n    black: [0, 0, 0],\n    blanchedalmond: [255, 235, 205],\n    blue: [0, 0, 255],\n    blueviolet: [138, 43, 226],\n    brown: [165, 42, 42],\n    burlywood: [222, 184, 135],\n    cadetblue: [95, 158, 160],\n    chartreuse: [127, 255, 0],\n    chocolate: [210, 105, 30],\n    coral: [255, 127, 80],\n    cornflowerblue: [100, 149, 237],\n    cornsilk: [255, 248, 220],\n    crimson: [220, 20, 60],\n    cyan: [0, 255, 255],\n    darkblue: [0, 0, 139],\n    darkcyan: [0, 139, 139],\n    darkgoldenrod: [184, 134, 11],\n    darkgray: [169, 169, 169],\n    darkgreen: [0, 100, 0],\n    darkgrey: [169, 169, 169],\n    darkkhaki: [189, 183, 107],\n    darkmagenta: [139, 0, 139],\n    darkolivegreen: [85, 107, 47],\n    darkorange: [255, 140, 0],\n    darkorchid: [153, 50, 204],\n    darkred: [139, 0, 0],\n    darksalmon: [233, 150, 122],\n    darkseagreen: [143, 188, 143],\n    darkslateblue: [72, 61, 139],\n    darkslategray: [47, 79, 79],\n    darkslategrey: [47, 79, 79],\n    darkturquoise: [0, 206, 209],\n    darkviolet: [148, 0, 211],\n    deeppink: [255, 20, 147],\n    deepskyblue: [0, 191, 255],\n    dimgray: [105, 105, 105],\n    dimgrey: [105, 105, 105],\n    dodgerblue: [30, 144, 255],\n    firebrick: [178, 34, 34],\n    floralwhite: [255, 250, 240],\n    forestgreen: [34, 139, 34],\n    fuchsia: [255, 0, 255],\n    gainsboro: [220, 220, 220],\n    ghostwhite: [248, 248, 255],\n    gold: [255, 215, 0],\n    goldenrod: [218, 165, 32],\n    gray: [128, 128, 128],\n    green: [0, 128, 0],\n    greenyellow: [173, 255, 47],\n    grey: [128, 128, 128],\n    honeydew: [240, 255, 240],\n    hotpink: [255, 105, 180],\n    indianred: [205, 92, 92],\n    indigo: [75, 0, 130],\n    ivory: [255, 255, 240],\n    khaki: [240, 230, 140],\n    lavender: [230, 230, 250],\n    lavenderblush: [255, 240, 245],\n    lawngreen: [124, 252, 0],\n    lemonchiffon: [255, 250, 205],\n    lightblue: [173, 216, 230],\n    lightcoral: [240, 128, 128],\n    lightcyan: [224, 255, 255],\n    lightgoldenrodyellow: [250, 250, 210],\n    lightgray: [211, 211, 211],\n    lightgreen: [144, 238, 144],\n    lightgrey: [211, 211, 211],\n    lightpink: [255, 182, 193],\n    lightsalmon: [255, 160, 122],\n    lightseagreen: [32, 178, 170],\n    lightskyblue: [135, 206, 250],\n    lightslategray: [119, 136, 153],\n    lightslategrey: [119, 136, 153],\n    lightsteelblue: [176, 196, 222],\n    lightyellow: [255, 255, 224],\n    lime: [0, 255, 0],\n    limegreen: [50, 205, 50],\n    linen: [250, 240, 230],\n    magenta: [255, 0, 255],\n    maroon: [128, 0, 0],\n    mediumaquamarine: [102, 205, 170],\n    mediumblue: [0, 0, 205],\n    mediumorchid: [186, 85, 211],\n    mediumpurple: [147, 112, 219],\n    mediumseagreen: [60, 179, 113],\n    mediumslateblue: [123, 104, 238],\n    mediumspringgreen: [0, 250, 154],\n    mediumturquoise: [72, 209, 204],\n    mediumvioletred: [199, 21, 133],\n    midnightblue: [25, 25, 112],\n    mintcream: [245, 255, 250],\n    mistyrose: [255, 228, 225],\n    moccasin: [255, 228, 181],\n    navajowhite: [255, 222, 173],\n    navy: [0, 0, 128],\n    oldlace: [253, 245, 230],\n    olive: [128, 128, 0],\n    olivedrab: [107, 142, 35],\n    orange: [255, 165, 0],\n    orangered: [255, 69, 0],\n    orchid: [218, 112, 214],\n    palegoldenrod: [238, 232, 170],\n    palegreen: [152, 251, 152],\n    paleturquoise: [175, 238, 238],\n    palevioletred: [219, 112, 147],\n    papayawhip: [255, 239, 213],\n    peachpuff: [255, 218, 185],\n    peru: [205, 133, 63],\n    pink: [255, 192, 203],\n    plum: [221, 160, 221],\n    powderblue: [176, 224, 230],\n    purple: [128, 0, 128],\n    rebeccapurple: [102, 51, 153],\n    red: [255, 0, 0],\n    rosybrown: [188, 143, 143],\n    royalblue: [65, 105, 225],\n    saddlebrown: [139, 69, 19],\n    salmon: [250, 128, 114],\n    sandybrown: [244, 164, 96],\n    seagreen: [46, 139, 87],\n    seashell: [255, 245, 238],\n    sienna: [160, 82, 45],\n    silver: [192, 192, 192],\n    skyblue: [135, 206, 235],\n    slateblue: [106, 90, 205],\n    slategray: [112, 128, 144],\n    slategrey: [112, 128, 144],\n    snow: [255, 250, 250],\n    springgreen: [0, 255, 127],\n    steelblue: [70, 130, 180],\n    tan: [210, 180, 140],\n    teal: [0, 128, 128],\n    thistle: [216, 191, 216],\n    tomato: [255, 99, 71],\n    turquoise: [64, 224, 208],\n    violet: [238, 130, 238],\n    wheat: [245, 222, 179],\n    white: [255, 255, 255],\n    whitesmoke: [245, 245, 245],\n    yellow: [255, 255, 0],\n    yellowgreen: [154, 205, 50]\n  },\n      u = {\n    getRgba: d,\n    getHsla: h,\n    getRgb: function getRgb(t) {\n      var e = d(t);\n      return e && e.slice(0, 3);\n    },\n    getHsl: function getHsl(t) {\n      var e = h(t);\n      return e && e.slice(0, 3);\n    },\n    getHwb: c,\n    getAlpha: function getAlpha(t) {\n      var e = d(t);\n      if (e) return e[3];\n      if (e = h(t)) return e[3];\n      if (e = c(t)) return e[3];\n    },\n    hexString: function hexString(t, e) {\n      e = void 0 !== e && 3 === t.length ? e : t[3];\n      return \"#\" + v(t[0]) + v(t[1]) + v(t[2]) + (e >= 0 && e < 1 ? v(Math.round(255 * e)) : \"\");\n    },\n    rgbString: function rgbString(t, e) {\n      if (e < 1 || t[3] && t[3] < 1) return f(t, e);\n      return \"rgb(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \")\";\n    },\n    rgbaString: f,\n    percentString: function percentString(t, e) {\n      if (e < 1 || t[3] && t[3] < 1) return g(t, e);\n      var n = Math.round(t[0] / 255 * 100),\n          i = Math.round(t[1] / 255 * 100),\n          a = Math.round(t[2] / 255 * 100);\n      return \"rgb(\" + n + \"%, \" + i + \"%, \" + a + \"%)\";\n    },\n    percentaString: g,\n    hslString: function hslString(t, e) {\n      if (e < 1 || t[3] && t[3] < 1) return p(t, e);\n      return \"hsl(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%)\";\n    },\n    hslaString: p,\n    hwbString: function hwbString(t, e) {\n      void 0 === e && (e = void 0 !== t[3] ? t[3] : 1);\n      return \"hwb(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%\" + (void 0 !== e && 1 !== e ? \", \" + e : \"\") + \")\";\n    },\n    keyword: function keyword(t) {\n      return b[t.slice(0, 3)];\n    }\n  };\n\n  function d(t) {\n    if (t) {\n      var e = [0, 0, 0],\n          n = 1,\n          i = t.match(/^#([a-fA-F0-9]{3,4})$/i),\n          a = \"\";\n\n      if (i) {\n        a = (i = i[1])[3];\n\n        for (var r = 0; r < e.length; r++) {\n          e[r] = parseInt(i[r] + i[r], 16);\n        }\n\n        a && (n = Math.round(parseInt(a + a, 16) / 255 * 100) / 100);\n      } else if (i = t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)) {\n        a = i[2], i = i[1];\n\n        for (r = 0; r < e.length; r++) {\n          e[r] = parseInt(i.slice(2 * r, 2 * r + 2), 16);\n        }\n\n        a && (n = Math.round(parseInt(a, 16) / 255 * 100) / 100);\n      } else if (i = t.match(/^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i)) {\n        for (r = 0; r < e.length; r++) {\n          e[r] = parseInt(i[r + 1]);\n        }\n\n        n = parseFloat(i[4]);\n      } else if (i = t.match(/^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i)) {\n        for (r = 0; r < e.length; r++) {\n          e[r] = Math.round(2.55 * parseFloat(i[r + 1]));\n        }\n\n        n = parseFloat(i[4]);\n      } else if (i = t.match(/(\\w+)/)) {\n        if (\"transparent\" == i[1]) return [0, 0, 0, 0];\n        if (!(e = l[i[1]])) return;\n      }\n\n      for (r = 0; r < e.length; r++) {\n        e[r] = m(e[r], 0, 255);\n      }\n\n      return n = n || 0 == n ? m(n, 0, 1) : 1, e[3] = n, e;\n    }\n  }\n\n  function h(t) {\n    if (t) {\n      var e = t.match(/^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/);\n\n      if (e) {\n        var n = parseFloat(e[4]);\n        return [m(parseInt(e[1]), 0, 360), m(parseFloat(e[2]), 0, 100), m(parseFloat(e[3]), 0, 100), m(isNaN(n) ? 1 : n, 0, 1)];\n      }\n    }\n  }\n\n  function c(t) {\n    if (t) {\n      var e = t.match(/^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/);\n\n      if (e) {\n        var n = parseFloat(e[4]);\n        return [m(parseInt(e[1]), 0, 360), m(parseFloat(e[2]), 0, 100), m(parseFloat(e[3]), 0, 100), m(isNaN(n) ? 1 : n, 0, 1)];\n      }\n    }\n  }\n\n  function f(t, e) {\n    return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"rgba(\" + t[0] + \", \" + t[1] + \", \" + t[2] + \", \" + e + \")\";\n  }\n\n  function g(t, e) {\n    return \"rgba(\" + Math.round(t[0] / 255 * 100) + \"%, \" + Math.round(t[1] / 255 * 100) + \"%, \" + Math.round(t[2] / 255 * 100) + \"%, \" + (e || t[3] || 1) + \")\";\n  }\n\n  function p(t, e) {\n    return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), \"hsla(\" + t[0] + \", \" + t[1] + \"%, \" + t[2] + \"%, \" + e + \")\";\n  }\n\n  function m(t, e, n) {\n    return Math.min(Math.max(e, t), n);\n  }\n\n  function v(t) {\n    var e = t.toString(16).toUpperCase();\n    return e.length < 2 ? \"0\" + e : e;\n  }\n\n  var b = {};\n\n  for (var x in l) {\n    b[l[x]] = x;\n  }\n\n  var y = function y(t) {\n    return t instanceof y ? t : this instanceof y ? (this.valid = !1, this.values = {\n      rgb: [0, 0, 0],\n      hsl: [0, 0, 0],\n      hsv: [0, 0, 0],\n      hwb: [0, 0, 0],\n      cmyk: [0, 0, 0, 0],\n      alpha: 1\n    }, void (\"string\" == typeof t ? (e = u.getRgba(t)) ? this.setValues(\"rgb\", e) : (e = u.getHsla(t)) ? this.setValues(\"hsl\", e) : (e = u.getHwb(t)) && this.setValues(\"hwb\", e) : \"object\" == _typeof(t) && (void 0 !== (e = t).r || void 0 !== e.red ? this.setValues(\"rgb\", e) : void 0 !== e.l || void 0 !== e.lightness ? this.setValues(\"hsl\", e) : void 0 !== e.v || void 0 !== e.value ? this.setValues(\"hsv\", e) : void 0 !== e.w || void 0 !== e.whiteness ? this.setValues(\"hwb\", e) : void 0 === e.c && void 0 === e.cyan || this.setValues(\"cmyk\", e)))) : new y(t);\n    var e;\n  };\n\n  y.prototype = {\n    isValid: function isValid() {\n      return this.valid;\n    },\n    rgb: function rgb() {\n      return this.setSpace(\"rgb\", arguments);\n    },\n    hsl: function hsl() {\n      return this.setSpace(\"hsl\", arguments);\n    },\n    hsv: function hsv() {\n      return this.setSpace(\"hsv\", arguments);\n    },\n    hwb: function hwb() {\n      return this.setSpace(\"hwb\", arguments);\n    },\n    cmyk: function cmyk() {\n      return this.setSpace(\"cmyk\", arguments);\n    },\n    rgbArray: function rgbArray() {\n      return this.values.rgb;\n    },\n    hslArray: function hslArray() {\n      return this.values.hsl;\n    },\n    hsvArray: function hsvArray() {\n      return this.values.hsv;\n    },\n    hwbArray: function hwbArray() {\n      var t = this.values;\n      return 1 !== t.alpha ? t.hwb.concat([t.alpha]) : t.hwb;\n    },\n    cmykArray: function cmykArray() {\n      return this.values.cmyk;\n    },\n    rgbaArray: function rgbaArray() {\n      var t = this.values;\n      return t.rgb.concat([t.alpha]);\n    },\n    hslaArray: function hslaArray() {\n      var t = this.values;\n      return t.hsl.concat([t.alpha]);\n    },\n    alpha: function alpha(t) {\n      return void 0 === t ? this.values.alpha : (this.setValues(\"alpha\", t), this);\n    },\n    red: function red(t) {\n      return this.setChannel(\"rgb\", 0, t);\n    },\n    green: function green(t) {\n      return this.setChannel(\"rgb\", 1, t);\n    },\n    blue: function blue(t) {\n      return this.setChannel(\"rgb\", 2, t);\n    },\n    hue: function hue(t) {\n      return t && (t = (t %= 360) < 0 ? 360 + t : t), this.setChannel(\"hsl\", 0, t);\n    },\n    saturation: function saturation(t) {\n      return this.setChannel(\"hsl\", 1, t);\n    },\n    lightness: function lightness(t) {\n      return this.setChannel(\"hsl\", 2, t);\n    },\n    saturationv: function saturationv(t) {\n      return this.setChannel(\"hsv\", 1, t);\n    },\n    whiteness: function whiteness(t) {\n      return this.setChannel(\"hwb\", 1, t);\n    },\n    blackness: function blackness(t) {\n      return this.setChannel(\"hwb\", 2, t);\n    },\n    value: function value(t) {\n      return this.setChannel(\"hsv\", 2, t);\n    },\n    cyan: function cyan(t) {\n      return this.setChannel(\"cmyk\", 0, t);\n    },\n    magenta: function magenta(t) {\n      return this.setChannel(\"cmyk\", 1, t);\n    },\n    yellow: function yellow(t) {\n      return this.setChannel(\"cmyk\", 2, t);\n    },\n    black: function black(t) {\n      return this.setChannel(\"cmyk\", 3, t);\n    },\n    hexString: function hexString() {\n      return u.hexString(this.values.rgb);\n    },\n    rgbString: function rgbString() {\n      return u.rgbString(this.values.rgb, this.values.alpha);\n    },\n    rgbaString: function rgbaString() {\n      return u.rgbaString(this.values.rgb, this.values.alpha);\n    },\n    percentString: function percentString() {\n      return u.percentString(this.values.rgb, this.values.alpha);\n    },\n    hslString: function hslString() {\n      return u.hslString(this.values.hsl, this.values.alpha);\n    },\n    hslaString: function hslaString() {\n      return u.hslaString(this.values.hsl, this.values.alpha);\n    },\n    hwbString: function hwbString() {\n      return u.hwbString(this.values.hwb, this.values.alpha);\n    },\n    keyword: function keyword() {\n      return u.keyword(this.values.rgb, this.values.alpha);\n    },\n    rgbNumber: function rgbNumber() {\n      var t = this.values.rgb;\n      return t[0] << 16 | t[1] << 8 | t[2];\n    },\n    luminosity: function luminosity() {\n      for (var t = this.values.rgb, e = [], n = 0; n < t.length; n++) {\n        var i = t[n] / 255;\n        e[n] = i <= .03928 ? i / 12.92 : Math.pow((i + .055) / 1.055, 2.4);\n      }\n\n      return .2126 * e[0] + .7152 * e[1] + .0722 * e[2];\n    },\n    contrast: function contrast(t) {\n      var e = this.luminosity(),\n          n = t.luminosity();\n      return e > n ? (e + .05) / (n + .05) : (n + .05) / (e + .05);\n    },\n    level: function level(t) {\n      var e = this.contrast(t);\n      return e >= 7.1 ? \"AAA\" : e >= 4.5 ? \"AA\" : \"\";\n    },\n    dark: function dark() {\n      var t = this.values.rgb;\n      return (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3 < 128;\n    },\n    light: function light() {\n      return !this.dark();\n    },\n    negate: function negate() {\n      for (var t = [], e = 0; e < 3; e++) {\n        t[e] = 255 - this.values.rgb[e];\n      }\n\n      return this.setValues(\"rgb\", t), this;\n    },\n    lighten: function lighten(t) {\n      var e = this.values.hsl;\n      return e[2] += e[2] * t, this.setValues(\"hsl\", e), this;\n    },\n    darken: function darken(t) {\n      var e = this.values.hsl;\n      return e[2] -= e[2] * t, this.setValues(\"hsl\", e), this;\n    },\n    saturate: function saturate(t) {\n      var e = this.values.hsl;\n      return e[1] += e[1] * t, this.setValues(\"hsl\", e), this;\n    },\n    desaturate: function desaturate(t) {\n      var e = this.values.hsl;\n      return e[1] -= e[1] * t, this.setValues(\"hsl\", e), this;\n    },\n    whiten: function whiten(t) {\n      var e = this.values.hwb;\n      return e[1] += e[1] * t, this.setValues(\"hwb\", e), this;\n    },\n    blacken: function blacken(t) {\n      var e = this.values.hwb;\n      return e[2] += e[2] * t, this.setValues(\"hwb\", e), this;\n    },\n    greyscale: function greyscale() {\n      var t = this.values.rgb,\n          e = .3 * t[0] + .59 * t[1] + .11 * t[2];\n      return this.setValues(\"rgb\", [e, e, e]), this;\n    },\n    clearer: function clearer(t) {\n      var e = this.values.alpha;\n      return this.setValues(\"alpha\", e - e * t), this;\n    },\n    opaquer: function opaquer(t) {\n      var e = this.values.alpha;\n      return this.setValues(\"alpha\", e + e * t), this;\n    },\n    rotate: function rotate(t) {\n      var e = this.values.hsl,\n          n = (e[0] + t) % 360;\n      return e[0] = n < 0 ? 360 + n : n, this.setValues(\"hsl\", e), this;\n    },\n    mix: function mix(t, e) {\n      var n = t,\n          i = void 0 === e ? .5 : e,\n          a = 2 * i - 1,\n          r = this.alpha() - n.alpha(),\n          o = ((a * r == -1 ? a : (a + r) / (1 + a * r)) + 1) / 2,\n          s = 1 - o;\n      return this.rgb(o * this.red() + s * n.red(), o * this.green() + s * n.green(), o * this.blue() + s * n.blue()).alpha(this.alpha() * i + n.alpha() * (1 - i));\n    },\n    toJSON: function toJSON() {\n      return this.rgb();\n    },\n    clone: function clone() {\n      var t,\n          e,\n          n = new y(),\n          i = this.values,\n          a = n.values;\n\n      for (var r in i) {\n        i.hasOwnProperty(r) && (t = i[r], \"[object Array]\" === (e = {}.toString.call(t)) ? a[r] = t.slice(0) : \"[object Number]\" === e ? a[r] = t : console.error(\"unexpected color value:\", t));\n      }\n\n      return n;\n    }\n  }, y.prototype.spaces = {\n    rgb: [\"red\", \"green\", \"blue\"],\n    hsl: [\"hue\", \"saturation\", \"lightness\"],\n    hsv: [\"hue\", \"saturation\", \"value\"],\n    hwb: [\"hue\", \"whiteness\", \"blackness\"],\n    cmyk: [\"cyan\", \"magenta\", \"yellow\", \"black\"]\n  }, y.prototype.maxes = {\n    rgb: [255, 255, 255],\n    hsl: [360, 100, 100],\n    hsv: [360, 100, 100],\n    hwb: [360, 100, 100],\n    cmyk: [100, 100, 100, 100]\n  }, y.prototype.getValues = function (t) {\n    for (var e = this.values, n = {}, i = 0; i < t.length; i++) {\n      n[t.charAt(i)] = e[t][i];\n    }\n\n    return 1 !== e.alpha && (n.a = e.alpha), n;\n  }, y.prototype.setValues = function (t, e) {\n    var n,\n        i,\n        a = this.values,\n        r = this.spaces,\n        o = this.maxes,\n        l = 1;\n    if (this.valid = !0, \"alpha\" === t) l = e;else if (e.length) a[t] = e.slice(0, t.length), l = e[t.length];else if (void 0 !== e[t.charAt(0)]) {\n      for (n = 0; n < t.length; n++) {\n        a[t][n] = e[t.charAt(n)];\n      }\n\n      l = e.a;\n    } else if (void 0 !== e[r[t][0]]) {\n      var u = r[t];\n\n      for (n = 0; n < t.length; n++) {\n        a[t][n] = e[u[n]];\n      }\n\n      l = e.alpha;\n    }\n    if (a.alpha = Math.max(0, Math.min(1, void 0 === l ? a.alpha : l)), \"alpha\" === t) return !1;\n\n    for (n = 0; n < t.length; n++) {\n      i = Math.max(0, Math.min(o[t][n], a[t][n])), a[t][n] = Math.round(i);\n    }\n\n    for (var d in r) {\n      d !== t && (a[d] = s[t][d](a[t]));\n    }\n\n    return !0;\n  }, y.prototype.setSpace = function (t, e) {\n    var n = e[0];\n    return void 0 === n ? this.getValues(t) : (\"number\" == typeof n && (n = Array.prototype.slice.call(e)), this.setValues(t, n), this);\n  }, y.prototype.setChannel = function (t, e, n) {\n    var i = this.values[t];\n    return void 0 === n ? i[e] : n === i[e] ? this : (i[e] = n, this.setValues(t, i), this);\n  }, \"undefined\" != typeof window && (window.Color = y);\n  var _ = y;\n\n  function k(t) {\n    return -1 === [\"__proto__\", \"prototype\", \"constructor\"].indexOf(t);\n  }\n\n  var w,\n      M = {\n    noop: function noop() {},\n    uid: (w = 0, function () {\n      return w++;\n    }),\n    isNullOrUndef: function isNullOrUndef(t) {\n      return null == t;\n    },\n    isArray: function isArray(t) {\n      if (Array.isArray && Array.isArray(t)) return !0;\n      var e = Object.prototype.toString.call(t);\n      return \"[object\" === e.substr(0, 7) && \"Array]\" === e.substr(-6);\n    },\n    isObject: function isObject(t) {\n      return null !== t && \"[object Object]\" === Object.prototype.toString.call(t);\n    },\n    isFinite: function (_isFinite) {\n      function isFinite(_x) {\n        return _isFinite.apply(this, arguments);\n      }\n\n      isFinite.toString = function () {\n        return _isFinite.toString();\n      };\n\n      return isFinite;\n    }(function (t) {\n      return (\"number\" == typeof t || t instanceof Number) && isFinite(t);\n    }),\n    valueOrDefault: function valueOrDefault(t, e) {\n      return void 0 === t ? e : t;\n    },\n    valueAtIndexOrDefault: function valueAtIndexOrDefault(t, e, n) {\n      return M.valueOrDefault(M.isArray(t) ? t[e] : t, n);\n    },\n    callback: function callback(t, e, n) {\n      if (t && \"function\" == typeof t.call) return t.apply(n, e);\n    },\n    each: function each(t, e, n, i) {\n      var a, r, o;\n      if (M.isArray(t)) {\n        if (r = t.length, i) for (a = r - 1; a >= 0; a--) {\n          e.call(n, t[a], a);\n        } else for (a = 0; a < r; a++) {\n          e.call(n, t[a], a);\n        }\n      } else if (M.isObject(t)) for (r = (o = Object.keys(t)).length, a = 0; a < r; a++) {\n        e.call(n, t[o[a]], o[a]);\n      }\n    },\n    arrayEquals: function arrayEquals(t, e) {\n      var n, i, a, r;\n      if (!t || !e || t.length !== e.length) return !1;\n\n      for (n = 0, i = t.length; n < i; ++n) {\n        if (a = t[n], r = e[n], a instanceof Array && r instanceof Array) {\n          if (!M.arrayEquals(a, r)) return !1;\n        } else if (a !== r) return !1;\n      }\n\n      return !0;\n    },\n    clone: function clone(t) {\n      if (M.isArray(t)) return t.map(M.clone);\n\n      if (M.isObject(t)) {\n        for (var e = Object.create(t), n = Object.keys(t), i = n.length, a = 0; a < i; ++a) {\n          e[n[a]] = M.clone(t[n[a]]);\n        }\n\n        return e;\n      }\n\n      return t;\n    },\n    _merger: function _merger(t, e, n, i) {\n      if (k(t)) {\n        var a = e[t],\n            r = n[t];\n        M.isObject(a) && M.isObject(r) ? M.merge(a, r, i) : e[t] = M.clone(r);\n      }\n    },\n    _mergerIf: function _mergerIf(t, e, n) {\n      if (k(t)) {\n        var i = e[t],\n            a = n[t];\n        M.isObject(i) && M.isObject(a) ? M.mergeIf(i, a) : e.hasOwnProperty(t) || (e[t] = M.clone(a));\n      }\n    },\n    merge: function merge(t, e, n) {\n      var i,\n          a,\n          r,\n          o,\n          s,\n          l = M.isArray(e) ? e : [e],\n          u = l.length;\n      if (!M.isObject(t)) return t;\n\n      for (i = (n = n || {}).merger || M._merger, a = 0; a < u; ++a) {\n        if (e = l[a], M.isObject(e)) for (s = 0, o = (r = Object.keys(e)).length; s < o; ++s) {\n          i(r[s], t, e, n);\n        }\n      }\n\n      return t;\n    },\n    mergeIf: function mergeIf(t, e) {\n      return M.merge(t, e, {\n        merger: M._mergerIf\n      });\n    },\n    extend: Object.assign || function (t) {\n      return M.merge(t, [].slice.call(arguments, 1), {\n        merger: function merger(t, e, n) {\n          e[t] = n[t];\n        }\n      });\n    },\n    inherits: function inherits(t) {\n      var e = this,\n          n = t && t.hasOwnProperty(\"constructor\") ? t.constructor : function () {\n        return e.apply(this, arguments);\n      },\n          i = function i() {\n        this.constructor = n;\n      };\n\n      return i.prototype = e.prototype, n.prototype = new i(), n.extend = M.inherits, t && M.extend(n.prototype, t), n.__super__ = e.prototype, n;\n    },\n    _deprecated: function _deprecated(t, e, n, i) {\n      void 0 !== e && console.warn(t + ': \"' + n + '\" is deprecated. Please use \"' + i + '\" instead');\n    }\n  },\n      S = M;\n  M.callCallback = M.callback, M.indexOf = function (t, e, n) {\n    return Array.prototype.indexOf.call(t, e, n);\n  }, M.getValueOrDefault = M.valueOrDefault, M.getValueAtIndexOrDefault = M.valueAtIndexOrDefault;\n  var C = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return -t * (t - 2);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      return (t /= .5) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return (t -= 1) * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return -((t -= 1) * t * t * t - 1);\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return (t -= 1) * t * t * t * t + 1;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      return (t /= .5) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);\n    },\n    easeInSine: function easeInSine(t) {\n      return 1 - Math.cos(t * (Math.PI / 2));\n    },\n    easeOutSine: function easeOutSine(t) {\n      return Math.sin(t * (Math.PI / 2));\n    },\n    easeInOutSine: function easeInOutSine(t) {\n      return -.5 * (Math.cos(Math.PI * t) - 1);\n    },\n    easeInExpo: function easeInExpo(t) {\n      return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));\n    },\n    easeOutExpo: function easeOutExpo(t) {\n      return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);\n    },\n    easeInOutExpo: function easeInOutExpo(t) {\n      return 0 === t ? 0 : 1 === t ? 1 : (t /= .5) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * --t));\n    },\n    easeInCirc: function easeInCirc(t) {\n      return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1);\n    },\n    easeOutCirc: function easeOutCirc(t) {\n      return Math.sqrt(1 - (t -= 1) * t);\n    },\n    easeInOutCirc: function easeInOutCirc(t) {\n      return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n    },\n    easeInElastic: function easeInElastic(t) {\n      var e = 1.70158,\n          n = 0,\n          i = 1;\n      return 0 === t ? 0 : 1 === t ? 1 : (n || (n = .3), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), -i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n));\n    },\n    easeOutElastic: function easeOutElastic(t) {\n      var e = 1.70158,\n          n = 0,\n          i = 1;\n      return 0 === t ? 0 : 1 === t ? 1 : (n || (n = .3), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), i * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / n) + 1);\n    },\n    easeInOutElastic: function easeInOutElastic(t) {\n      var e = 1.70158,\n          n = 0,\n          i = 1;\n      return 0 === t ? 0 : 2 == (t /= .5) ? 1 : (n || (n = .45), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), t < 1 ? i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n) * -.5 : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n) * .5 + 1);\n    },\n    easeInBack: function easeInBack(t) {\n      var e = 1.70158;\n      return t * t * ((e + 1) * t - e);\n    },\n    easeOutBack: function easeOutBack(t) {\n      var e = 1.70158;\n      return (t -= 1) * t * ((e + 1) * t + e) + 1;\n    },\n    easeInOutBack: function easeInOutBack(t) {\n      var e = 1.70158;\n      return (t /= .5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);\n    },\n    easeInBounce: function easeInBounce(t) {\n      return 1 - C.easeOutBounce(1 - t);\n    },\n    easeOutBounce: function easeOutBounce(t) {\n      return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n    },\n    easeInOutBounce: function easeInOutBounce(t) {\n      return t < .5 ? .5 * C.easeInBounce(2 * t) : .5 * C.easeOutBounce(2 * t - 1) + .5;\n    }\n  },\n      P = {\n    effects: C\n  };\n  S.easingEffects = C;\n  var A = Math.PI,\n      D = A / 180,\n      T = 2 * A,\n      I = A / 2,\n      F = A / 4,\n      O = 2 * A / 3,\n      L = {\n    clear: function clear(t) {\n      t.ctx.clearRect(0, 0, t.width, t.height);\n    },\n    roundedRect: function roundedRect(t, e, n, i, a, r) {\n      if (r) {\n        var o = Math.min(r, a / 2, i / 2),\n            s = e + o,\n            l = n + o,\n            u = e + i - o,\n            d = n + a - o;\n        t.moveTo(e, l), s < u && l < d ? (t.arc(s, l, o, -A, -I), t.arc(u, l, o, -I, 0), t.arc(u, d, o, 0, I), t.arc(s, d, o, I, A)) : s < u ? (t.moveTo(s, n), t.arc(u, l, o, -I, I), t.arc(s, l, o, I, A + I)) : l < d ? (t.arc(s, l, o, -A, 0), t.arc(s, d, o, 0, A)) : t.arc(s, l, o, -A, A), t.closePath(), t.moveTo(e, n);\n      } else t.rect(e, n, i, a);\n    },\n    drawPoint: function drawPoint(t, e, n, i, a, r) {\n      var o,\n          s,\n          l,\n          u,\n          d,\n          h = (r || 0) * D;\n      if (e && \"object\" == _typeof(e) && (\"[object HTMLImageElement]\" === (o = e.toString()) || \"[object HTMLCanvasElement]\" === o)) return t.save(), t.translate(i, a), t.rotate(h), t.drawImage(e, -e.width / 2, -e.height / 2, e.width, e.height), void t.restore();\n\n      if (!(isNaN(n) || n <= 0)) {\n        switch (t.beginPath(), e) {\n          default:\n            t.arc(i, a, n, 0, T), t.closePath();\n            break;\n\n          case \"triangle\":\n            t.moveTo(i + Math.sin(h) * n, a - Math.cos(h) * n), h += O, t.lineTo(i + Math.sin(h) * n, a - Math.cos(h) * n), h += O, t.lineTo(i + Math.sin(h) * n, a - Math.cos(h) * n), t.closePath();\n            break;\n\n          case \"rectRounded\":\n            u = n - (d = .516 * n), s = Math.cos(h + F) * u, l = Math.sin(h + F) * u, t.arc(i - s, a - l, d, h - A, h - I), t.arc(i + l, a - s, d, h - I, h), t.arc(i + s, a + l, d, h, h + I), t.arc(i - l, a + s, d, h + I, h + A), t.closePath();\n            break;\n\n          case \"rect\":\n            if (!r) {\n              u = Math.SQRT1_2 * n, t.rect(i - u, a - u, 2 * u, 2 * u);\n              break;\n            }\n\n            h += F;\n\n          case \"rectRot\":\n            s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + l, a - s), t.lineTo(i + s, a + l), t.lineTo(i - l, a + s), t.closePath();\n            break;\n\n          case \"crossRot\":\n            h += F;\n\n          case \"cross\":\n            s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l), t.moveTo(i + l, a - s), t.lineTo(i - l, a + s);\n            break;\n\n          case \"star\":\n            s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l), t.moveTo(i + l, a - s), t.lineTo(i - l, a + s), h += F, s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l), t.moveTo(i + l, a - s), t.lineTo(i - l, a + s);\n            break;\n\n          case \"line\":\n            s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l);\n            break;\n\n          case \"dash\":\n            t.moveTo(i, a), t.lineTo(i + Math.cos(h) * n, a + Math.sin(h) * n);\n        }\n\n        t.fill(), t.stroke();\n      }\n    },\n    _isPointInArea: function _isPointInArea(t, e) {\n      return t.x > e.left - 1e-6 && t.x < e.right + 1e-6 && t.y > e.top - 1e-6 && t.y < e.bottom + 1e-6;\n    },\n    clipArea: function clipArea(t, e) {\n      t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip();\n    },\n    unclipArea: function unclipArea(t) {\n      t.restore();\n    },\n    lineTo: function lineTo(t, e, n, i) {\n      var a = n.steppedLine;\n\n      if (a) {\n        if (\"middle\" === a) {\n          var r = (e.x + n.x) / 2;\n          t.lineTo(r, i ? n.y : e.y), t.lineTo(r, i ? e.y : n.y);\n        } else \"after\" === a && !i || \"after\" !== a && i ? t.lineTo(e.x, n.y) : t.lineTo(n.x, e.y);\n\n        t.lineTo(n.x, n.y);\n      } else n.tension ? t.bezierCurveTo(i ? e.controlPointPreviousX : e.controlPointNextX, i ? e.controlPointPreviousY : e.controlPointNextY, i ? n.controlPointNextX : n.controlPointPreviousX, i ? n.controlPointNextY : n.controlPointPreviousY, n.x, n.y) : t.lineTo(n.x, n.y);\n    }\n  },\n      R = L;\n  S.clear = L.clear, S.drawRoundedRectangle = function (t) {\n    t.beginPath(), L.roundedRect.apply(L, arguments);\n  };\n  var z = {\n    _set: function _set(t, e) {\n      return S.merge(this[t] || (this[t] = {}), e);\n    }\n  };\n\n  z._set(\"global\", {\n    defaultColor: \"rgba(0,0,0,0.1)\",\n    defaultFontColor: \"#666\",\n    defaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n    defaultFontSize: 12,\n    defaultFontStyle: \"normal\",\n    defaultLineHeight: 1.2,\n    showLines: !0\n  });\n\n  var N = z,\n      B = S.valueOrDefault;\n  var E = {\n    toLineHeight: function toLineHeight(t, e) {\n      var n = (\"\" + t).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n      if (!n || \"normal\" === n[1]) return 1.2 * e;\n\n      switch (t = +n[2], n[3]) {\n        case \"px\":\n          return t;\n\n        case \"%\":\n          t /= 100;\n      }\n\n      return e * t;\n    },\n    toPadding: function toPadding(t) {\n      var e, n, i, a;\n      return S.isObject(t) ? (e = +t.top || 0, n = +t.right || 0, i = +t.bottom || 0, a = +t.left || 0) : e = n = i = a = +t || 0, {\n        top: e,\n        right: n,\n        bottom: i,\n        left: a,\n        height: e + i,\n        width: a + n\n      };\n    },\n    _parseFont: function _parseFont(t) {\n      var e = N.global,\n          n = B(t.fontSize, e.defaultFontSize),\n          i = {\n        family: B(t.fontFamily, e.defaultFontFamily),\n        lineHeight: S.options.toLineHeight(B(t.lineHeight, e.defaultLineHeight), n),\n        size: n,\n        style: B(t.fontStyle, e.defaultFontStyle),\n        weight: null,\n        string: \"\"\n      };\n      return i.string = function (t) {\n        return !t || S.isNullOrUndef(t.size) || S.isNullOrUndef(t.family) ? null : (t.style ? t.style + \" \" : \"\") + (t.weight ? t.weight + \" \" : \"\") + t.size + \"px \" + t.family;\n      }(i), i;\n    },\n    resolve: function resolve(t, e, n, i) {\n      var a,\n          r,\n          o,\n          s = !0;\n\n      for (a = 0, r = t.length; a < r; ++a) {\n        if (void 0 !== (o = t[a]) && (void 0 !== e && \"function\" == typeof o && (o = o(e), s = !1), void 0 !== n && S.isArray(o) && (o = o[n], s = !1), void 0 !== o)) return i && !s && (i.cacheable = !1), o;\n      }\n    }\n  },\n      W = {\n    _factorize: function _factorize(t) {\n      var e,\n          n = [],\n          i = Math.sqrt(t);\n\n      for (e = 1; e < i; e++) {\n        t % e == 0 && (n.push(e), n.push(t / e));\n      }\n\n      return i === (0 | i) && n.push(i), n.sort(function (t, e) {\n        return t - e;\n      }).pop(), n;\n    },\n    log10: Math.log10 || function (t) {\n      var e = Math.log(t) * Math.LOG10E,\n          n = Math.round(e);\n      return t === Math.pow(10, n) ? n : e;\n    }\n  },\n      V = W;\n  S.log10 = W.log10;\n  var H = S,\n      j = P,\n      q = R,\n      U = E,\n      Y = V,\n      G = {\n    getRtlAdapter: function getRtlAdapter(t, e, n) {\n      return t ? function (t, e) {\n        return {\n          x: function x(n) {\n            return t + t + e - n;\n          },\n          setWidth: function setWidth(t) {\n            e = t;\n          },\n          textAlign: function textAlign(t) {\n            return \"center\" === t ? t : \"right\" === t ? \"left\" : \"right\";\n          },\n          xPlus: function xPlus(t, e) {\n            return t - e;\n          },\n          leftForLtr: function leftForLtr(t, e) {\n            return t - e;\n          }\n        };\n      }(e, n) : {\n        x: function x(t) {\n          return t;\n        },\n        setWidth: function setWidth(t) {},\n        textAlign: function textAlign(t) {\n          return t;\n        },\n        xPlus: function xPlus(t, e) {\n          return t + e;\n        },\n        leftForLtr: function leftForLtr(t, e) {\n          return t;\n        }\n      };\n    },\n    overrideTextDirection: function overrideTextDirection(t, e) {\n      var n, i;\n      \"ltr\" !== e && \"rtl\" !== e || (i = [(n = t.canvas.style).getPropertyValue(\"direction\"), n.getPropertyPriority(\"direction\")], n.setProperty(\"direction\", e, \"important\"), t.prevTextDirection = i);\n    },\n    restoreTextDirection: function restoreTextDirection(t) {\n      var e = t.prevTextDirection;\n      void 0 !== e && (delete t.prevTextDirection, t.canvas.style.setProperty(\"direction\", e[0], e[1]));\n    }\n  };\n  H.easing = j, H.canvas = q, H.options = U, H.math = Y, H.rtl = G;\n\n  var X = function X(t) {\n    H.extend(this, t), this.initialize.apply(this, arguments);\n  };\n\n  H.extend(X.prototype, {\n    _type: void 0,\n    initialize: function initialize() {\n      this.hidden = !1;\n    },\n    pivot: function pivot() {\n      var t = this;\n      return t._view || (t._view = H.extend({}, t._model)), t._start = {}, t;\n    },\n    transition: function transition(t) {\n      var e = this,\n          n = e._model,\n          i = e._start,\n          a = e._view;\n      return n && 1 !== t ? (a || (a = e._view = {}), i || (i = e._start = {}), function (t, e, n, i) {\n        var a,\n            r,\n            o,\n            s,\n            l,\n            u,\n            d,\n            h,\n            c,\n            f = Object.keys(n);\n\n        for (a = 0, r = f.length; a < r; ++a) {\n          if (u = n[o = f[a]], e.hasOwnProperty(o) || (e[o] = u), (s = e[o]) !== u && \"_\" !== o[0]) {\n            if (t.hasOwnProperty(o) || (t[o] = s), (d = _typeof(u)) === _typeof(l = t[o])) if (\"string\" === d) {\n              if ((h = _(l)).valid && (c = _(u)).valid) {\n                e[o] = c.mix(h, i).rgbString();\n                continue;\n              }\n            } else if (H.isFinite(l) && H.isFinite(u)) {\n              e[o] = l + (u - l) * i;\n              continue;\n            }\n            e[o] = u;\n          }\n        }\n      }(i, a, n, t), e) : (e._view = H.extend({}, n), e._start = null, e);\n    },\n    tooltipPosition: function tooltipPosition() {\n      return {\n        x: this._model.x,\n        y: this._model.y\n      };\n    },\n    hasValue: function hasValue() {\n      return H.isNumber(this._model.x) && H.isNumber(this._model.y);\n    }\n  }), X.extend = H.inherits;\n  var K = X,\n      Z = K.extend({\n    chart: null,\n    currentStep: 0,\n    numSteps: 60,\n    easing: \"\",\n    render: null,\n    onAnimationProgress: null,\n    onAnimationComplete: null\n  }),\n      $ = Z;\n  Object.defineProperty(Z.prototype, \"animationObject\", {\n    get: function get() {\n      return this;\n    }\n  }), Object.defineProperty(Z.prototype, \"chartInstance\", {\n    get: function get() {\n      return this.chart;\n    },\n    set: function set(t) {\n      this.chart = t;\n    }\n  }), N._set(\"global\", {\n    animation: {\n      duration: 1e3,\n      easing: \"easeOutQuart\",\n      onProgress: H.noop,\n      onComplete: H.noop\n    }\n  });\n  var J = {\n    animations: [],\n    request: null,\n    addAnimation: function addAnimation(t, e, n, i) {\n      var a,\n          r,\n          o = this.animations;\n\n      for (e.chart = t, e.startTime = Date.now(), e.duration = n, i || (t.animating = !0), a = 0, r = o.length; a < r; ++a) {\n        if (o[a].chart === t) return void (o[a] = e);\n      }\n\n      o.push(e), 1 === o.length && this.requestAnimationFrame();\n    },\n    cancelAnimation: function cancelAnimation(t) {\n      var e = H.findIndex(this.animations, function (e) {\n        return e.chart === t;\n      });\n      -1 !== e && (this.animations.splice(e, 1), t.animating = !1);\n    },\n    requestAnimationFrame: function requestAnimationFrame() {\n      var t = this;\n      null === t.request && (t.request = H.requestAnimFrame.call(window, function () {\n        t.request = null, t.startDigest();\n      }));\n    },\n    startDigest: function startDigest() {\n      this.advance(), this.animations.length > 0 && this.requestAnimationFrame();\n    },\n    advance: function advance() {\n      for (var t, e, n, i, a = this.animations, r = 0; r < a.length;) {\n        e = (t = a[r]).chart, n = t.numSteps, i = Math.floor((Date.now() - t.startTime) / t.duration * n) + 1, t.currentStep = Math.min(i, n), H.callback(t.render, [e, t], e), H.callback(t.onAnimationProgress, [t], e), t.currentStep >= n ? (H.callback(t.onAnimationComplete, [t], e), e.animating = !1, a.splice(r, 1)) : ++r;\n      }\n    }\n  },\n      Q = H.options.resolve,\n      tt = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\n\n  function et(t, e) {\n    var n = t._chartjs;\n\n    if (n) {\n      var i = n.listeners,\n          a = i.indexOf(e);\n      -1 !== a && i.splice(a, 1), i.length > 0 || (tt.forEach(function (e) {\n        delete t[e];\n      }), delete t._chartjs);\n    }\n  }\n\n  var nt = function nt(t, e) {\n    this.initialize(t, e);\n  };\n\n  H.extend(nt.prototype, {\n    datasetElementType: null,\n    dataElementType: null,\n    _datasetElementOptions: [\"backgroundColor\", \"borderCapStyle\", \"borderColor\", \"borderDash\", \"borderDashOffset\", \"borderJoinStyle\", \"borderWidth\"],\n    _dataElementOptions: [\"backgroundColor\", \"borderColor\", \"borderWidth\", \"pointStyle\"],\n    initialize: function initialize(t, e) {\n      var n = this;\n      n.chart = t, n.index = e, n.linkScales(), n.addElements(), n._type = n.getMeta().type;\n    },\n    updateIndex: function updateIndex(t) {\n      this.index = t;\n    },\n    linkScales: function linkScales() {\n      var t = this.getMeta(),\n          e = this.chart,\n          n = e.scales,\n          i = this.getDataset(),\n          a = e.options.scales;\n      null !== t.xAxisID && t.xAxisID in n && !i.xAxisID || (t.xAxisID = i.xAxisID || a.xAxes[0].id), null !== t.yAxisID && t.yAxisID in n && !i.yAxisID || (t.yAxisID = i.yAxisID || a.yAxes[0].id);\n    },\n    getDataset: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    },\n    getMeta: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    },\n    getScaleForId: function getScaleForId(t) {\n      return this.chart.scales[t];\n    },\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().yAxisID;\n    },\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().xAxisID;\n    },\n    _getValueScale: function _getValueScale() {\n      return this.getScaleForId(this._getValueScaleId());\n    },\n    _getIndexScale: function _getIndexScale() {\n      return this.getScaleForId(this._getIndexScaleId());\n    },\n    reset: function reset() {\n      this._update(!0);\n    },\n    destroy: function destroy() {\n      this._data && et(this._data, this);\n    },\n    createMetaDataset: function createMetaDataset() {\n      var t = this.datasetElementType;\n      return t && new t({\n        _chart: this.chart,\n        _datasetIndex: this.index\n      });\n    },\n    createMetaData: function createMetaData(t) {\n      var e = this.dataElementType;\n      return e && new e({\n        _chart: this.chart,\n        _datasetIndex: this.index,\n        _index: t\n      });\n    },\n    addElements: function addElements() {\n      var t,\n          e,\n          n = this.getMeta(),\n          i = this.getDataset().data || [],\n          a = n.data;\n\n      for (t = 0, e = i.length; t < e; ++t) {\n        a[t] = a[t] || this.createMetaData(t);\n      }\n\n      n.dataset = n.dataset || this.createMetaDataset();\n    },\n    addElementAndReset: function addElementAndReset(t) {\n      var e = this.createMetaData(t);\n      this.getMeta().data.splice(t, 0, e), this.updateElement(e, t, !0);\n    },\n    buildOrUpdateElements: function buildOrUpdateElements() {\n      var t,\n          e,\n          n = this,\n          i = n.getDataset(),\n          a = i.data || (i.data = []);\n      n._data !== a && (n._data && et(n._data, n), a && Object.isExtensible(a) && (e = n, (t = a)._chartjs ? t._chartjs.listeners.push(e) : (Object.defineProperty(t, \"_chartjs\", {\n        configurable: !0,\n        enumerable: !1,\n        value: {\n          listeners: [e]\n        }\n      }), tt.forEach(function (e) {\n        var n = \"onData\" + e.charAt(0).toUpperCase() + e.slice(1),\n            i = t[e];\n        Object.defineProperty(t, e, {\n          configurable: !0,\n          enumerable: !1,\n          value: function value() {\n            var e = Array.prototype.slice.call(arguments),\n                a = i.apply(this, e);\n            return H.each(t._chartjs.listeners, function (t) {\n              \"function\" == typeof t[n] && t[n].apply(t, e);\n            }), a;\n          }\n        });\n      }))), n._data = a), n.resyncElements();\n    },\n    _configure: function _configure() {\n      this._config = H.merge(Object.create(null), [this.chart.options.datasets[this._type], this.getDataset()], {\n        merger: function merger(t, e, n) {\n          \"_meta\" !== t && \"data\" !== t && H._merger(t, e, n);\n        }\n      });\n    },\n    _update: function _update(t) {\n      this._configure(), this._cachedDataOpts = null, this.update(t);\n    },\n    update: H.noop,\n    transition: function transition(t) {\n      for (var e = this.getMeta(), n = e.data || [], i = n.length, a = 0; a < i; ++a) {\n        n[a].transition(t);\n      }\n\n      e.dataset && e.dataset.transition(t);\n    },\n    draw: function draw() {\n      var t = this.getMeta(),\n          e = t.data || [],\n          n = e.length,\n          i = 0;\n\n      for (t.dataset && t.dataset.draw(); i < n; ++i) {\n        e[i].draw();\n      }\n    },\n    getStyle: function getStyle(t) {\n      var e,\n          n = this.getMeta(),\n          i = n.dataset;\n      return this._configure(), i && void 0 === t ? e = this._resolveDatasetElementOptions(i || {}) : (t = t || 0, e = this._resolveDataElementOptions(n.data[t] || {}, t)), !1 !== e.fill && null !== e.fill || (e.backgroundColor = e.borderColor), e;\n    },\n    _resolveDatasetElementOptions: function _resolveDatasetElementOptions(t, e) {\n      var n,\n          i,\n          a,\n          r,\n          o = this,\n          s = o.chart,\n          l = o._config,\n          u = t.custom || {},\n          d = s.options.elements[o.datasetElementType.prototype._type] || {},\n          h = o._datasetElementOptions,\n          c = {},\n          f = {\n        chart: s,\n        dataset: o.getDataset(),\n        datasetIndex: o.index,\n        hover: e\n      };\n\n      for (n = 0, i = h.length; n < i; ++n) {\n        a = h[n], r = e ? \"hover\" + a.charAt(0).toUpperCase() + a.slice(1) : a, c[a] = Q([u[r], l[r], d[r]], f);\n      }\n\n      return c;\n    },\n    _resolveDataElementOptions: function _resolveDataElementOptions(t, e) {\n      var n = this,\n          i = t && t.custom,\n          a = n._cachedDataOpts;\n      if (a && !i) return a;\n      var r,\n          o,\n          s,\n          l,\n          u = n.chart,\n          d = n._config,\n          h = u.options.elements[n.dataElementType.prototype._type] || {},\n          c = n._dataElementOptions,\n          f = {},\n          g = {\n        chart: u,\n        dataIndex: e,\n        dataset: n.getDataset(),\n        datasetIndex: n.index\n      },\n          p = {\n        cacheable: !i\n      };\n      if (i = i || {}, H.isArray(c)) for (o = 0, s = c.length; o < s; ++o) {\n        f[l = c[o]] = Q([i[l], d[l], h[l]], g, e, p);\n      } else for (o = 0, s = (r = Object.keys(c)).length; o < s; ++o) {\n        f[l = r[o]] = Q([i[l], d[c[l]], d[l], h[l]], g, e, p);\n      }\n      return p.cacheable && (n._cachedDataOpts = Object.freeze(f)), f;\n    },\n    removeHoverStyle: function removeHoverStyle(t) {\n      H.merge(t._model, t.$previousStyle || {}), delete t.$previousStyle;\n    },\n    setHoverStyle: function setHoverStyle(t) {\n      var e = this.chart.data.datasets[t._datasetIndex],\n          n = t._index,\n          i = t.custom || {},\n          a = t._model,\n          r = H.getHoverColor;\n      t.$previousStyle = {\n        backgroundColor: a.backgroundColor,\n        borderColor: a.borderColor,\n        borderWidth: a.borderWidth\n      }, a.backgroundColor = Q([i.hoverBackgroundColor, e.hoverBackgroundColor, r(a.backgroundColor)], void 0, n), a.borderColor = Q([i.hoverBorderColor, e.hoverBorderColor, r(a.borderColor)], void 0, n), a.borderWidth = Q([i.hoverBorderWidth, e.hoverBorderWidth, a.borderWidth], void 0, n);\n    },\n    _removeDatasetHoverStyle: function _removeDatasetHoverStyle() {\n      var t = this.getMeta().dataset;\n      t && this.removeHoverStyle(t);\n    },\n    _setDatasetHoverStyle: function _setDatasetHoverStyle() {\n      var t,\n          e,\n          n,\n          i,\n          a,\n          r,\n          o = this.getMeta().dataset,\n          s = {};\n\n      if (o) {\n        for (r = o._model, a = this._resolveDatasetElementOptions(o, !0), t = 0, e = (i = Object.keys(a)).length; t < e; ++t) {\n          s[n = i[t]] = r[n], r[n] = a[n];\n        }\n\n        o.$previousStyle = s;\n      }\n    },\n    resyncElements: function resyncElements() {\n      var t = this.getMeta(),\n          e = this.getDataset().data,\n          n = t.data.length,\n          i = e.length;\n      i < n ? t.data.splice(i, n - i) : i > n && this.insertElements(n, i - n);\n    },\n    insertElements: function insertElements(t, e) {\n      for (var n = 0; n < e; ++n) {\n        this.addElementAndReset(t + n);\n      }\n    },\n    onDataPush: function onDataPush() {\n      var t = arguments.length;\n      this.insertElements(this.getDataset().data.length - t, t);\n    },\n    onDataPop: function onDataPop() {\n      this.getMeta().data.pop();\n    },\n    onDataShift: function onDataShift() {\n      this.getMeta().data.shift();\n    },\n    onDataSplice: function onDataSplice(t, e) {\n      this.getMeta().data.splice(t, e), this.insertElements(t, arguments.length - 2);\n    },\n    onDataUnshift: function onDataUnshift() {\n      this.insertElements(0, arguments.length);\n    }\n  }), nt.extend = H.inherits;\n  var it = nt,\n      at = 2 * Math.PI;\n\n  function rt(t, e) {\n    var n = e.startAngle,\n        i = e.endAngle,\n        a = e.pixelMargin,\n        r = a / e.outerRadius,\n        o = e.x,\n        s = e.y;\n    t.beginPath(), t.arc(o, s, e.outerRadius, n - r, i + r), e.innerRadius > a ? (r = a / e.innerRadius, t.arc(o, s, e.innerRadius - a, i + r, n - r, !0)) : t.arc(o, s, a, i + Math.PI / 2, n - Math.PI / 2), t.closePath(), t.clip();\n  }\n\n  function ot(t, e, n) {\n    var i = \"inner\" === e.borderAlign;\n    i ? (t.lineWidth = 2 * e.borderWidth, t.lineJoin = \"round\") : (t.lineWidth = e.borderWidth, t.lineJoin = \"bevel\"), n.fullCircles && function (t, e, n, i) {\n      var a,\n          r = n.endAngle;\n\n      for (i && (n.endAngle = n.startAngle + at, rt(t, n), n.endAngle = r, n.endAngle === n.startAngle && n.fullCircles && (n.endAngle += at, n.fullCircles--)), t.beginPath(), t.arc(n.x, n.y, n.innerRadius, n.startAngle + at, n.startAngle, !0), a = 0; a < n.fullCircles; ++a) {\n        t.stroke();\n      }\n\n      for (t.beginPath(), t.arc(n.x, n.y, e.outerRadius, n.startAngle, n.startAngle + at), a = 0; a < n.fullCircles; ++a) {\n        t.stroke();\n      }\n    }(t, e, n, i), i && rt(t, n), t.beginPath(), t.arc(n.x, n.y, e.outerRadius, n.startAngle, n.endAngle), t.arc(n.x, n.y, n.innerRadius, n.endAngle, n.startAngle, !0), t.closePath(), t.stroke();\n  }\n\n  N._set(\"global\", {\n    elements: {\n      arc: {\n        backgroundColor: N.global.defaultColor,\n        borderColor: \"#fff\",\n        borderWidth: 2,\n        borderAlign: \"center\"\n      }\n    }\n  });\n\n  var st = K.extend({\n    _type: \"arc\",\n    inLabelRange: function inLabelRange(t) {\n      var e = this._view;\n      return !!e && Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hoverRadius, 2);\n    },\n    inRange: function inRange(t, e) {\n      var n = this._view;\n\n      if (n) {\n        for (var i = H.getAngleFromPoint(n, {\n          x: t,\n          y: e\n        }), a = i.angle, r = i.distance, o = n.startAngle, s = n.endAngle; s < o;) {\n          s += at;\n        }\n\n        for (; a > s;) {\n          a -= at;\n        }\n\n        for (; a < o;) {\n          a += at;\n        }\n\n        var l = a >= o && a <= s,\n            u = r >= n.innerRadius && r <= n.outerRadius;\n        return l && u;\n      }\n\n      return !1;\n    },\n    getCenterPoint: function getCenterPoint() {\n      var t = this._view,\n          e = (t.startAngle + t.endAngle) / 2,\n          n = (t.innerRadius + t.outerRadius) / 2;\n      return {\n        x: t.x + Math.cos(e) * n,\n        y: t.y + Math.sin(e) * n\n      };\n    },\n    getArea: function getArea() {\n      var t = this._view;\n      return Math.PI * ((t.endAngle - t.startAngle) / (2 * Math.PI)) * (Math.pow(t.outerRadius, 2) - Math.pow(t.innerRadius, 2));\n    },\n    tooltipPosition: function tooltipPosition() {\n      var t = this._view,\n          e = t.startAngle + (t.endAngle - t.startAngle) / 2,\n          n = (t.outerRadius - t.innerRadius) / 2 + t.innerRadius;\n      return {\n        x: t.x + Math.cos(e) * n,\n        y: t.y + Math.sin(e) * n\n      };\n    },\n    draw: function draw() {\n      var t,\n          e = this._chart.ctx,\n          n = this._view,\n          i = \"inner\" === n.borderAlign ? .33 : 0,\n          a = {\n        x: n.x,\n        y: n.y,\n        innerRadius: n.innerRadius,\n        outerRadius: Math.max(n.outerRadius - i, 0),\n        pixelMargin: i,\n        startAngle: n.startAngle,\n        endAngle: n.endAngle,\n        fullCircles: Math.floor(n.circumference / at)\n      };\n\n      if (e.save(), e.fillStyle = n.backgroundColor, e.strokeStyle = n.borderColor, a.fullCircles) {\n        for (a.endAngle = a.startAngle + at, e.beginPath(), e.arc(a.x, a.y, a.outerRadius, a.startAngle, a.endAngle), e.arc(a.x, a.y, a.innerRadius, a.endAngle, a.startAngle, !0), e.closePath(), t = 0; t < a.fullCircles; ++t) {\n          e.fill();\n        }\n\n        a.endAngle = a.startAngle + n.circumference % at;\n      }\n\n      e.beginPath(), e.arc(a.x, a.y, a.outerRadius, a.startAngle, a.endAngle), e.arc(a.x, a.y, a.innerRadius, a.endAngle, a.startAngle, !0), e.closePath(), e.fill(), n.borderWidth && ot(e, n, a), e.restore();\n    }\n  }),\n      lt = H.valueOrDefault,\n      ut = N.global.defaultColor;\n\n  N._set(\"global\", {\n    elements: {\n      line: {\n        tension: .4,\n        backgroundColor: ut,\n        borderWidth: 3,\n        borderColor: ut,\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: \"miter\",\n        capBezierPoints: !0,\n        fill: !0\n      }\n    }\n  });\n\n  var dt = K.extend({\n    _type: \"line\",\n    draw: function draw() {\n      var t,\n          e,\n          n,\n          i = this,\n          a = i._view,\n          r = i._chart.ctx,\n          o = a.spanGaps,\n          s = i._children.slice(),\n          l = N.global,\n          u = l.elements.line,\n          d = -1,\n          h = i._loop;\n\n      if (s.length) {\n        if (i._loop) {\n          for (t = 0; t < s.length; ++t) {\n            if (e = H.previousItem(s, t), !s[t]._view.skip && e._view.skip) {\n              s = s.slice(t).concat(s.slice(0, t)), h = o;\n              break;\n            }\n          }\n\n          h && s.push(s[0]);\n        }\n\n        for (r.save(), r.lineCap = a.borderCapStyle || u.borderCapStyle, r.setLineDash && r.setLineDash(a.borderDash || u.borderDash), r.lineDashOffset = lt(a.borderDashOffset, u.borderDashOffset), r.lineJoin = a.borderJoinStyle || u.borderJoinStyle, r.lineWidth = lt(a.borderWidth, u.borderWidth), r.strokeStyle = a.borderColor || l.defaultColor, r.beginPath(), (n = s[0]._view).skip || (r.moveTo(n.x, n.y), d = 0), t = 1; t < s.length; ++t) {\n          n = s[t]._view, e = -1 === d ? H.previousItem(s, t) : s[d], n.skip || (d !== t - 1 && !o || -1 === d ? r.moveTo(n.x, n.y) : H.canvas.lineTo(r, e._view, n), d = t);\n        }\n\n        h && r.closePath(), r.stroke(), r.restore();\n      }\n    }\n  }),\n      ht = H.valueOrDefault,\n      ct = N.global.defaultColor;\n\n  function ft(t) {\n    var e = this._view;\n    return !!e && Math.abs(t - e.x) < e.radius + e.hitRadius;\n  }\n\n  N._set(\"global\", {\n    elements: {\n      point: {\n        radius: 3,\n        pointStyle: \"circle\",\n        backgroundColor: ct,\n        borderColor: ct,\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverRadius: 4,\n        hoverBorderWidth: 1\n      }\n    }\n  });\n\n  var gt = K.extend({\n    _type: \"point\",\n    inRange: function inRange(t, e) {\n      var n = this._view;\n      return !!n && Math.pow(t - n.x, 2) + Math.pow(e - n.y, 2) < Math.pow(n.hitRadius + n.radius, 2);\n    },\n    inLabelRange: ft,\n    inXRange: ft,\n    inYRange: function inYRange(t) {\n      var e = this._view;\n      return !!e && Math.abs(t - e.y) < e.radius + e.hitRadius;\n    },\n    getCenterPoint: function getCenterPoint() {\n      var t = this._view;\n      return {\n        x: t.x,\n        y: t.y\n      };\n    },\n    getArea: function getArea() {\n      return Math.PI * Math.pow(this._view.radius, 2);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var t = this._view;\n      return {\n        x: t.x,\n        y: t.y,\n        padding: t.radius + t.borderWidth\n      };\n    },\n    draw: function draw(t) {\n      var e = this._view,\n          n = this._chart.ctx,\n          i = e.pointStyle,\n          a = e.rotation,\n          r = e.radius,\n          o = e.x,\n          s = e.y,\n          l = N.global,\n          u = l.defaultColor;\n      e.skip || (void 0 === t || H.canvas._isPointInArea(e, t)) && (n.strokeStyle = e.borderColor || u, n.lineWidth = ht(e.borderWidth, l.elements.point.borderWidth), n.fillStyle = e.backgroundColor || u, H.canvas.drawPoint(n, i, r, o, s, a));\n    }\n  }),\n      pt = N.global.defaultColor;\n\n  function mt(t) {\n    return t && void 0 !== t.width;\n  }\n\n  function vt(t) {\n    var e, n, i, a, r;\n    return mt(t) ? (r = t.width / 2, e = t.x - r, n = t.x + r, i = Math.min(t.y, t.base), a = Math.max(t.y, t.base)) : (r = t.height / 2, e = Math.min(t.x, t.base), n = Math.max(t.x, t.base), i = t.y - r, a = t.y + r), {\n      left: e,\n      top: i,\n      right: n,\n      bottom: a\n    };\n  }\n\n  function bt(t, e, n) {\n    return t === e ? n : t === n ? e : t;\n  }\n\n  function xt(t, e, n) {\n    var i,\n        a,\n        r,\n        o,\n        s = t.borderWidth,\n        l = function (t) {\n      var e = t.borderSkipped,\n          n = {};\n      return e ? (t.horizontal ? t.base > t.x && (e = bt(e, \"left\", \"right\")) : t.base < t.y && (e = bt(e, \"bottom\", \"top\")), n[e] = !0, n) : n;\n    }(t);\n\n    return H.isObject(s) ? (i = +s.top || 0, a = +s.right || 0, r = +s.bottom || 0, o = +s.left || 0) : i = a = r = o = +s || 0, {\n      t: l.top || i < 0 ? 0 : i > n ? n : i,\n      r: l.right || a < 0 ? 0 : a > e ? e : a,\n      b: l.bottom || r < 0 ? 0 : r > n ? n : r,\n      l: l.left || o < 0 ? 0 : o > e ? e : o\n    };\n  }\n\n  function yt(t, e, n) {\n    var i = null === e,\n        a = null === n,\n        r = !(!t || i && a) && vt(t);\n    return r && (i || e >= r.left && e <= r.right) && (a || n >= r.top && n <= r.bottom);\n  }\n\n  N._set(\"global\", {\n    elements: {\n      rectangle: {\n        backgroundColor: pt,\n        borderColor: pt,\n        borderSkipped: \"bottom\",\n        borderWidth: 0\n      }\n    }\n  });\n\n  var _t = K.extend({\n    _type: \"rectangle\",\n    draw: function draw() {\n      var t = this._chart.ctx,\n          e = this._view,\n          n = function (t) {\n        var e = vt(t),\n            n = e.right - e.left,\n            i = e.bottom - e.top,\n            a = xt(t, n / 2, i / 2);\n        return {\n          outer: {\n            x: e.left,\n            y: e.top,\n            w: n,\n            h: i\n          },\n          inner: {\n            x: e.left + a.l,\n            y: e.top + a.t,\n            w: n - a.l - a.r,\n            h: i - a.t - a.b\n          }\n        };\n      }(e),\n          i = n.outer,\n          a = n.inner;\n\n      t.fillStyle = e.backgroundColor, t.fillRect(i.x, i.y, i.w, i.h), i.w === a.w && i.h === a.h || (t.save(), t.beginPath(), t.rect(i.x, i.y, i.w, i.h), t.clip(), t.fillStyle = e.borderColor, t.rect(a.x, a.y, a.w, a.h), t.fill(\"evenodd\"), t.restore());\n    },\n    height: function height() {\n      var t = this._view;\n      return t.base - t.y;\n    },\n    inRange: function inRange(t, e) {\n      return yt(this._view, t, e);\n    },\n    inLabelRange: function inLabelRange(t, e) {\n      var n = this._view;\n      return mt(n) ? yt(n, t, null) : yt(n, null, e);\n    },\n    inXRange: function inXRange(t) {\n      return yt(this._view, t, null);\n    },\n    inYRange: function inYRange(t) {\n      return yt(this._view, null, t);\n    },\n    getCenterPoint: function getCenterPoint() {\n      var t,\n          e,\n          n = this._view;\n      return mt(n) ? (t = n.x, e = (n.y + n.base) / 2) : (t = (n.x + n.base) / 2, e = n.y), {\n        x: t,\n        y: e\n      };\n    },\n    getArea: function getArea() {\n      var t = this._view;\n      return mt(t) ? t.width * Math.abs(t.y - t.base) : t.height * Math.abs(t.x - t.base);\n    },\n    tooltipPosition: function tooltipPosition() {\n      var t = this._view;\n      return {\n        x: t.x,\n        y: t.y\n      };\n    }\n  }),\n      kt = {},\n      wt = st,\n      Mt = dt,\n      St = gt,\n      Ct = _t;\n\n  kt.Arc = wt, kt.Line = Mt, kt.Point = St, kt.Rectangle = Ct;\n  var Pt = H._deprecated,\n      At = H.valueOrDefault;\n\n  function Dt(t, e, n) {\n    var i,\n        a,\n        r = n.barThickness,\n        o = e.stackCount,\n        s = e.pixels[t],\n        l = H.isNullOrUndef(r) ? function (t, e) {\n      var n,\n          i,\n          a,\n          r,\n          o = t._length;\n\n      for (a = 1, r = e.length; a < r; ++a) {\n        o = Math.min(o, Math.abs(e[a] - e[a - 1]));\n      }\n\n      for (a = 0, r = t.getTicks().length; a < r; ++a) {\n        i = t.getPixelForTick(a), o = a > 0 ? Math.min(o, Math.abs(i - n)) : o, n = i;\n      }\n\n      return o;\n    }(e.scale, e.pixels) : -1;\n    return H.isNullOrUndef(r) ? (i = l * n.categoryPercentage, a = n.barPercentage) : (i = r * o, a = 1), {\n      chunk: i / o,\n      ratio: a,\n      start: s - i / 2\n    };\n  }\n\n  N._set(\"bar\", {\n    hover: {\n      mode: \"label\"\n    },\n    scales: {\n      xAxes: [{\n        type: \"category\",\n        offset: !0,\n        gridLines: {\n          offsetGridLines: !0\n        }\n      }],\n      yAxes: [{\n        type: \"linear\"\n      }]\n    }\n  }), N._set(\"global\", {\n    datasets: {\n      bar: {\n        categoryPercentage: .8,\n        barPercentage: .9\n      }\n    }\n  });\n  var Tt = it.extend({\n    dataElementType: kt.Rectangle,\n    _dataElementOptions: [\"backgroundColor\", \"borderColor\", \"borderSkipped\", \"borderWidth\", \"barPercentage\", \"barThickness\", \"categoryPercentage\", \"maxBarThickness\", \"minBarLength\"],\n    initialize: function initialize() {\n      var t,\n          e,\n          n = this;\n      it.prototype.initialize.apply(n, arguments), (t = n.getMeta()).stack = n.getDataset().stack, t.bar = !0, e = n._getIndexScale().options, Pt(\"bar chart\", e.barPercentage, \"scales.[x/y]Axes.barPercentage\", \"dataset.barPercentage\"), Pt(\"bar chart\", e.barThickness, \"scales.[x/y]Axes.barThickness\", \"dataset.barThickness\"), Pt(\"bar chart\", e.categoryPercentage, \"scales.[x/y]Axes.categoryPercentage\", \"dataset.categoryPercentage\"), Pt(\"bar chart\", n._getValueScale().options.minBarLength, \"scales.[x/y]Axes.minBarLength\", \"dataset.minBarLength\"), Pt(\"bar chart\", e.maxBarThickness, \"scales.[x/y]Axes.maxBarThickness\", \"dataset.maxBarThickness\");\n    },\n    update: function update(t) {\n      var e,\n          n,\n          i = this.getMeta().data;\n\n      for (this._ruler = this.getRuler(), e = 0, n = i.length; e < n; ++e) {\n        this.updateElement(i[e], e, t);\n      }\n    },\n    updateElement: function updateElement(t, e, n) {\n      var i = this,\n          a = i.getMeta(),\n          r = i.getDataset(),\n          o = i._resolveDataElementOptions(t, e);\n\n      t._xScale = i.getScaleForId(a.xAxisID), t._yScale = i.getScaleForId(a.yAxisID), t._datasetIndex = i.index, t._index = e, t._model = {\n        backgroundColor: o.backgroundColor,\n        borderColor: o.borderColor,\n        borderSkipped: o.borderSkipped,\n        borderWidth: o.borderWidth,\n        datasetLabel: r.label,\n        label: i.chart.data.labels[e]\n      }, H.isArray(r.data[e]) && (t._model.borderSkipped = null), i._updateElementGeometry(t, e, n, o), t.pivot();\n    },\n    _updateElementGeometry: function _updateElementGeometry(t, e, n, i) {\n      var a = this,\n          r = t._model,\n          o = a._getValueScale(),\n          s = o.getBasePixel(),\n          l = o.isHorizontal(),\n          u = a._ruler || a.getRuler(),\n          d = a.calculateBarValuePixels(a.index, e, i),\n          h = a.calculateBarIndexPixels(a.index, e, u, i);\n\n      r.horizontal = l, r.base = n ? s : d.base, r.x = l ? n ? s : d.head : h.center, r.y = l ? h.center : n ? s : d.head, r.height = l ? h.size : void 0, r.width = l ? void 0 : h.size;\n    },\n    _getStacks: function _getStacks(t) {\n      var e,\n          n,\n          i = this._getIndexScale(),\n          a = i._getMatchingVisibleMetas(this._type),\n          r = i.options.stacked,\n          o = a.length,\n          s = [];\n\n      for (e = 0; e < o && (n = a[e], (!1 === r || -1 === s.indexOf(n.stack) || void 0 === r && void 0 === n.stack) && s.push(n.stack), n.index !== t); ++e) {\n        ;\n      }\n\n      return s;\n    },\n    getStackCount: function getStackCount() {\n      return this._getStacks().length;\n    },\n    getStackIndex: function getStackIndex(t, e) {\n      var n = this._getStacks(t),\n          i = void 0 !== e ? n.indexOf(e) : -1;\n\n      return -1 === i ? n.length - 1 : i;\n    },\n    getRuler: function getRuler() {\n      var t,\n          e,\n          n = this._getIndexScale(),\n          i = [];\n\n      for (t = 0, e = this.getMeta().data.length; t < e; ++t) {\n        i.push(n.getPixelForValue(null, t, this.index));\n      }\n\n      return {\n        pixels: i,\n        start: n._startPixel,\n        end: n._endPixel,\n        stackCount: this.getStackCount(),\n        scale: n\n      };\n    },\n    calculateBarValuePixels: function calculateBarValuePixels(t, e, n) {\n      var i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u,\n          d = this.chart,\n          h = this._getValueScale(),\n          c = h.isHorizontal(),\n          f = d.data.datasets,\n          g = h._getMatchingVisibleMetas(this._type),\n          p = h._parseValue(f[t].data[e]),\n          m = n.minBarLength,\n          v = h.options.stacked,\n          b = this.getMeta().stack,\n          x = void 0 === p.start ? 0 : p.max >= 0 && p.min >= 0 ? p.min : p.max,\n          y = void 0 === p.start ? p.end : p.max >= 0 && p.min >= 0 ? p.max - p.min : p.min - p.max,\n          _ = g.length;\n\n      if (v || void 0 === v && void 0 !== b) for (i = 0; i < _ && (a = g[i]).index !== t; ++i) {\n        a.stack === b && (r = void 0 === (u = h._parseValue(f[a.index].data[e])).start ? u.end : u.min >= 0 && u.max >= 0 ? u.max : u.min, (p.min < 0 && r < 0 || p.max >= 0 && r > 0) && (x += r));\n      }\n      return o = h.getPixelForValue(x), l = (s = h.getPixelForValue(x + y)) - o, void 0 !== m && Math.abs(l) < m && (l = m, s = y >= 0 && !c || y < 0 && c ? o - m : o + m), {\n        size: l,\n        base: o,\n        head: s,\n        center: s + l / 2\n      };\n    },\n    calculateBarIndexPixels: function calculateBarIndexPixels(t, e, n, i) {\n      var a = \"flex\" === i.barThickness ? function (t, e, n) {\n        var i,\n            a = e.pixels,\n            r = a[t],\n            o = t > 0 ? a[t - 1] : null,\n            s = t < a.length - 1 ? a[t + 1] : null,\n            l = n.categoryPercentage;\n        return null === o && (o = r - (null === s ? e.end - e.start : s - r)), null === s && (s = r + r - o), i = r - (r - Math.min(o, s)) / 2 * l, {\n          chunk: Math.abs(s - o) / 2 * l / e.stackCount,\n          ratio: n.barPercentage,\n          start: i\n        };\n      }(e, n, i) : Dt(e, n, i),\n          r = this.getStackIndex(t, this.getMeta().stack),\n          o = a.start + a.chunk * r + a.chunk / 2,\n          s = Math.min(At(i.maxBarThickness, 1 / 0), a.chunk * a.ratio);\n      return {\n        base: o - s / 2,\n        head: o + s / 2,\n        center: o,\n        size: s\n      };\n    },\n    draw: function draw() {\n      var t = this.chart,\n          e = this._getValueScale(),\n          n = this.getMeta().data,\n          i = this.getDataset(),\n          a = n.length,\n          r = 0;\n\n      for (H.canvas.clipArea(t.ctx, t.chartArea); r < a; ++r) {\n        var o = e._parseValue(i.data[r]);\n\n        isNaN(o.min) || isNaN(o.max) || n[r].draw();\n      }\n\n      H.canvas.unclipArea(t.ctx);\n    },\n    _resolveDataElementOptions: function _resolveDataElementOptions() {\n      var t = this,\n          e = H.extend({}, it.prototype._resolveDataElementOptions.apply(t, arguments)),\n          n = t._getIndexScale().options,\n          i = t._getValueScale().options;\n\n      return e.barPercentage = At(n.barPercentage, e.barPercentage), e.barThickness = At(n.barThickness, e.barThickness), e.categoryPercentage = At(n.categoryPercentage, e.categoryPercentage), e.maxBarThickness = At(n.maxBarThickness, e.maxBarThickness), e.minBarLength = At(i.minBarLength, e.minBarLength), e;\n    }\n  }),\n      It = H.valueOrDefault,\n      Ft = H.options.resolve;\n\n  N._set(\"bubble\", {\n    hover: {\n      mode: \"single\"\n    },\n    scales: {\n      xAxes: [{\n        type: \"linear\",\n        position: \"bottom\",\n        id: \"x-axis-0\"\n      }],\n      yAxes: [{\n        type: \"linear\",\n        position: \"left\",\n        id: \"y-axis-0\"\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return \"\";\n        },\n        label: function label(t, e) {\n          var n = e.datasets[t.datasetIndex].label || \"\",\n              i = e.datasets[t.datasetIndex].data[t.index];\n          return n + \": (\" + t.xLabel + \", \" + t.yLabel + \", \" + i.r + \")\";\n        }\n      }\n    }\n  });\n\n  var Ot = it.extend({\n    dataElementType: kt.Point,\n    _dataElementOptions: [\"backgroundColor\", \"borderColor\", \"borderWidth\", \"hoverBackgroundColor\", \"hoverBorderColor\", \"hoverBorderWidth\", \"hoverRadius\", \"hitRadius\", \"pointStyle\", \"rotation\"],\n    update: function update(t) {\n      var e = this,\n          n = e.getMeta().data;\n      H.each(n, function (n, i) {\n        e.updateElement(n, i, t);\n      });\n    },\n    updateElement: function updateElement(t, e, n) {\n      var i = this,\n          a = i.getMeta(),\n          r = t.custom || {},\n          o = i.getScaleForId(a.xAxisID),\n          s = i.getScaleForId(a.yAxisID),\n          l = i._resolveDataElementOptions(t, e),\n          u = i.getDataset().data[e],\n          d = i.index,\n          h = n ? o.getPixelForDecimal(.5) : o.getPixelForValue(\"object\" == _typeof(u) ? u : NaN, e, d),\n          c = n ? s.getBasePixel() : s.getPixelForValue(u, e, d);\n\n      t._xScale = o, t._yScale = s, t._options = l, t._datasetIndex = d, t._index = e, t._model = {\n        backgroundColor: l.backgroundColor,\n        borderColor: l.borderColor,\n        borderWidth: l.borderWidth,\n        hitRadius: l.hitRadius,\n        pointStyle: l.pointStyle,\n        rotation: l.rotation,\n        radius: n ? 0 : l.radius,\n        skip: r.skip || isNaN(h) || isNaN(c),\n        x: h,\n        y: c\n      }, t.pivot();\n    },\n    setHoverStyle: function setHoverStyle(t) {\n      var e = t._model,\n          n = t._options,\n          i = H.getHoverColor;\n      t.$previousStyle = {\n        backgroundColor: e.backgroundColor,\n        borderColor: e.borderColor,\n        borderWidth: e.borderWidth,\n        radius: e.radius\n      }, e.backgroundColor = It(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = It(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = It(n.hoverBorderWidth, n.borderWidth), e.radius = n.radius + n.hoverRadius;\n    },\n    _resolveDataElementOptions: function _resolveDataElementOptions(t, e) {\n      var n = this,\n          i = n.chart,\n          a = n.getDataset(),\n          r = t.custom || {},\n          o = a.data[e] || {},\n          s = it.prototype._resolveDataElementOptions.apply(n, arguments),\n          l = {\n        chart: i,\n        dataIndex: e,\n        dataset: a,\n        datasetIndex: n.index\n      };\n\n      return n._cachedDataOpts === s && (s = H.extend({}, s)), s.radius = Ft([r.radius, o.r, n._config.radius, i.options.elements.point.radius], l, e), s;\n    }\n  }),\n      Lt = H.valueOrDefault,\n      Rt = Math.PI,\n      zt = 2 * Rt,\n      Nt = Rt / 2;\n\n  N._set(\"doughnut\", {\n    animation: {\n      animateRotate: !0,\n      animateScale: !1\n    },\n    hover: {\n      mode: \"single\"\n    },\n    legendCallback: function legendCallback(t) {\n      var e,\n          n,\n          i,\n          a = document.createElement(\"ul\"),\n          r = t.data,\n          o = r.datasets,\n          s = r.labels;\n      if (a.setAttribute(\"class\", t.id + \"-legend\"), o.length) for (e = 0, n = o[0].data.length; e < n; ++e) {\n        (i = a.appendChild(document.createElement(\"li\"))).appendChild(document.createElement(\"span\")).style.backgroundColor = o[0].backgroundColor[e], s[e] && i.appendChild(document.createTextNode(s[e]));\n      }\n      return a.outerHTML;\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(t) {\n          var e = t.data;\n          return e.labels.length && e.datasets.length ? e.labels.map(function (n, i) {\n            var a = t.getDatasetMeta(0),\n                r = a.controller.getStyle(i);\n            return {\n              text: n,\n              fillStyle: r.backgroundColor,\n              strokeStyle: r.borderColor,\n              lineWidth: r.borderWidth,\n              hidden: isNaN(e.datasets[0].data[i]) || a.data[i].hidden,\n              index: i\n            };\n          }) : [];\n        }\n      },\n      onClick: function onClick(t, e) {\n        var n,\n            i,\n            a,\n            r = e.index,\n            o = this.chart;\n\n        for (n = 0, i = (o.data.datasets || []).length; n < i; ++n) {\n          (a = o.getDatasetMeta(n)).data[r] && (a.data[r].hidden = !a.data[r].hidden);\n        }\n\n        o.update();\n      }\n    },\n    cutoutPercentage: 50,\n    rotation: -Nt,\n    circumference: zt,\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return \"\";\n        },\n        label: function label(t, e) {\n          var n = e.labels[t.index],\n              i = \": \" + e.datasets[t.datasetIndex].data[t.index];\n          return H.isArray(n) ? (n = n.slice())[0] += i : n += i, n;\n        }\n      }\n    }\n  });\n\n  var Bt = it.extend({\n    dataElementType: kt.Arc,\n    linkScales: H.noop,\n    _dataElementOptions: [\"backgroundColor\", \"borderColor\", \"borderWidth\", \"borderAlign\", \"hoverBackgroundColor\", \"hoverBorderColor\", \"hoverBorderWidth\"],\n    getRingIndex: function getRingIndex(t) {\n      for (var e = 0, n = 0; n < t; ++n) {\n        this.chart.isDatasetVisible(n) && ++e;\n      }\n\n      return e;\n    },\n    update: function update(t) {\n      var e,\n          n,\n          i,\n          a,\n          r = this,\n          o = r.chart,\n          s = o.chartArea,\n          l = o.options,\n          u = 1,\n          d = 1,\n          h = 0,\n          c = 0,\n          f = r.getMeta(),\n          g = f.data,\n          p = l.cutoutPercentage / 100 || 0,\n          m = l.circumference,\n          v = r._getRingWeight(r.index);\n\n      if (m < zt) {\n        var b = l.rotation % zt,\n            x = (b += b >= Rt ? -zt : b < -Rt ? zt : 0) + m,\n            y = Math.cos(b),\n            _ = Math.sin(b),\n            k = Math.cos(x),\n            w = Math.sin(x),\n            M = b <= 0 && x >= 0 || x >= zt,\n            S = b <= Nt && x >= Nt || x >= zt + Nt,\n            C = b <= -Nt && x >= -Nt || x >= Rt + Nt,\n            P = b === -Rt || x >= Rt ? -1 : Math.min(y, y * p, k, k * p),\n            A = C ? -1 : Math.min(_, _ * p, w, w * p),\n            D = M ? 1 : Math.max(y, y * p, k, k * p),\n            T = S ? 1 : Math.max(_, _ * p, w, w * p);\n\n        u = (D - P) / 2, d = (T - A) / 2, h = -(D + P) / 2, c = -(T + A) / 2;\n      }\n\n      for (i = 0, a = g.length; i < a; ++i) {\n        g[i]._options = r._resolveDataElementOptions(g[i], i);\n      }\n\n      for (o.borderWidth = r.getMaxBorderWidth(), e = (s.right - s.left - o.borderWidth) / u, n = (s.bottom - s.top - o.borderWidth) / d, o.outerRadius = Math.max(Math.min(e, n) / 2, 0), o.innerRadius = Math.max(o.outerRadius * p, 0), o.radiusLength = (o.outerRadius - o.innerRadius) / (r._getVisibleDatasetWeightTotal() || 1), o.offsetX = h * o.outerRadius, o.offsetY = c * o.outerRadius, f.total = r.calculateTotal(), r.outerRadius = o.outerRadius - o.radiusLength * r._getRingWeightOffset(r.index), r.innerRadius = Math.max(r.outerRadius - o.radiusLength * v, 0), i = 0, a = g.length; i < a; ++i) {\n        r.updateElement(g[i], i, t);\n      }\n    },\n    updateElement: function updateElement(t, e, n) {\n      var i = this,\n          a = i.chart,\n          r = a.chartArea,\n          o = a.options,\n          s = o.animation,\n          l = (r.left + r.right) / 2,\n          u = (r.top + r.bottom) / 2,\n          d = o.rotation,\n          h = o.rotation,\n          c = i.getDataset(),\n          f = n && s.animateRotate ? 0 : t.hidden ? 0 : i.calculateCircumference(c.data[e]) * (o.circumference / zt),\n          g = n && s.animateScale ? 0 : i.innerRadius,\n          p = n && s.animateScale ? 0 : i.outerRadius,\n          m = t._options || {};\n      H.extend(t, {\n        _datasetIndex: i.index,\n        _index: e,\n        _model: {\n          backgroundColor: m.backgroundColor,\n          borderColor: m.borderColor,\n          borderWidth: m.borderWidth,\n          borderAlign: m.borderAlign,\n          x: l + a.offsetX,\n          y: u + a.offsetY,\n          startAngle: d,\n          endAngle: h,\n          circumference: f,\n          outerRadius: p,\n          innerRadius: g,\n          label: H.valueAtIndexOrDefault(c.label, e, a.data.labels[e])\n        }\n      });\n      var v = t._model;\n      n && s.animateRotate || (v.startAngle = 0 === e ? o.rotation : i.getMeta().data[e - 1]._model.endAngle, v.endAngle = v.startAngle + v.circumference), t.pivot();\n    },\n    calculateTotal: function calculateTotal() {\n      var t,\n          e = this.getDataset(),\n          n = this.getMeta(),\n          i = 0;\n      return H.each(n.data, function (n, a) {\n        t = e.data[a], isNaN(t) || n.hidden || (i += Math.abs(t));\n      }), i;\n    },\n    calculateCircumference: function calculateCircumference(t) {\n      var e = this.getMeta().total;\n      return e > 0 && !isNaN(t) ? zt * (Math.abs(t) / e) : 0;\n    },\n    getMaxBorderWidth: function getMaxBorderWidth(t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u = 0,\n          d = this.chart;\n      if (!t) for (e = 0, n = d.data.datasets.length; e < n; ++e) {\n        if (d.isDatasetVisible(e)) {\n          t = (i = d.getDatasetMeta(e)).data, e !== this.index && (r = i.controller);\n          break;\n        }\n      }\n      if (!t) return 0;\n\n      for (e = 0, n = t.length; e < n; ++e) {\n        a = t[e], r ? (r._configure(), o = r._resolveDataElementOptions(a, e)) : o = a._options, \"inner\" !== o.borderAlign && (s = o.borderWidth, u = (l = o.hoverBorderWidth) > (u = s > u ? s : u) ? l : u);\n      }\n\n      return u;\n    },\n    setHoverStyle: function setHoverStyle(t) {\n      var e = t._model,\n          n = t._options,\n          i = H.getHoverColor;\n      t.$previousStyle = {\n        backgroundColor: e.backgroundColor,\n        borderColor: e.borderColor,\n        borderWidth: e.borderWidth\n      }, e.backgroundColor = Lt(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = Lt(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = Lt(n.hoverBorderWidth, n.borderWidth);\n    },\n    _getRingWeightOffset: function _getRingWeightOffset(t) {\n      for (var e = 0, n = 0; n < t; ++n) {\n        this.chart.isDatasetVisible(n) && (e += this._getRingWeight(n));\n      }\n\n      return e;\n    },\n    _getRingWeight: function _getRingWeight(t) {\n      return Math.max(Lt(this.chart.data.datasets[t].weight, 1), 0);\n    },\n    _getVisibleDatasetWeightTotal: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length);\n    }\n  });\n  N._set(\"horizontalBar\", {\n    hover: {\n      mode: \"index\",\n      axis: \"y\"\n    },\n    scales: {\n      xAxes: [{\n        type: \"linear\",\n        position: \"bottom\"\n      }],\n      yAxes: [{\n        type: \"category\",\n        position: \"left\",\n        offset: !0,\n        gridLines: {\n          offsetGridLines: !0\n        }\n      }]\n    },\n    elements: {\n      rectangle: {\n        borderSkipped: \"left\"\n      }\n    },\n    tooltips: {\n      mode: \"index\",\n      axis: \"y\"\n    }\n  }), N._set(\"global\", {\n    datasets: {\n      horizontalBar: {\n        categoryPercentage: .8,\n        barPercentage: .9\n      }\n    }\n  });\n  var Et = Tt.extend({\n    _getValueScaleId: function _getValueScaleId() {\n      return this.getMeta().xAxisID;\n    },\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.getMeta().yAxisID;\n    }\n  }),\n      Wt = H.valueOrDefault,\n      Vt = H.options.resolve,\n      Ht = H.canvas._isPointInArea;\n\n  function jt(t, e) {\n    var n = t && t.options.ticks || {},\n        i = n.reverse,\n        a = void 0 === n.min ? e : 0,\n        r = void 0 === n.max ? e : 0;\n    return {\n      start: i ? r : a,\n      end: i ? a : r\n    };\n  }\n\n  function qt(t, e, n) {\n    var i = n / 2,\n        a = jt(t, i),\n        r = jt(e, i);\n    return {\n      top: r.end,\n      right: a.end,\n      bottom: r.start,\n      left: a.start\n    };\n  }\n\n  function Ut(t) {\n    var e, n, i, a;\n    return H.isObject(t) ? (e = t.top, n = t.right, i = t.bottom, a = t.left) : e = n = i = a = t, {\n      top: e,\n      right: n,\n      bottom: i,\n      left: a\n    };\n  }\n\n  N._set(\"line\", {\n    showLines: !0,\n    spanGaps: !1,\n    hover: {\n      mode: \"label\"\n    },\n    scales: {\n      xAxes: [{\n        type: \"category\",\n        id: \"x-axis-0\"\n      }],\n      yAxes: [{\n        type: \"linear\",\n        id: \"y-axis-0\"\n      }]\n    }\n  });\n\n  var Yt = it.extend({\n    datasetElementType: kt.Line,\n    dataElementType: kt.Point,\n    _datasetElementOptions: [\"backgroundColor\", \"borderCapStyle\", \"borderColor\", \"borderDash\", \"borderDashOffset\", \"borderJoinStyle\", \"borderWidth\", \"cubicInterpolationMode\", \"fill\"],\n    _dataElementOptions: {\n      backgroundColor: \"pointBackgroundColor\",\n      borderColor: \"pointBorderColor\",\n      borderWidth: \"pointBorderWidth\",\n      hitRadius: \"pointHitRadius\",\n      hoverBackgroundColor: \"pointHoverBackgroundColor\",\n      hoverBorderColor: \"pointHoverBorderColor\",\n      hoverBorderWidth: \"pointHoverBorderWidth\",\n      hoverRadius: \"pointHoverRadius\",\n      pointStyle: \"pointStyle\",\n      radius: \"pointRadius\",\n      rotation: \"pointRotation\"\n    },\n    update: function update(t) {\n      var e,\n          n,\n          i = this,\n          a = i.getMeta(),\n          r = a.dataset,\n          o = a.data || [],\n          s = i.chart.options,\n          l = i._config,\n          u = i._showLine = Wt(l.showLine, s.showLines);\n\n      for (i._xScale = i.getScaleForId(a.xAxisID), i._yScale = i.getScaleForId(a.yAxisID), u && (void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), r._scale = i._yScale, r._datasetIndex = i.index, r._children = o, r._model = i._resolveDatasetElementOptions(r), r.pivot()), e = 0, n = o.length; e < n; ++e) {\n        i.updateElement(o[e], e, t);\n      }\n\n      for (u && 0 !== r._model.tension && i.updateBezierControlPoints(), e = 0, n = o.length; e < n; ++e) {\n        o[e].pivot();\n      }\n    },\n    updateElement: function updateElement(t, e, n) {\n      var i,\n          a,\n          r = this,\n          o = r.getMeta(),\n          s = t.custom || {},\n          l = r.getDataset(),\n          u = r.index,\n          d = l.data[e],\n          h = r._xScale,\n          c = r._yScale,\n          f = o.dataset._model,\n          g = r._resolveDataElementOptions(t, e);\n\n      i = h.getPixelForValue(\"object\" == _typeof(d) ? d : NaN, e, u), a = n ? c.getBasePixel() : r.calculatePointY(d, e, u), t._xScale = h, t._yScale = c, t._options = g, t._datasetIndex = u, t._index = e, t._model = {\n        x: i,\n        y: a,\n        skip: s.skip || isNaN(i) || isNaN(a),\n        radius: g.radius,\n        pointStyle: g.pointStyle,\n        rotation: g.rotation,\n        backgroundColor: g.backgroundColor,\n        borderColor: g.borderColor,\n        borderWidth: g.borderWidth,\n        tension: Wt(s.tension, f ? f.tension : 0),\n        steppedLine: !!f && f.steppedLine,\n        hitRadius: g.hitRadius\n      };\n    },\n    _resolveDatasetElementOptions: function _resolveDatasetElementOptions(t) {\n      var e = this,\n          n = e._config,\n          i = t.custom || {},\n          a = e.chart.options,\n          r = a.elements.line,\n          o = it.prototype._resolveDatasetElementOptions.apply(e, arguments);\n\n      return o.spanGaps = Wt(n.spanGaps, a.spanGaps), o.tension = Wt(n.lineTension, r.tension), o.steppedLine = Vt([i.steppedLine, n.steppedLine, r.stepped]), o.clip = Ut(Wt(n.clip, qt(e._xScale, e._yScale, o.borderWidth))), o;\n    },\n    calculatePointY: function calculatePointY(t, e, n) {\n      var i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u,\n          d = this.chart,\n          h = this._yScale,\n          c = 0,\n          f = 0;\n\n      if (h.options.stacked) {\n        for (s = +h.getRightValue(t), u = (l = d._getSortedVisibleDatasetMetas()).length, i = 0; i < u && (r = l[i]).index !== n; ++i) {\n          a = d.data.datasets[r.index], \"line\" === r.type && r.yAxisID === h.id && ((o = +h.getRightValue(a.data[e])) < 0 ? f += o || 0 : c += o || 0);\n        }\n\n        return s < 0 ? h.getPixelForValue(f + s) : h.getPixelForValue(c + s);\n      }\n\n      return h.getPixelForValue(t);\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var t,\n          e,\n          n,\n          i,\n          a = this.chart,\n          r = this.getMeta(),\n          o = r.dataset._model,\n          s = a.chartArea,\n          l = r.data || [];\n\n      function u(t, e, n) {\n        return Math.max(Math.min(t, n), e);\n      }\n\n      if (o.spanGaps && (l = l.filter(function (t) {\n        return !t._model.skip;\n      })), \"monotone\" === o.cubicInterpolationMode) H.splineCurveMonotone(l);else for (t = 0, e = l.length; t < e; ++t) {\n        n = l[t]._model, i = H.splineCurve(H.previousItem(l, t)._model, n, H.nextItem(l, t)._model, o.tension), n.controlPointPreviousX = i.previous.x, n.controlPointPreviousY = i.previous.y, n.controlPointNextX = i.next.x, n.controlPointNextY = i.next.y;\n      }\n      if (a.options.elements.line.capBezierPoints) for (t = 0, e = l.length; t < e; ++t) {\n        n = l[t]._model, Ht(n, s) && (t > 0 && Ht(l[t - 1]._model, s) && (n.controlPointPreviousX = u(n.controlPointPreviousX, s.left, s.right), n.controlPointPreviousY = u(n.controlPointPreviousY, s.top, s.bottom)), t < l.length - 1 && Ht(l[t + 1]._model, s) && (n.controlPointNextX = u(n.controlPointNextX, s.left, s.right), n.controlPointNextY = u(n.controlPointNextY, s.top, s.bottom)));\n      }\n    },\n    draw: function draw() {\n      var t,\n          e = this.chart,\n          n = this.getMeta(),\n          i = n.data || [],\n          a = e.chartArea,\n          r = e.canvas,\n          o = 0,\n          s = i.length;\n\n      for (this._showLine && (t = n.dataset._model.clip, H.canvas.clipArea(e.ctx, {\n        left: !1 === t.left ? 0 : a.left - t.left,\n        right: !1 === t.right ? r.width : a.right + t.right,\n        top: !1 === t.top ? 0 : a.top - t.top,\n        bottom: !1 === t.bottom ? r.height : a.bottom + t.bottom\n      }), n.dataset.draw(), H.canvas.unclipArea(e.ctx)); o < s; ++o) {\n        i[o].draw(a);\n      }\n    },\n    setHoverStyle: function setHoverStyle(t) {\n      var e = t._model,\n          n = t._options,\n          i = H.getHoverColor;\n      t.$previousStyle = {\n        backgroundColor: e.backgroundColor,\n        borderColor: e.borderColor,\n        borderWidth: e.borderWidth,\n        radius: e.radius\n      }, e.backgroundColor = Wt(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = Wt(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = Wt(n.hoverBorderWidth, n.borderWidth), e.radius = Wt(n.hoverRadius, n.radius);\n    }\n  }),\n      Gt = H.options.resolve;\n\n  N._set(\"polarArea\", {\n    scale: {\n      type: \"radialLinear\",\n      angleLines: {\n        display: !1\n      },\n      gridLines: {\n        circular: !0\n      },\n      pointLabels: {\n        display: !1\n      },\n      ticks: {\n        beginAtZero: !0\n      }\n    },\n    animation: {\n      animateRotate: !0,\n      animateScale: !0\n    },\n    startAngle: -.5 * Math.PI,\n    legendCallback: function legendCallback(t) {\n      var e,\n          n,\n          i,\n          a = document.createElement(\"ul\"),\n          r = t.data,\n          o = r.datasets,\n          s = r.labels;\n      if (a.setAttribute(\"class\", t.id + \"-legend\"), o.length) for (e = 0, n = o[0].data.length; e < n; ++e) {\n        (i = a.appendChild(document.createElement(\"li\"))).appendChild(document.createElement(\"span\")).style.backgroundColor = o[0].backgroundColor[e], s[e] && i.appendChild(document.createTextNode(s[e]));\n      }\n      return a.outerHTML;\n    },\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(t) {\n          var e = t.data;\n          return e.labels.length && e.datasets.length ? e.labels.map(function (n, i) {\n            var a = t.getDatasetMeta(0),\n                r = a.controller.getStyle(i);\n            return {\n              text: n,\n              fillStyle: r.backgroundColor,\n              strokeStyle: r.borderColor,\n              lineWidth: r.borderWidth,\n              hidden: isNaN(e.datasets[0].data[i]) || a.data[i].hidden,\n              index: i\n            };\n          }) : [];\n        }\n      },\n      onClick: function onClick(t, e) {\n        var n,\n            i,\n            a,\n            r = e.index,\n            o = this.chart;\n\n        for (n = 0, i = (o.data.datasets || []).length; n < i; ++n) {\n          (a = o.getDatasetMeta(n)).data[r].hidden = !a.data[r].hidden;\n        }\n\n        o.update();\n      }\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return \"\";\n        },\n        label: function label(t, e) {\n          return e.labels[t.index] + \": \" + t.yLabel;\n        }\n      }\n    }\n  });\n\n  var Xt = it.extend({\n    dataElementType: kt.Arc,\n    linkScales: H.noop,\n    _dataElementOptions: [\"backgroundColor\", \"borderColor\", \"borderWidth\", \"borderAlign\", \"hoverBackgroundColor\", \"hoverBorderColor\", \"hoverBorderWidth\"],\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.chart.scale.id;\n    },\n    _getValueScaleId: function _getValueScaleId() {\n      return this.chart.scale.id;\n    },\n    update: function update(t) {\n      var e,\n          n,\n          i,\n          a = this,\n          r = a.getDataset(),\n          o = a.getMeta(),\n          s = a.chart.options.startAngle || 0,\n          l = a._starts = [],\n          u = a._angles = [],\n          d = o.data;\n\n      for (a._updateRadius(), o.count = a.countVisibleElements(), e = 0, n = r.data.length; e < n; e++) {\n        l[e] = s, i = a._computeAngle(e), u[e] = i, s += i;\n      }\n\n      for (e = 0, n = d.length; e < n; ++e) {\n        d[e]._options = a._resolveDataElementOptions(d[e], e), a.updateElement(d[e], e, t);\n      }\n    },\n    _updateRadius: function _updateRadius() {\n      var t = this,\n          e = t.chart,\n          n = e.chartArea,\n          i = e.options,\n          a = Math.min(n.right - n.left, n.bottom - n.top);\n      e.outerRadius = Math.max(a / 2, 0), e.innerRadius = Math.max(i.cutoutPercentage ? e.outerRadius / 100 * i.cutoutPercentage : 1, 0), e.radiusLength = (e.outerRadius - e.innerRadius) / e.getVisibleDatasetCount(), t.outerRadius = e.outerRadius - e.radiusLength * t.index, t.innerRadius = t.outerRadius - e.radiusLength;\n    },\n    updateElement: function updateElement(t, e, n) {\n      var i = this,\n          a = i.chart,\n          r = i.getDataset(),\n          o = a.options,\n          s = o.animation,\n          l = a.scale,\n          u = a.data.labels,\n          d = l.xCenter,\n          h = l.yCenter,\n          c = o.startAngle,\n          f = t.hidden ? 0 : l.getDistanceFromCenterForValue(r.data[e]),\n          g = i._starts[e],\n          p = g + (t.hidden ? 0 : i._angles[e]),\n          m = s.animateScale ? 0 : l.getDistanceFromCenterForValue(r.data[e]),\n          v = t._options || {};\n      H.extend(t, {\n        _datasetIndex: i.index,\n        _index: e,\n        _scale: l,\n        _model: {\n          backgroundColor: v.backgroundColor,\n          borderColor: v.borderColor,\n          borderWidth: v.borderWidth,\n          borderAlign: v.borderAlign,\n          x: d,\n          y: h,\n          innerRadius: 0,\n          outerRadius: n ? m : f,\n          startAngle: n && s.animateRotate ? c : g,\n          endAngle: n && s.animateRotate ? c : p,\n          label: H.valueAtIndexOrDefault(u, e, u[e])\n        }\n      }), t.pivot();\n    },\n    countVisibleElements: function countVisibleElements() {\n      var t = this.getDataset(),\n          e = this.getMeta(),\n          n = 0;\n      return H.each(e.data, function (e, i) {\n        isNaN(t.data[i]) || e.hidden || n++;\n      }), n;\n    },\n    setHoverStyle: function setHoverStyle(t) {\n      var e = t._model,\n          n = t._options,\n          i = H.getHoverColor,\n          a = H.valueOrDefault;\n      t.$previousStyle = {\n        backgroundColor: e.backgroundColor,\n        borderColor: e.borderColor,\n        borderWidth: e.borderWidth\n      }, e.backgroundColor = a(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = a(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = a(n.hoverBorderWidth, n.borderWidth);\n    },\n    _computeAngle: function _computeAngle(t) {\n      var e = this,\n          n = this.getMeta().count,\n          i = e.getDataset(),\n          a = e.getMeta();\n      if (isNaN(i.data[t]) || a.data[t].hidden) return 0;\n      var r = {\n        chart: e.chart,\n        dataIndex: t,\n        dataset: i,\n        datasetIndex: e.index\n      };\n      return Gt([e.chart.options.elements.arc.angle, 2 * Math.PI / n], r, t);\n    }\n  });\n  N._set(\"pie\", H.clone(N.doughnut)), N._set(\"pie\", {\n    cutoutPercentage: 0\n  });\n  var Kt = Bt,\n      Zt = H.valueOrDefault;\n\n  N._set(\"radar\", {\n    spanGaps: !1,\n    scale: {\n      type: \"radialLinear\"\n    },\n    elements: {\n      line: {\n        fill: \"start\",\n        tension: 0\n      }\n    }\n  });\n\n  var $t = it.extend({\n    datasetElementType: kt.Line,\n    dataElementType: kt.Point,\n    linkScales: H.noop,\n    _datasetElementOptions: [\"backgroundColor\", \"borderWidth\", \"borderColor\", \"borderCapStyle\", \"borderDash\", \"borderDashOffset\", \"borderJoinStyle\", \"fill\"],\n    _dataElementOptions: {\n      backgroundColor: \"pointBackgroundColor\",\n      borderColor: \"pointBorderColor\",\n      borderWidth: \"pointBorderWidth\",\n      hitRadius: \"pointHitRadius\",\n      hoverBackgroundColor: \"pointHoverBackgroundColor\",\n      hoverBorderColor: \"pointHoverBorderColor\",\n      hoverBorderWidth: \"pointHoverBorderWidth\",\n      hoverRadius: \"pointHoverRadius\",\n      pointStyle: \"pointStyle\",\n      radius: \"pointRadius\",\n      rotation: \"pointRotation\"\n    },\n    _getIndexScaleId: function _getIndexScaleId() {\n      return this.chart.scale.id;\n    },\n    _getValueScaleId: function _getValueScaleId() {\n      return this.chart.scale.id;\n    },\n    update: function update(t) {\n      var e,\n          n,\n          i = this,\n          a = i.getMeta(),\n          r = a.dataset,\n          o = a.data || [],\n          s = i.chart.scale,\n          l = i._config;\n\n      for (void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), r._scale = s, r._datasetIndex = i.index, r._children = o, r._loop = !0, r._model = i._resolveDatasetElementOptions(r), r.pivot(), e = 0, n = o.length; e < n; ++e) {\n        i.updateElement(o[e], e, t);\n      }\n\n      for (i.updateBezierControlPoints(), e = 0, n = o.length; e < n; ++e) {\n        o[e].pivot();\n      }\n    },\n    updateElement: function updateElement(t, e, n) {\n      var i = this,\n          a = t.custom || {},\n          r = i.getDataset(),\n          o = i.chart.scale,\n          s = o.getPointPositionForValue(e, r.data[e]),\n          l = i._resolveDataElementOptions(t, e),\n          u = i.getMeta().dataset._model,\n          d = n ? o.xCenter : s.x,\n          h = n ? o.yCenter : s.y;\n\n      t._scale = o, t._options = l, t._datasetIndex = i.index, t._index = e, t._model = {\n        x: d,\n        y: h,\n        skip: a.skip || isNaN(d) || isNaN(h),\n        radius: l.radius,\n        pointStyle: l.pointStyle,\n        rotation: l.rotation,\n        backgroundColor: l.backgroundColor,\n        borderColor: l.borderColor,\n        borderWidth: l.borderWidth,\n        tension: Zt(a.tension, u ? u.tension : 0),\n        hitRadius: l.hitRadius\n      };\n    },\n    _resolveDatasetElementOptions: function _resolveDatasetElementOptions() {\n      var t = this,\n          e = t._config,\n          n = t.chart.options,\n          i = it.prototype._resolveDatasetElementOptions.apply(t, arguments);\n\n      return i.spanGaps = Zt(e.spanGaps, n.spanGaps), i.tension = Zt(e.lineTension, n.elements.line.tension), i;\n    },\n    updateBezierControlPoints: function updateBezierControlPoints() {\n      var t,\n          e,\n          n,\n          i,\n          a = this.getMeta(),\n          r = this.chart.chartArea,\n          o = a.data || [];\n\n      function s(t, e, n) {\n        return Math.max(Math.min(t, n), e);\n      }\n\n      for (a.dataset._model.spanGaps && (o = o.filter(function (t) {\n        return !t._model.skip;\n      })), t = 0, e = o.length; t < e; ++t) {\n        n = o[t]._model, i = H.splineCurve(H.previousItem(o, t, !0)._model, n, H.nextItem(o, t, !0)._model, n.tension), n.controlPointPreviousX = s(i.previous.x, r.left, r.right), n.controlPointPreviousY = s(i.previous.y, r.top, r.bottom), n.controlPointNextX = s(i.next.x, r.left, r.right), n.controlPointNextY = s(i.next.y, r.top, r.bottom);\n      }\n    },\n    setHoverStyle: function setHoverStyle(t) {\n      var e = t._model,\n          n = t._options,\n          i = H.getHoverColor;\n      t.$previousStyle = {\n        backgroundColor: e.backgroundColor,\n        borderColor: e.borderColor,\n        borderWidth: e.borderWidth,\n        radius: e.radius\n      }, e.backgroundColor = Zt(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = Zt(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = Zt(n.hoverBorderWidth, n.borderWidth), e.radius = Zt(n.hoverRadius, n.radius);\n    }\n  });\n  N._set(\"scatter\", {\n    hover: {\n      mode: \"single\"\n    },\n    scales: {\n      xAxes: [{\n        id: \"x-axis-1\",\n        type: \"linear\",\n        position: \"bottom\"\n      }],\n      yAxes: [{\n        id: \"y-axis-1\",\n        type: \"linear\",\n        position: \"left\"\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function title() {\n          return \"\";\n        },\n        label: function label(t) {\n          return \"(\" + t.xLabel + \", \" + t.yLabel + \")\";\n        }\n      }\n    }\n  }), N._set(\"global\", {\n    datasets: {\n      scatter: {\n        showLine: !1\n      }\n    }\n  });\n  var Jt = {\n    bar: Tt,\n    bubble: Ot,\n    doughnut: Bt,\n    horizontalBar: Et,\n    line: Yt,\n    polarArea: Xt,\n    pie: Kt,\n    radar: $t,\n    scatter: Yt\n  };\n\n  function Qt(t, e) {\n    return t[\"native\"] ? {\n      x: t.x,\n      y: t.y\n    } : H.getRelativePosition(t, e);\n  }\n\n  function te(t, e) {\n    var n,\n        i,\n        a,\n        r,\n        o,\n        s,\n        l = t._getSortedVisibleDatasetMetas();\n\n    for (i = 0, r = l.length; i < r; ++i) {\n      for (a = 0, o = (n = l[i].data).length; a < o; ++a) {\n        (s = n[a])._view.skip || e(s);\n      }\n    }\n  }\n\n  function ee(t, e) {\n    var n = [];\n    return te(t, function (t) {\n      t.inRange(e.x, e.y) && n.push(t);\n    }), n;\n  }\n\n  function ne(t, e, n, i) {\n    var a = Number.POSITIVE_INFINITY,\n        r = [];\n    return te(t, function (t) {\n      if (!n || t.inRange(e.x, e.y)) {\n        var o = t.getCenterPoint(),\n            s = i(e, o);\n        s < a ? (r = [t], a = s) : s === a && r.push(t);\n      }\n    }), r;\n  }\n\n  function ie(t) {\n    var e = -1 !== t.indexOf(\"x\"),\n        n = -1 !== t.indexOf(\"y\");\n    return function (t, i) {\n      var a = e ? Math.abs(t.x - i.x) : 0,\n          r = n ? Math.abs(t.y - i.y) : 0;\n      return Math.sqrt(Math.pow(a, 2) + Math.pow(r, 2));\n    };\n  }\n\n  function ae(t, e, n) {\n    var i = Qt(e, t);\n    n.axis = n.axis || \"x\";\n    var a = ie(n.axis),\n        r = n.intersect ? ee(t, i) : ne(t, i, !1, a),\n        o = [];\n    return r.length ? (t._getSortedVisibleDatasetMetas().forEach(function (t) {\n      var e = t.data[r[0]._index];\n      e && !e._view.skip && o.push(e);\n    }), o) : [];\n  }\n\n  var re = {\n    modes: {\n      single: function single(t, e) {\n        var n = Qt(e, t),\n            i = [];\n        return te(t, function (t) {\n          if (t.inRange(n.x, n.y)) return i.push(t), i;\n        }), i.slice(0, 1);\n      },\n      label: ae,\n      index: ae,\n      dataset: function dataset(t, e, n) {\n        var i = Qt(e, t);\n        n.axis = n.axis || \"xy\";\n        var a = ie(n.axis),\n            r = n.intersect ? ee(t, i) : ne(t, i, !1, a);\n        return r.length > 0 && (r = t.getDatasetMeta(r[0]._datasetIndex).data), r;\n      },\n      \"x-axis\": function xAxis(t, e) {\n        return ae(t, e, {\n          intersect: !1\n        });\n      },\n      point: function point(t, e) {\n        return ee(t, Qt(e, t));\n      },\n      nearest: function nearest(t, e, n) {\n        var i = Qt(e, t);\n        n.axis = n.axis || \"xy\";\n        var a = ie(n.axis);\n        return ne(t, i, n.intersect, a);\n      },\n      x: function x(t, e, n) {\n        var i = Qt(e, t),\n            a = [],\n            r = !1;\n        return te(t, function (t) {\n          t.inXRange(i.x) && a.push(t), t.inRange(i.x, i.y) && (r = !0);\n        }), n.intersect && !r && (a = []), a;\n      },\n      y: function y(t, e, n) {\n        var i = Qt(e, t),\n            a = [],\n            r = !1;\n        return te(t, function (t) {\n          t.inYRange(i.y) && a.push(t), t.inRange(i.x, i.y) && (r = !0);\n        }), n.intersect && !r && (a = []), a;\n      }\n    }\n  },\n      oe = H.extend;\n\n  function se(t, e) {\n    return H.where(t, function (t) {\n      return t.pos === e;\n    });\n  }\n\n  function le(t, e) {\n    return t.sort(function (t, n) {\n      var i = e ? n : t,\n          a = e ? t : n;\n      return i.weight === a.weight ? i.index - a.index : i.weight - a.weight;\n    });\n  }\n\n  function ue(t, e, n, i) {\n    return Math.max(t[n], e[n]) + Math.max(t[i], e[i]);\n  }\n\n  function de(t, e, n) {\n    var i,\n        a,\n        r = n.box,\n        o = t.maxPadding;\n\n    if (n.size && (t[n.pos] -= n.size), n.size = n.horizontal ? r.height : r.width, t[n.pos] += n.size, r.getPadding) {\n      var s = r.getPadding();\n      o.top = Math.max(o.top, s.top), o.left = Math.max(o.left, s.left), o.bottom = Math.max(o.bottom, s.bottom), o.right = Math.max(o.right, s.right);\n    }\n\n    if (i = e.outerWidth - ue(o, t, \"left\", \"right\"), a = e.outerHeight - ue(o, t, \"top\", \"bottom\"), i !== t.w || a !== t.h) {\n      t.w = i, t.h = a;\n      var l = n.horizontal ? [i, t.w] : [a, t.h];\n      return !(l[0] === l[1] || isNaN(l[0]) && isNaN(l[1]));\n    }\n  }\n\n  function he(t, e) {\n    var n = e.maxPadding;\n\n    function i(t) {\n      var i = {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      };\n      return t.forEach(function (t) {\n        i[t] = Math.max(e[t], n[t]);\n      }), i;\n    }\n\n    return i(t ? [\"left\", \"right\"] : [\"top\", \"bottom\"]);\n  }\n\n  function ce(t, e, n) {\n    var i,\n        a,\n        r,\n        o,\n        s,\n        l,\n        u = [];\n\n    for (i = 0, a = t.length; i < a; ++i) {\n      (o = (r = t[i]).box).update(r.width || e.w, r.height || e.h, he(r.horizontal, e)), de(e, n, r) && (l = !0, u.length && (s = !0)), o.fullWidth || u.push(r);\n    }\n\n    return s && ce(u, e, n) || l;\n  }\n\n  function fe(t, e, n) {\n    var i,\n        a,\n        r,\n        o,\n        s = n.padding,\n        l = e.x,\n        u = e.y;\n\n    for (i = 0, a = t.length; i < a; ++i) {\n      o = (r = t[i]).box, r.horizontal ? (o.left = o.fullWidth ? s.left : e.left, o.right = o.fullWidth ? n.outerWidth - s.right : e.left + e.w, o.top = u, o.bottom = u + o.height, o.width = o.right - o.left, u = o.bottom) : (o.left = l, o.right = l + o.width, o.top = e.top, o.bottom = e.top + e.h, o.height = o.bottom - o.top, l = o.right);\n    }\n\n    e.x = l, e.y = u;\n  }\n\n  N._set(\"global\", {\n    layout: {\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    }\n  });\n\n  var ge,\n      pe = {\n    defaults: {},\n    addBox: function addBox(t, e) {\n      t.boxes || (t.boxes = []), e.fullWidth = e.fullWidth || !1, e.position = e.position || \"top\", e.weight = e.weight || 0, e._layers = e._layers || function () {\n        return [{\n          z: 0,\n          draw: function draw() {\n            e.draw.apply(e, arguments);\n          }\n        }];\n      }, t.boxes.push(e);\n    },\n    removeBox: function removeBox(t, e) {\n      var n = t.boxes ? t.boxes.indexOf(e) : -1;\n      -1 !== n && t.boxes.splice(n, 1);\n    },\n    configure: function configure(t, e, n) {\n      for (var i, a = [\"fullWidth\", \"position\", \"weight\"], r = a.length, o = 0; o < r; ++o) {\n        i = a[o], n.hasOwnProperty(i) && (e[i] = n[i]);\n      }\n    },\n    update: function update(t, e, n) {\n      if (t) {\n        var i = t.options.layout || {},\n            a = H.options.toPadding(i.padding),\n            r = e - a.width,\n            o = n - a.height,\n            s = function (t) {\n          var e = function (t) {\n            var e,\n                n,\n                i,\n                a = [];\n\n            for (e = 0, n = (t || []).length; e < n; ++e) {\n              i = t[e], a.push({\n                index: e,\n                box: i,\n                pos: i.position,\n                horizontal: i.isHorizontal(),\n                weight: i.weight\n              });\n            }\n\n            return a;\n          }(t),\n              n = le(se(e, \"left\"), !0),\n              i = le(se(e, \"right\")),\n              a = le(se(e, \"top\"), !0),\n              r = le(se(e, \"bottom\"));\n\n          return {\n            leftAndTop: n.concat(a),\n            rightAndBottom: i.concat(r),\n            chartArea: se(e, \"chartArea\"),\n            vertical: n.concat(i),\n            horizontal: a.concat(r)\n          };\n        }(t.boxes),\n            l = s.vertical,\n            u = s.horizontal,\n            d = Object.freeze({\n          outerWidth: e,\n          outerHeight: n,\n          padding: a,\n          availableWidth: r,\n          vBoxMaxWidth: r / 2 / l.length,\n          hBoxMaxHeight: o / 2\n        }),\n            h = oe({\n          maxPadding: oe({}, a),\n          w: r,\n          h: o,\n          x: a.left,\n          y: a.top\n        }, a);\n\n        !function (t, e) {\n          var n, i, a;\n\n          for (n = 0, i = t.length; n < i; ++n) {\n            (a = t[n]).width = a.horizontal ? a.box.fullWidth && e.availableWidth : e.vBoxMaxWidth, a.height = a.horizontal && e.hBoxMaxHeight;\n          }\n        }(l.concat(u), d), ce(l, h, d), ce(u, h, d) && ce(l, h, d), function (t) {\n          var e = t.maxPadding;\n\n          function n(n) {\n            var i = Math.max(e[n] - t[n], 0);\n            return t[n] += i, i;\n          }\n\n          t.y += n(\"top\"), t.x += n(\"left\"), n(\"right\"), n(\"bottom\");\n        }(h), fe(s.leftAndTop, h, d), h.x += h.w, h.y += h.h, fe(s.rightAndBottom, h, d), t.chartArea = {\n          left: h.left,\n          top: h.top,\n          right: h.left + h.w,\n          bottom: h.top + h.h\n        }, H.each(s.chartArea, function (e) {\n          var n = e.box;\n          oe(n, t.chartArea), n.update(h.w, h.h);\n        });\n      }\n    }\n  },\n      me = (ge = Object.freeze({\n    __proto__: null,\n    \"default\": \"@keyframes chartjs-render-animation{from{opacity:.99}to{opacity:1}}.chartjs-render-monitor{animation:chartjs-render-animation 1ms}.chartjs-size-monitor,.chartjs-size-monitor-expand,.chartjs-size-monitor-shrink{position:absolute;direction:ltr;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1}.chartjs-size-monitor-expand>div{position:absolute;width:1000000px;height:1000000px;left:0;top:0}.chartjs-size-monitor-shrink>div{position:absolute;width:200%;height:200%;left:0;top:0}\"\n  })) && ge[\"default\"] || ge,\n      ve = \"$chartjs\",\n      be = \"chartjs-size-monitor\",\n      xe = \"chartjs-render-monitor\",\n      ye = \"chartjs-render-animation\",\n      _e = [\"animationstart\", \"webkitAnimationStart\"],\n      ke = {\n    touchstart: \"mousedown\",\n    touchmove: \"mousemove\",\n    touchend: \"mouseup\",\n    pointerenter: \"mouseenter\",\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointerleave: \"mouseout\",\n    pointerout: \"mouseout\"\n  };\n\n  function we(t, e) {\n    var n = H.getStyle(t, e),\n        i = n && n.match(/^(\\d+)(\\.\\d+)?px$/);\n    return i ? Number(i[1]) : void 0;\n  }\n\n  var Me = !!function () {\n    var t = !1;\n\n    try {\n      var e = Object.defineProperty({}, \"passive\", {\n        get: function get() {\n          t = !0;\n        }\n      });\n      window.addEventListener(\"e\", null, e);\n    } catch (t) {}\n\n    return t;\n  }() && {\n    passive: !0\n  };\n\n  function Se(t, e, n) {\n    t.addEventListener(e, n, Me);\n  }\n\n  function Ce(t, e, n) {\n    t.removeEventListener(e, n, Me);\n  }\n\n  function Pe(t, e, n, i, a) {\n    return {\n      type: t,\n      chart: e,\n      \"native\": a || null,\n      x: void 0 !== n ? n : null,\n      y: void 0 !== i ? i : null\n    };\n  }\n\n  function Ae(t) {\n    var e = document.createElement(\"div\");\n    return e.className = t || \"\", e;\n  }\n\n  function De(t, e, n) {\n    var i,\n        a,\n        r,\n        o,\n        s = t[ve] || (t[ve] = {}),\n        l = s.resizer = function (t) {\n      var e = Ae(be),\n          n = Ae(be + \"-expand\"),\n          i = Ae(be + \"-shrink\");\n      n.appendChild(Ae()), i.appendChild(Ae()), e.appendChild(n), e.appendChild(i), e._reset = function () {\n        n.scrollLeft = 1e6, n.scrollTop = 1e6, i.scrollLeft = 1e6, i.scrollTop = 1e6;\n      };\n\n      var a = function a() {\n        e._reset(), t();\n      };\n\n      return Se(n, \"scroll\", a.bind(n, \"expand\")), Se(i, \"scroll\", a.bind(i, \"shrink\")), e;\n    }((i = function i() {\n      if (s.resizer) {\n        var i = n.options.maintainAspectRatio && t.parentNode,\n            a = i ? i.clientWidth : 0;\n        e(Pe(\"resize\", n)), i && i.clientWidth < a && n.canvas && e(Pe(\"resize\", n));\n      }\n    }, r = !1, o = [], function () {\n      o = Array.prototype.slice.call(arguments), a = a || this, r || (r = !0, H.requestAnimFrame.call(window, function () {\n        r = !1, i.apply(a, o);\n      }));\n    }));\n\n    !function (t, e) {\n      var n = t[ve] || (t[ve] = {}),\n          i = n.renderProxy = function (t) {\n        t.animationName === ye && e();\n      };\n\n      H.each(_e, function (e) {\n        Se(t, e, i);\n      }), n.reflow = !!t.offsetParent, t.classList.add(xe);\n    }(t, function () {\n      if (s.resizer) {\n        var e = t.parentNode;\n        e && e !== l.parentNode && e.insertBefore(l, e.firstChild), l._reset();\n      }\n    });\n  }\n\n  function Te(t) {\n    var e = t[ve] || {},\n        n = e.resizer;\n    delete e.resizer, function (t) {\n      var e = t[ve] || {},\n          n = e.renderProxy;\n      n && (H.each(_e, function (e) {\n        Ce(t, e, n);\n      }), delete e.renderProxy), t.classList.remove(xe);\n    }(t), n && n.parentNode && n.parentNode.removeChild(n);\n  }\n\n  var Ie = {\n    disableCSSInjection: !1,\n    _enabled: \"undefined\" != typeof window && \"undefined\" != typeof document,\n    _ensureLoaded: function _ensureLoaded(t) {\n      if (!this.disableCSSInjection) {\n        var e = t.getRootNode ? t.getRootNode() : document;\n        !function (t, e) {\n          var n = t[ve] || (t[ve] = {});\n\n          if (!n.containsStyles) {\n            n.containsStyles = !0, e = \"/* Chart.js */\\n\" + e;\n            var i = document.createElement(\"style\");\n            i.setAttribute(\"type\", \"text/css\"), i.appendChild(document.createTextNode(e)), t.appendChild(i);\n          }\n        }(e.host ? e : document.head, me);\n      }\n    },\n    acquireContext: function acquireContext(t, e) {\n      \"string\" == typeof t ? t = document.getElementById(t) : t.length && (t = t[0]), t && t.canvas && (t = t.canvas);\n      var n = t && t.getContext && t.getContext(\"2d\");\n      return n && n.canvas === t ? (this._ensureLoaded(t), function (t, e) {\n        var n = t.style,\n            i = t.getAttribute(\"height\"),\n            a = t.getAttribute(\"width\");\n\n        if (t[ve] = {\n          initial: {\n            height: i,\n            width: a,\n            style: {\n              display: n.display,\n              height: n.height,\n              width: n.width\n            }\n          }\n        }, n.display = n.display || \"block\", null === a || \"\" === a) {\n          var r = we(t, \"width\");\n          void 0 !== r && (t.width = r);\n        }\n\n        if (null === i || \"\" === i) if (\"\" === t.style.height) t.height = t.width / (e.options.aspectRatio || 2);else {\n          var o = we(t, \"height\");\n          void 0 !== r && (t.height = o);\n        }\n      }(t, e), n) : null;\n    },\n    releaseContext: function releaseContext(t) {\n      var e = t.canvas;\n\n      if (e[ve]) {\n        var n = e[ve].initial;\n        [\"height\", \"width\"].forEach(function (t) {\n          var i = n[t];\n          H.isNullOrUndef(i) ? e.removeAttribute(t) : e.setAttribute(t, i);\n        }), H.each(n.style || {}, function (t, n) {\n          e.style[n] = t;\n        }), e.width = e.width, delete e[ve];\n      }\n    },\n    addEventListener: function addEventListener(t, e, n) {\n      var i = t.canvas;\n\n      if (\"resize\" !== e) {\n        var a = n[ve] || (n[ve] = {});\n        Se(i, e, (a.proxies || (a.proxies = {}))[t.id + \"_\" + e] = function (e) {\n          n(function (t, e) {\n            var n = ke[t.type] || t.type,\n                i = H.getRelativePosition(t, e);\n            return Pe(n, e, i.x, i.y, t);\n          }(e, t));\n        });\n      } else De(i, n, t);\n    },\n    removeEventListener: function removeEventListener(t, e, n) {\n      var i = t.canvas;\n\n      if (\"resize\" !== e) {\n        var a = ((n[ve] || {}).proxies || {})[t.id + \"_\" + e];\n        a && Ce(i, e, a);\n      } else Te(i);\n    }\n  };\n  H.addEvent = Se, H.removeEvent = Ce;\n  var Fe = Ie._enabled ? Ie : {\n    acquireContext: function acquireContext(t) {\n      return t && t.canvas && (t = t.canvas), t && t.getContext(\"2d\") || null;\n    }\n  },\n      Oe = H.extend({\n    initialize: function initialize() {},\n    acquireContext: function acquireContext() {},\n    releaseContext: function releaseContext() {},\n    addEventListener: function addEventListener() {},\n    removeEventListener: function removeEventListener() {}\n  }, Fe);\n\n  N._set(\"global\", {\n    plugins: {}\n  });\n\n  var Le = {\n    _plugins: [],\n    _cacheId: 0,\n    register: function register(t) {\n      var e = this._plugins;\n      [].concat(t).forEach(function (t) {\n        -1 === e.indexOf(t) && e.push(t);\n      }), this._cacheId++;\n    },\n    unregister: function unregister(t) {\n      var e = this._plugins;\n      [].concat(t).forEach(function (t) {\n        var n = e.indexOf(t);\n        -1 !== n && e.splice(n, 1);\n      }), this._cacheId++;\n    },\n    clear: function clear() {\n      this._plugins = [], this._cacheId++;\n    },\n    count: function count() {\n      return this._plugins.length;\n    },\n    getAll: function getAll() {\n      return this._plugins;\n    },\n    notify: function notify(t, e, n) {\n      var i,\n          a,\n          r,\n          o,\n          s,\n          l = this.descriptors(t),\n          u = l.length;\n\n      for (i = 0; i < u; ++i) {\n        if (\"function\" == typeof (s = (r = (a = l[i]).plugin)[e]) && ((o = [t].concat(n || [])).push(a.options), !1 === s.apply(r, o))) return !1;\n      }\n\n      return !0;\n    },\n    descriptors: function descriptors(t) {\n      var e = t.$plugins || (t.$plugins = {});\n      if (e.id === this._cacheId) return e.descriptors;\n      var n = [],\n          i = [],\n          a = t && t.config || {},\n          r = a.options && a.options.plugins || {};\n      return this._plugins.concat(a.plugins || []).forEach(function (t) {\n        if (-1 === n.indexOf(t)) {\n          var e = t.id,\n              a = r[e];\n          !1 !== a && (!0 === a && (a = H.clone(N.global.plugins[e])), n.push(t), i.push({\n            plugin: t,\n            options: a || {}\n          }));\n        }\n      }), e.descriptors = i, e.id = this._cacheId, i;\n    },\n    _invalidate: function _invalidate(t) {\n      delete t.$plugins;\n    }\n  },\n      Re = {\n    constructors: {},\n    defaults: {},\n    registerScaleType: function registerScaleType(t, e, n) {\n      this.constructors[t] = e, this.defaults[t] = H.clone(n);\n    },\n    getScaleConstructor: function getScaleConstructor(t) {\n      return this.constructors.hasOwnProperty(t) ? this.constructors[t] : void 0;\n    },\n    getScaleDefaults: function getScaleDefaults(t) {\n      return this.defaults.hasOwnProperty(t) ? H.merge(Object.create(null), [N.scale, this.defaults[t]]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(t, e) {\n      this.defaults.hasOwnProperty(t) && (this.defaults[t] = H.extend(this.defaults[t], e));\n    },\n    addScalesToLayout: function addScalesToLayout(t) {\n      H.each(t.scales, function (e) {\n        e.fullWidth = e.options.fullWidth, e.position = e.options.position, e.weight = e.options.weight, pe.addBox(t, e);\n      });\n    }\n  },\n      ze = H.valueOrDefault,\n      Ne = H.rtl.getRtlAdapter;\n\n  N._set(\"global\", {\n    tooltips: {\n      enabled: !0,\n      custom: null,\n      mode: \"nearest\",\n      position: \"average\",\n      intersect: !0,\n      backgroundColor: \"rgba(0,0,0,0.8)\",\n      titleFontStyle: \"bold\",\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleFontColor: \"#fff\",\n      titleAlign: \"left\",\n      bodySpacing: 2,\n      bodyFontColor: \"#fff\",\n      bodyAlign: \"left\",\n      footerFontStyle: \"bold\",\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFontColor: \"#fff\",\n      footerAlign: \"left\",\n      yPadding: 6,\n      xPadding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      multiKeyBackground: \"#fff\",\n      displayColors: !0,\n      borderColor: \"rgba(0,0,0,0)\",\n      borderWidth: 0,\n      callbacks: {\n        beforeTitle: H.noop,\n        title: function title(t, e) {\n          var n = \"\",\n              i = e.labels,\n              a = i ? i.length : 0;\n\n          if (t.length > 0) {\n            var r = t[0];\n            r.label ? n = r.label : r.xLabel ? n = r.xLabel : a > 0 && r.index < a && (n = i[r.index]);\n          }\n\n          return n;\n        },\n        afterTitle: H.noop,\n        beforeBody: H.noop,\n        beforeLabel: H.noop,\n        label: function label(t, e) {\n          var n = e.datasets[t.datasetIndex].label || \"\";\n          return n && (n += \": \"), H.isNullOrUndef(t.value) ? n += t.yLabel : n += t.value, n;\n        },\n        labelColor: function labelColor(t, e) {\n          var n = e.getDatasetMeta(t.datasetIndex).data[t.index]._view;\n\n          return {\n            borderColor: n.borderColor,\n            backgroundColor: n.backgroundColor\n          };\n        },\n        labelTextColor: function labelTextColor() {\n          return this._options.bodyFontColor;\n        },\n        afterLabel: H.noop,\n        afterBody: H.noop,\n        beforeFooter: H.noop,\n        footer: H.noop,\n        afterFooter: H.noop\n      }\n    }\n  });\n\n  var Be = {\n    average: function average(t) {\n      if (!t.length) return !1;\n      var e,\n          n,\n          i = 0,\n          a = 0,\n          r = 0;\n\n      for (e = 0, n = t.length; e < n; ++e) {\n        var o = t[e];\n\n        if (o && o.hasValue()) {\n          var s = o.tooltipPosition();\n          i += s.x, a += s.y, ++r;\n        }\n      }\n\n      return {\n        x: i / r,\n        y: a / r\n      };\n    },\n    nearest: function nearest(t, e) {\n      var n,\n          i,\n          a,\n          r = e.x,\n          o = e.y,\n          s = Number.POSITIVE_INFINITY;\n\n      for (n = 0, i = t.length; n < i; ++n) {\n        var l = t[n];\n\n        if (l && l.hasValue()) {\n          var u = l.getCenterPoint(),\n              d = H.distanceBetweenPoints(e, u);\n          d < s && (s = d, a = l);\n        }\n      }\n\n      if (a) {\n        var h = a.tooltipPosition();\n        r = h.x, o = h.y;\n      }\n\n      return {\n        x: r,\n        y: o\n      };\n    }\n  };\n\n  function Ee(t, e) {\n    return e && (H.isArray(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;\n  }\n\n  function We(t) {\n    return (\"string\" == typeof t || t instanceof String) && t.indexOf(\"\\n\") > -1 ? t.split(\"\\n\") : t;\n  }\n\n  function Ve(t) {\n    var e = N.global;\n    return {\n      xPadding: t.xPadding,\n      yPadding: t.yPadding,\n      xAlign: t.xAlign,\n      yAlign: t.yAlign,\n      rtl: t.rtl,\n      textDirection: t.textDirection,\n      bodyFontColor: t.bodyFontColor,\n      _bodyFontFamily: ze(t.bodyFontFamily, e.defaultFontFamily),\n      _bodyFontStyle: ze(t.bodyFontStyle, e.defaultFontStyle),\n      _bodyAlign: t.bodyAlign,\n      bodyFontSize: ze(t.bodyFontSize, e.defaultFontSize),\n      bodySpacing: t.bodySpacing,\n      titleFontColor: t.titleFontColor,\n      _titleFontFamily: ze(t.titleFontFamily, e.defaultFontFamily),\n      _titleFontStyle: ze(t.titleFontStyle, e.defaultFontStyle),\n      titleFontSize: ze(t.titleFontSize, e.defaultFontSize),\n      _titleAlign: t.titleAlign,\n      titleSpacing: t.titleSpacing,\n      titleMarginBottom: t.titleMarginBottom,\n      footerFontColor: t.footerFontColor,\n      _footerFontFamily: ze(t.footerFontFamily, e.defaultFontFamily),\n      _footerFontStyle: ze(t.footerFontStyle, e.defaultFontStyle),\n      footerFontSize: ze(t.footerFontSize, e.defaultFontSize),\n      _footerAlign: t.footerAlign,\n      footerSpacing: t.footerSpacing,\n      footerMarginTop: t.footerMarginTop,\n      caretSize: t.caretSize,\n      cornerRadius: t.cornerRadius,\n      backgroundColor: t.backgroundColor,\n      opacity: 0,\n      legendColorBackground: t.multiKeyBackground,\n      displayColors: t.displayColors,\n      borderColor: t.borderColor,\n      borderWidth: t.borderWidth\n    };\n  }\n\n  function He(t, e) {\n    return \"center\" === e ? t.x + t.width / 2 : \"right\" === e ? t.x + t.width - t.xPadding : t.x + t.xPadding;\n  }\n\n  function je(t) {\n    return Ee([], We(t));\n  }\n\n  var qe = K.extend({\n    initialize: function initialize() {\n      this._model = Ve(this._options), this._lastActive = [];\n    },\n    getTitle: function getTitle() {\n      var t = this,\n          e = t._options,\n          n = e.callbacks,\n          i = n.beforeTitle.apply(t, arguments),\n          a = n.title.apply(t, arguments),\n          r = n.afterTitle.apply(t, arguments),\n          o = [];\n      return o = Ee(o, We(i)), o = Ee(o, We(a)), o = Ee(o, We(r));\n    },\n    getBeforeBody: function getBeforeBody() {\n      return je(this._options.callbacks.beforeBody.apply(this, arguments));\n    },\n    getBody: function getBody(t, e) {\n      var n = this,\n          i = n._options.callbacks,\n          a = [];\n      return H.each(t, function (t) {\n        var r = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        Ee(r.before, We(i.beforeLabel.call(n, t, e))), Ee(r.lines, i.label.call(n, t, e)), Ee(r.after, We(i.afterLabel.call(n, t, e))), a.push(r);\n      }), a;\n    },\n    getAfterBody: function getAfterBody() {\n      return je(this._options.callbacks.afterBody.apply(this, arguments));\n    },\n    getFooter: function getFooter() {\n      var t = this,\n          e = t._options.callbacks,\n          n = e.beforeFooter.apply(t, arguments),\n          i = e.footer.apply(t, arguments),\n          a = e.afterFooter.apply(t, arguments),\n          r = [];\n      return r = Ee(r, We(n)), r = Ee(r, We(i)), r = Ee(r, We(a));\n    },\n    update: function update(t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u,\n          d,\n          h = this,\n          c = h._options,\n          f = h._model,\n          g = h._model = Ve(c),\n          p = h._active,\n          m = h._data,\n          v = {\n        xAlign: f.xAlign,\n        yAlign: f.yAlign\n      },\n          b = {\n        x: f.x,\n        y: f.y\n      },\n          x = {\n        width: f.width,\n        height: f.height\n      },\n          y = {\n        x: f.caretX,\n        y: f.caretY\n      };\n\n      if (p.length) {\n        g.opacity = 1;\n        var _ = [],\n            k = [];\n        y = Be[c.position].call(h, p, h._eventPosition);\n        var w = [];\n\n        for (e = 0, n = p.length; e < n; ++e) {\n          w.push((i = p[e], a = void 0, r = void 0, o = void 0, s = void 0, l = void 0, u = void 0, d = void 0, a = i._xScale, r = i._yScale || i._scale, o = i._index, s = i._datasetIndex, l = i._chart.getDatasetMeta(s).controller, u = l._getIndexScale(), d = l._getValueScale(), {\n            xLabel: a ? a.getLabelForIndex(o, s) : \"\",\n            yLabel: r ? r.getLabelForIndex(o, s) : \"\",\n            label: u ? \"\" + u.getLabelForIndex(o, s) : \"\",\n            value: d ? \"\" + d.getLabelForIndex(o, s) : \"\",\n            index: o,\n            datasetIndex: s,\n            x: i._model.x,\n            y: i._model.y\n          }));\n        }\n\n        c.filter && (w = w.filter(function (t) {\n          return c.filter(t, m);\n        })), c.itemSort && (w = w.sort(function (t, e) {\n          return c.itemSort(t, e, m);\n        })), H.each(w, function (t) {\n          _.push(c.callbacks.labelColor.call(h, t, h._chart)), k.push(c.callbacks.labelTextColor.call(h, t, h._chart));\n        }), g.title = h.getTitle(w, m), g.beforeBody = h.getBeforeBody(w, m), g.body = h.getBody(w, m), g.afterBody = h.getAfterBody(w, m), g.footer = h.getFooter(w, m), g.x = y.x, g.y = y.y, g.caretPadding = c.caretPadding, g.labelColors = _, g.labelTextColors = k, g.dataPoints = w, x = function (t, e) {\n          var n = t._chart.ctx,\n              i = 2 * e.yPadding,\n              a = 0,\n              r = e.body,\n              o = r.reduce(function (t, e) {\n            return t + e.before.length + e.lines.length + e.after.length;\n          }, 0);\n          o += e.beforeBody.length + e.afterBody.length;\n          var s = e.title.length,\n              l = e.footer.length,\n              u = e.titleFontSize,\n              d = e.bodyFontSize,\n              h = e.footerFontSize;\n          i += s * u, i += s ? (s - 1) * e.titleSpacing : 0, i += s ? e.titleMarginBottom : 0, i += o * d, i += o ? (o - 1) * e.bodySpacing : 0, i += l ? e.footerMarginTop : 0, i += l * h, i += l ? (l - 1) * e.footerSpacing : 0;\n\n          var c = 0,\n              f = function f(t) {\n            a = Math.max(a, n.measureText(t).width + c);\n          };\n\n          return n.font = H.fontString(u, e._titleFontStyle, e._titleFontFamily), H.each(e.title, f), n.font = H.fontString(d, e._bodyFontStyle, e._bodyFontFamily), H.each(e.beforeBody.concat(e.afterBody), f), c = e.displayColors ? d + 2 : 0, H.each(r, function (t) {\n            H.each(t.before, f), H.each(t.lines, f), H.each(t.after, f);\n          }), c = 0, n.font = H.fontString(h, e._footerFontStyle, e._footerFontFamily), H.each(e.footer, f), {\n            width: a += 2 * e.xPadding,\n            height: i\n          };\n        }(this, g), b = function (t, e, n, i) {\n          var a = t.x,\n              r = t.y,\n              o = t.caretSize,\n              s = t.caretPadding,\n              l = t.cornerRadius,\n              u = n.xAlign,\n              d = n.yAlign,\n              h = o + s,\n              c = l + s;\n          return \"right\" === u ? a -= e.width : \"center\" === u && ((a -= e.width / 2) + e.width > i.width && (a = i.width - e.width), a < 0 && (a = 0)), \"top\" === d ? r += h : r -= \"bottom\" === d ? e.height + h : e.height / 2, \"center\" === d ? \"left\" === u ? a += h : \"right\" === u && (a -= h) : \"left\" === u ? a -= c : \"right\" === u && (a += c), {\n            x: a,\n            y: r\n          };\n        }(g, x, v = function (t, e) {\n          var n,\n              i,\n              a,\n              r,\n              o,\n              s = t._model,\n              l = t._chart,\n              u = t._chart.chartArea,\n              d = \"center\",\n              h = \"center\";\n          s.y < e.height ? h = \"top\" : s.y > l.height - e.height && (h = \"bottom\");\n          var c = (u.left + u.right) / 2,\n              f = (u.top + u.bottom) / 2;\n          \"center\" === h ? (n = function n(t) {\n            return t <= c;\n          }, i = function i(t) {\n            return t > c;\n          }) : (n = function n(t) {\n            return t <= e.width / 2;\n          }, i = function i(t) {\n            return t >= l.width - e.width / 2;\n          }), a = function a(t) {\n            return t + e.width + s.caretSize + s.caretPadding > l.width;\n          }, r = function r(t) {\n            return t - e.width - s.caretSize - s.caretPadding < 0;\n          }, o = function o(t) {\n            return t <= f ? \"top\" : \"bottom\";\n          }, n(s.x) ? (d = \"left\", a(s.x) && (d = \"center\", h = o(s.y))) : i(s.x) && (d = \"right\", r(s.x) && (d = \"center\", h = o(s.y)));\n          var g = t._options;\n          return {\n            xAlign: g.xAlign ? g.xAlign : d,\n            yAlign: g.yAlign ? g.yAlign : h\n          };\n        }(this, x), h._chart);\n      } else g.opacity = 0;\n\n      return g.xAlign = v.xAlign, g.yAlign = v.yAlign, g.x = b.x, g.y = b.y, g.width = x.width, g.height = x.height, g.caretX = y.x, g.caretY = y.y, h._model = g, t && c.custom && c.custom.call(h, g), h;\n    },\n    drawCaret: function drawCaret(t, e) {\n      var n = this._chart.ctx,\n          i = this._view,\n          a = this.getCaretPosition(t, e, i);\n      n.lineTo(a.x1, a.y1), n.lineTo(a.x2, a.y2), n.lineTo(a.x3, a.y3);\n    },\n    getCaretPosition: function getCaretPosition(t, e, n) {\n      var i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u = n.caretSize,\n          d = n.cornerRadius,\n          h = n.xAlign,\n          c = n.yAlign,\n          f = t.x,\n          g = t.y,\n          p = e.width,\n          m = e.height;\n      if (\"center\" === c) s = g + m / 2, \"left\" === h ? (a = (i = f) - u, r = i, o = s + u, l = s - u) : (a = (i = f + p) + u, r = i, o = s - u, l = s + u);else if (\"left\" === h ? (i = (a = f + d + u) - u, r = a + u) : \"right\" === h ? (i = (a = f + p - d - u) - u, r = a + u) : (i = (a = n.caretX) - u, r = a + u), \"top\" === c) s = (o = g) - u, l = o;else {\n        s = (o = g + m) + u, l = o;\n        var v = r;\n        r = i, i = v;\n      }\n      return {\n        x1: i,\n        x2: a,\n        x3: r,\n        y1: o,\n        y2: s,\n        y3: l\n      };\n    },\n    drawTitle: function drawTitle(t, e, n) {\n      var i,\n          a,\n          r,\n          o = e.title,\n          s = o.length;\n\n      if (s) {\n        var l = Ne(e.rtl, e.x, e.width);\n\n        for (t.x = He(e, e._titleAlign), n.textAlign = l.textAlign(e._titleAlign), n.textBaseline = \"middle\", i = e.titleFontSize, a = e.titleSpacing, n.fillStyle = e.titleFontColor, n.font = H.fontString(i, e._titleFontStyle, e._titleFontFamily), r = 0; r < s; ++r) {\n          n.fillText(o[r], l.x(t.x), t.y + i / 2), t.y += i + a, r + 1 === s && (t.y += e.titleMarginBottom - a);\n        }\n      }\n    },\n    drawBody: function drawBody(t, e, n) {\n      var i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u,\n          d,\n          h = e.bodyFontSize,\n          c = e.bodySpacing,\n          f = e._bodyAlign,\n          g = e.body,\n          p = e.displayColors,\n          m = 0,\n          v = p ? He(e, \"left\") : 0,\n          b = Ne(e.rtl, e.x, e.width),\n          x = function x(e) {\n        n.fillText(e, b.x(t.x + m), t.y + h / 2), t.y += h + c;\n      },\n          y = b.textAlign(f);\n\n      for (n.textAlign = f, n.textBaseline = \"middle\", n.font = H.fontString(h, e._bodyFontStyle, e._bodyFontFamily), t.x = He(e, y), n.fillStyle = e.bodyFontColor, H.each(e.beforeBody, x), m = p && \"right\" !== y ? \"center\" === f ? h / 2 + 1 : h + 2 : 0, s = 0, u = g.length; s < u; ++s) {\n        for (i = g[s], a = e.labelTextColors[s], r = e.labelColors[s], n.fillStyle = a, H.each(i.before, x), l = 0, d = (o = i.lines).length; l < d; ++l) {\n          if (p) {\n            var _ = b.x(v);\n\n            n.fillStyle = e.legendColorBackground, n.fillRect(b.leftForLtr(_, h), t.y, h, h), n.lineWidth = 1, n.strokeStyle = r.borderColor, n.strokeRect(b.leftForLtr(_, h), t.y, h, h), n.fillStyle = r.backgroundColor, n.fillRect(b.leftForLtr(b.xPlus(_, 1), h - 2), t.y + 1, h - 2, h - 2), n.fillStyle = a;\n          }\n\n          x(o[l]);\n        }\n\n        H.each(i.after, x);\n      }\n\n      m = 0, H.each(e.afterBody, x), t.y -= c;\n    },\n    drawFooter: function drawFooter(t, e, n) {\n      var i,\n          a,\n          r = e.footer,\n          o = r.length;\n\n      if (o) {\n        var s = Ne(e.rtl, e.x, e.width);\n\n        for (t.x = He(e, e._footerAlign), t.y += e.footerMarginTop, n.textAlign = s.textAlign(e._footerAlign), n.textBaseline = \"middle\", i = e.footerFontSize, n.fillStyle = e.footerFontColor, n.font = H.fontString(i, e._footerFontStyle, e._footerFontFamily), a = 0; a < o; ++a) {\n          n.fillText(r[a], s.x(t.x), t.y + i / 2), t.y += i + e.footerSpacing;\n        }\n      }\n    },\n    drawBackground: function drawBackground(t, e, n, i) {\n      n.fillStyle = e.backgroundColor, n.strokeStyle = e.borderColor, n.lineWidth = e.borderWidth;\n      var a = e.xAlign,\n          r = e.yAlign,\n          o = t.x,\n          s = t.y,\n          l = i.width,\n          u = i.height,\n          d = e.cornerRadius;\n      n.beginPath(), n.moveTo(o + d, s), \"top\" === r && this.drawCaret(t, i), n.lineTo(o + l - d, s), n.quadraticCurveTo(o + l, s, o + l, s + d), \"center\" === r && \"right\" === a && this.drawCaret(t, i), n.lineTo(o + l, s + u - d), n.quadraticCurveTo(o + l, s + u, o + l - d, s + u), \"bottom\" === r && this.drawCaret(t, i), n.lineTo(o + d, s + u), n.quadraticCurveTo(o, s + u, o, s + u - d), \"center\" === r && \"left\" === a && this.drawCaret(t, i), n.lineTo(o, s + d), n.quadraticCurveTo(o, s, o + d, s), n.closePath(), n.fill(), e.borderWidth > 0 && n.stroke();\n    },\n    draw: function draw() {\n      var t = this._chart.ctx,\n          e = this._view;\n\n      if (0 !== e.opacity) {\n        var n = {\n          width: e.width,\n          height: e.height\n        },\n            i = {\n          x: e.x,\n          y: e.y\n        },\n            a = Math.abs(e.opacity < .001) ? 0 : e.opacity,\n            r = e.title.length || e.beforeBody.length || e.body.length || e.afterBody.length || e.footer.length;\n        this._options.enabled && r && (t.save(), t.globalAlpha = a, this.drawBackground(i, e, t, n), i.y += e.yPadding, H.rtl.overrideTextDirection(t, e.textDirection), this.drawTitle(i, e, t), this.drawBody(i, e, t), this.drawFooter(i, e, t), H.rtl.restoreTextDirection(t, e.textDirection), t.restore());\n      }\n    },\n    handleEvent: function handleEvent(t) {\n      var e,\n          n = this,\n          i = n._options;\n      return n._lastActive = n._lastActive || [], \"mouseout\" === t.type ? n._active = [] : (n._active = n._chart.getElementsAtEventForMode(t, i.mode, i), i.reverse && n._active.reverse()), (e = !H.arrayEquals(n._active, n._lastActive)) && (n._lastActive = n._active, (i.enabled || i.custom) && (n._eventPosition = {\n        x: t.x,\n        y: t.y\n      }, n.update(!0), n.pivot())), e;\n    }\n  }),\n      Ue = Be,\n      Ye = qe;\n  Ye.positioners = Ue;\n  var Ge = H.valueOrDefault;\n\n  function Xe() {\n    return H.merge(Object.create(null), [].slice.call(arguments), {\n      merger: function merger(t, e, n, i) {\n        if (\"xAxes\" === t || \"yAxes\" === t) {\n          var a,\n              r,\n              o,\n              s = n[t].length;\n\n          for (e[t] || (e[t] = []), a = 0; a < s; ++a) {\n            o = n[t][a], r = Ge(o.type, \"xAxes\" === t ? \"category\" : \"linear\"), a >= e[t].length && e[t].push({}), !e[t][a].type || o.type && o.type !== e[t][a].type ? H.merge(e[t][a], [Re.getScaleDefaults(r), o]) : H.merge(e[t][a], o);\n          }\n        } else H._merger(t, e, n, i);\n      }\n    });\n  }\n\n  function Ke() {\n    return H.merge(Object.create(null), [].slice.call(arguments), {\n      merger: function merger(t, e, n, i) {\n        var a = e[t] || Object.create(null),\n            r = n[t];\n        \"scales\" === t ? e[t] = Xe(a, r) : \"scale\" === t ? e[t] = H.merge(a, [Re.getScaleDefaults(r.type), r]) : H._merger(t, e, n, i);\n      }\n    });\n  }\n\n  function Ze(t) {\n    var e = t.options;\n    H.each(t.scales, function (e) {\n      pe.removeBox(t, e);\n    }), e = Ke(N.global, N[t.config.type], e), t.options = t.config.options = e, t.ensureScalesHaveIDs(), t.buildOrUpdateScales(), t.tooltip._options = e.tooltips, t.tooltip.initialize();\n  }\n\n  function $e(t, e, n) {\n    var i,\n        a = function a(t) {\n      return t.id === i;\n    };\n\n    do {\n      i = e + n++;\n    } while (H.findIndex(t, a) >= 0);\n\n    return i;\n  }\n\n  function Je(t) {\n    return \"top\" === t || \"bottom\" === t;\n  }\n\n  function Qe(t, e) {\n    return function (n, i) {\n      return n[t] === i[t] ? n[e] - i[e] : n[t] - i[t];\n    };\n  }\n\n  N._set(\"global\", {\n    elements: {},\n    events: [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\"],\n    hover: {\n      onHover: null,\n      mode: \"nearest\",\n      intersect: !0,\n      animationDuration: 400\n    },\n    onClick: null,\n    maintainAspectRatio: !0,\n    responsive: !0,\n    responsiveAnimationDuration: 0\n  });\n\n  var tn = function tn(t, e) {\n    return this.construct(t, e), this;\n  };\n\n  H.extend(tn.prototype, {\n    construct: function construct(t, e) {\n      var n = this;\n\n      e = function (t) {\n        var e = (t = t || Object.create(null)).data = t.data || {};\n        return e.datasets = e.datasets || [], e.labels = e.labels || [], t.options = Ke(N.global, N[t.type], t.options || {}), t;\n      }(e);\n\n      var i = Oe.acquireContext(t, e),\n          a = i && i.canvas,\n          r = a && a.height,\n          o = a && a.width;\n      n.id = H.uid(), n.ctx = i, n.canvas = a, n.config = e, n.width = o, n.height = r, n.aspectRatio = r ? o / r : null, n.options = e.options, n._bufferedRender = !1, n._layers = [], n.chart = n, n.controller = n, tn.instances[n.id] = n, Object.defineProperty(n, \"data\", {\n        get: function get() {\n          return n.config.data;\n        },\n        set: function set(t) {\n          n.config.data = t;\n        }\n      }), i && a ? (n.initialize(), n.update()) : console.error(\"Failed to create chart: can't acquire context from the given item\");\n    },\n    initialize: function initialize() {\n      var t = this;\n      return Le.notify(t, \"beforeInit\"), H.retinaScale(t, t.options.devicePixelRatio), t.bindEvents(), t.options.responsive && t.resize(!0), t.initToolTip(), Le.notify(t, \"afterInit\"), t;\n    },\n    clear: function clear() {\n      return H.canvas.clear(this), this;\n    },\n    stop: function stop() {\n      return J.cancelAnimation(this), this;\n    },\n    resize: function resize(t) {\n      var e = this,\n          n = e.options,\n          i = e.canvas,\n          a = n.maintainAspectRatio && e.aspectRatio || null,\n          r = Math.max(0, Math.floor(H.getMaximumWidth(i))),\n          o = Math.max(0, Math.floor(a ? r / a : H.getMaximumHeight(i)));\n\n      if ((e.width !== r || e.height !== o) && (i.width = e.width = r, i.height = e.height = o, i.style.width = r + \"px\", i.style.height = o + \"px\", H.retinaScale(e, n.devicePixelRatio), !t)) {\n        var s = {\n          width: r,\n          height: o\n        };\n        Le.notify(e, \"resize\", [s]), n.onResize && n.onResize(e, s), e.stop(), e.update({\n          duration: n.responsiveAnimationDuration\n        });\n      }\n    },\n    ensureScalesHaveIDs: function ensureScalesHaveIDs() {\n      var t = this.options,\n          e = t.scales || {},\n          n = t.scale;\n      H.each(e.xAxes, function (t, n) {\n        t.id || (t.id = $e(e.xAxes, \"x-axis-\", n));\n      }), H.each(e.yAxes, function (t, n) {\n        t.id || (t.id = $e(e.yAxes, \"y-axis-\", n));\n      }), n && (n.id = n.id || \"scale\");\n    },\n    buildOrUpdateScales: function buildOrUpdateScales() {\n      var t = this,\n          e = t.options,\n          n = t.scales || {},\n          i = [],\n          a = Object.keys(n).reduce(function (t, e) {\n        return t[e] = !1, t;\n      }, {});\n      e.scales && (i = i.concat((e.scales.xAxes || []).map(function (t) {\n        return {\n          options: t,\n          dtype: \"category\",\n          dposition: \"bottom\"\n        };\n      }), (e.scales.yAxes || []).map(function (t) {\n        return {\n          options: t,\n          dtype: \"linear\",\n          dposition: \"left\"\n        };\n      }))), e.scale && i.push({\n        options: e.scale,\n        dtype: \"radialLinear\",\n        isDefault: !0,\n        dposition: \"chartArea\"\n      }), H.each(i, function (e) {\n        var i = e.options,\n            r = i.id,\n            o = Ge(i.type, e.dtype);\n        Je(i.position) !== Je(e.dposition) && (i.position = e.dposition), a[r] = !0;\n        var s = null;\n        if (r in n && n[r].type === o) (s = n[r]).options = i, s.ctx = t.ctx, s.chart = t;else {\n          var l = Re.getScaleConstructor(o);\n          if (!l) return;\n          s = new l({\n            id: r,\n            type: o,\n            options: i,\n            ctx: t.ctx,\n            chart: t\n          }), n[s.id] = s;\n        }\n        s.mergeTicksOptions(), e.isDefault && (t.scale = s);\n      }), H.each(a, function (t, e) {\n        t || delete n[e];\n      }), t.scales = n, Re.addScalesToLayout(this);\n    },\n    buildOrUpdateControllers: function buildOrUpdateControllers() {\n      var t,\n          e,\n          n = this,\n          i = [],\n          a = n.data.datasets;\n\n      for (t = 0, e = a.length; t < e; t++) {\n        var r = a[t],\n            o = n.getDatasetMeta(t),\n            s = r.type || n.config.type;\n        if (o.type && o.type !== s && (n.destroyDatasetMeta(t), o = n.getDatasetMeta(t)), o.type = s, o.order = r.order || 0, o.index = t, o.controller) o.controller.updateIndex(t), o.controller.linkScales();else {\n          var l = Jt[o.type];\n          if (void 0 === l) throw new Error('\"' + o.type + '\" is not a chart type.');\n          o.controller = new l(n, t), i.push(o.controller);\n        }\n      }\n\n      return i;\n    },\n    resetElements: function resetElements() {\n      var t = this;\n      H.each(t.data.datasets, function (e, n) {\n        t.getDatasetMeta(n).controller.reset();\n      }, t);\n    },\n    reset: function reset() {\n      this.resetElements(), this.tooltip.initialize();\n    },\n    update: function update(t) {\n      var e,\n          n,\n          i = this;\n\n      if (t && \"object\" == _typeof(t) || (t = {\n        duration: t,\n        lazy: arguments[1]\n      }), Ze(i), Le._invalidate(i), !1 !== Le.notify(i, \"beforeUpdate\")) {\n        i.tooltip._data = i.data;\n        var a = i.buildOrUpdateControllers();\n\n        for (e = 0, n = i.data.datasets.length; e < n; e++) {\n          i.getDatasetMeta(e).controller.buildOrUpdateElements();\n        }\n\n        i.updateLayout(), i.options.animation && i.options.animation.duration && H.each(a, function (t) {\n          t.reset();\n        }), i.updateDatasets(), i.tooltip.initialize(), i.lastActive = [], Le.notify(i, \"afterUpdate\"), i._layers.sort(Qe(\"z\", \"_idx\")), i._bufferedRender ? i._bufferedRequest = {\n          duration: t.duration,\n          easing: t.easing,\n          lazy: t.lazy\n        } : i.render(t);\n      }\n    },\n    updateLayout: function updateLayout() {\n      var t = this;\n      !1 !== Le.notify(t, \"beforeLayout\") && (pe.update(this, this.width, this.height), t._layers = [], H.each(t.boxes, function (e) {\n        e._configure && e._configure(), t._layers.push.apply(t._layers, e._layers());\n      }, t), t._layers.forEach(function (t, e) {\n        t._idx = e;\n      }), Le.notify(t, \"afterScaleUpdate\"), Le.notify(t, \"afterLayout\"));\n    },\n    updateDatasets: function updateDatasets() {\n      if (!1 !== Le.notify(this, \"beforeDatasetsUpdate\")) {\n        for (var t = 0, e = this.data.datasets.length; t < e; ++t) {\n          this.updateDataset(t);\n        }\n\n        Le.notify(this, \"afterDatasetsUpdate\");\n      }\n    },\n    updateDataset: function updateDataset(t) {\n      var e = this.getDatasetMeta(t),\n          n = {\n        meta: e,\n        index: t\n      };\n      !1 !== Le.notify(this, \"beforeDatasetUpdate\", [n]) && (e.controller._update(), Le.notify(this, \"afterDatasetUpdate\", [n]));\n    },\n    render: function render(t) {\n      var e = this;\n      t && \"object\" == _typeof(t) || (t = {\n        duration: t,\n        lazy: arguments[1]\n      });\n      var n = e.options.animation,\n          i = Ge(t.duration, n && n.duration),\n          a = t.lazy;\n\n      if (!1 !== Le.notify(e, \"beforeRender\")) {\n        var r = function r(t) {\n          Le.notify(e, \"afterRender\"), H.callback(n && n.onComplete, [t], e);\n        };\n\n        if (n && i) {\n          var o = new $({\n            numSteps: i / 16.66,\n            easing: t.easing || n.easing,\n            render: function render(t, e) {\n              var n = H.easing.effects[e.easing],\n                  i = e.currentStep,\n                  a = i / e.numSteps;\n              t.draw(n(a), a, i);\n            },\n            onAnimationProgress: n.onProgress,\n            onAnimationComplete: r\n          });\n          J.addAnimation(e, o, i, a);\n        } else e.draw(), r(new $({\n          numSteps: 0,\n          chart: e\n        }));\n\n        return e;\n      }\n    },\n    draw: function draw(t) {\n      var e,\n          n,\n          i = this;\n\n      if (i.clear(), H.isNullOrUndef(t) && (t = 1), i.transition(t), !(i.width <= 0 || i.height <= 0) && !1 !== Le.notify(i, \"beforeDraw\", [t])) {\n        for (n = i._layers, e = 0; e < n.length && n[e].z <= 0; ++e) {\n          n[e].draw(i.chartArea);\n        }\n\n        for (i.drawDatasets(t); e < n.length; ++e) {\n          n[e].draw(i.chartArea);\n        }\n\n        i._drawTooltip(t), Le.notify(i, \"afterDraw\", [t]);\n      }\n    },\n    transition: function transition(t) {\n      for (var e = 0, n = (this.data.datasets || []).length; e < n; ++e) {\n        this.isDatasetVisible(e) && this.getDatasetMeta(e).controller.transition(t);\n      }\n\n      this.tooltip.transition(t);\n    },\n    _getSortedDatasetMetas: function _getSortedDatasetMetas(t) {\n      var e,\n          n,\n          i = [];\n\n      for (e = 0, n = (this.data.datasets || []).length; e < n; ++e) {\n        t && !this.isDatasetVisible(e) || i.push(this.getDatasetMeta(e));\n      }\n\n      return i.sort(Qe(\"order\", \"index\")), i;\n    },\n    _getSortedVisibleDatasetMetas: function _getSortedVisibleDatasetMetas() {\n      return this._getSortedDatasetMetas(!0);\n    },\n    drawDatasets: function drawDatasets(t) {\n      var e, n;\n\n      if (!1 !== Le.notify(this, \"beforeDatasetsDraw\", [t])) {\n        for (n = (e = this._getSortedVisibleDatasetMetas()).length - 1; n >= 0; --n) {\n          this.drawDataset(e[n], t);\n        }\n\n        Le.notify(this, \"afterDatasetsDraw\", [t]);\n      }\n    },\n    drawDataset: function drawDataset(t, e) {\n      var n = {\n        meta: t,\n        index: t.index,\n        easingValue: e\n      };\n      !1 !== Le.notify(this, \"beforeDatasetDraw\", [n]) && (t.controller.draw(e), Le.notify(this, \"afterDatasetDraw\", [n]));\n    },\n    _drawTooltip: function _drawTooltip(t) {\n      var e = this.tooltip,\n          n = {\n        tooltip: e,\n        easingValue: t\n      };\n      !1 !== Le.notify(this, \"beforeTooltipDraw\", [n]) && (e.draw(), Le.notify(this, \"afterTooltipDraw\", [n]));\n    },\n    getElementAtEvent: function getElementAtEvent(t) {\n      return re.modes.single(this, t);\n    },\n    getElementsAtEvent: function getElementsAtEvent(t) {\n      return re.modes.label(this, t, {\n        intersect: !0\n      });\n    },\n    getElementsAtXAxis: function getElementsAtXAxis(t) {\n      return re.modes[\"x-axis\"](this, t, {\n        intersect: !0\n      });\n    },\n    getElementsAtEventForMode: function getElementsAtEventForMode(t, e, n) {\n      var i = re.modes[e];\n      return \"function\" == typeof i ? i(this, t, n) : [];\n    },\n    getDatasetAtEvent: function getDatasetAtEvent(t) {\n      return re.modes.dataset(this, t, {\n        intersect: !0\n      });\n    },\n    getDatasetMeta: function getDatasetMeta(t) {\n      var e = this.data.datasets[t];\n      e._meta || (e._meta = {});\n      var n = e._meta[this.id];\n      return n || (n = e._meta[this.id] = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: e.order || 0,\n        index: t\n      }), n;\n    },\n    getVisibleDatasetCount: function getVisibleDatasetCount() {\n      for (var t = 0, e = 0, n = this.data.datasets.length; e < n; ++e) {\n        this.isDatasetVisible(e) && t++;\n      }\n\n      return t;\n    },\n    isDatasetVisible: function isDatasetVisible(t) {\n      var e = this.getDatasetMeta(t);\n      return \"boolean\" == typeof e.hidden ? !e.hidden : !this.data.datasets[t].hidden;\n    },\n    generateLegend: function generateLegend() {\n      return this.options.legendCallback(this);\n    },\n    destroyDatasetMeta: function destroyDatasetMeta(t) {\n      var e = this.id,\n          n = this.data.datasets[t],\n          i = n._meta && n._meta[e];\n      i && (i.controller.destroy(), delete n._meta[e]);\n    },\n    destroy: function destroy() {\n      var t,\n          e,\n          n = this,\n          i = n.canvas;\n\n      for (n.stop(), t = 0, e = n.data.datasets.length; t < e; ++t) {\n        n.destroyDatasetMeta(t);\n      }\n\n      i && (n.unbindEvents(), H.canvas.clear(n), Oe.releaseContext(n.ctx), n.canvas = null, n.ctx = null), Le.notify(n, \"destroy\"), delete tn.instances[n.id];\n    },\n    toBase64Image: function toBase64Image() {\n      return this.canvas.toDataURL.apply(this.canvas, arguments);\n    },\n    initToolTip: function initToolTip() {\n      var t = this;\n      t.tooltip = new Ye({\n        _chart: t,\n        _chartInstance: t,\n        _data: t.data,\n        _options: t.options.tooltips\n      }, t);\n    },\n    bindEvents: function bindEvents() {\n      var t = this,\n          e = t._listeners = {},\n          n = function n() {\n        t.eventHandler.apply(t, arguments);\n      };\n\n      H.each(t.options.events, function (i) {\n        Oe.addEventListener(t, i, n), e[i] = n;\n      }), t.options.responsive && (n = function n() {\n        t.resize();\n      }, Oe.addEventListener(t, \"resize\", n), e.resize = n);\n    },\n    unbindEvents: function unbindEvents() {\n      var t = this,\n          e = t._listeners;\n      e && (delete t._listeners, H.each(e, function (e, n) {\n        Oe.removeEventListener(t, n, e);\n      }));\n    },\n    updateHoverStyle: function updateHoverStyle(t, e, n) {\n      var i,\n          a,\n          r,\n          o = n ? \"set\" : \"remove\";\n\n      for (a = 0, r = t.length; a < r; ++a) {\n        (i = t[a]) && this.getDatasetMeta(i._datasetIndex).controller[o + \"HoverStyle\"](i);\n      }\n\n      \"dataset\" === e && this.getDatasetMeta(t[0]._datasetIndex).controller[\"_\" + o + \"DatasetHoverStyle\"]();\n    },\n    eventHandler: function eventHandler(t) {\n      var e = this,\n          n = e.tooltip;\n\n      if (!1 !== Le.notify(e, \"beforeEvent\", [t])) {\n        e._bufferedRender = !0, e._bufferedRequest = null;\n        var i = e.handleEvent(t);\n        n && (i = n._start ? n.handleEvent(t) : i | n.handleEvent(t)), Le.notify(e, \"afterEvent\", [t]);\n        var a = e._bufferedRequest;\n        return a ? e.render(a) : i && !e.animating && (e.stop(), e.render({\n          duration: e.options.hover.animationDuration,\n          lazy: !0\n        })), e._bufferedRender = !1, e._bufferedRequest = null, e;\n      }\n    },\n    handleEvent: function handleEvent(t) {\n      var e,\n          n = this,\n          i = n.options || {},\n          a = i.hover;\n      return n.lastActive = n.lastActive || [], \"mouseout\" === t.type ? n.active = [] : n.active = n.getElementsAtEventForMode(t, a.mode, a), H.callback(i.onHover || i.hover.onHover, [t[\"native\"], n.active], n), \"mouseup\" !== t.type && \"click\" !== t.type || i.onClick && i.onClick.call(n, t[\"native\"], n.active), n.lastActive.length && n.updateHoverStyle(n.lastActive, a.mode, !1), n.active.length && a.mode && n.updateHoverStyle(n.active, a.mode, !0), e = !H.arrayEquals(n.active, n.lastActive), n.lastActive = n.active, e;\n    }\n  }), tn.instances = {};\n  var en = tn;\n  tn.Controller = tn, tn.types = {}, H.configMerge = Ke, H.scaleMerge = Xe;\n\n  function nn() {\n    throw new Error(\"This method is not implemented: either no adapter can be found or an incomplete integration was provided.\");\n  }\n\n  function an(t) {\n    this.options = t || {};\n  }\n\n  H.extend(an.prototype, {\n    formats: nn,\n    parse: nn,\n    format: nn,\n    add: nn,\n    diff: nn,\n    startOf: nn,\n    endOf: nn,\n    _create: function _create(t) {\n      return t;\n    }\n  }), an.override = function (t) {\n    H.extend(an.prototype, t);\n  };\n  var rn = {\n    _date: an\n  },\n      on = {\n    formatters: {\n      values: function values(t) {\n        return H.isArray(t) ? t : \"\" + t;\n      },\n      linear: function linear(t, e, n) {\n        var i = n.length > 3 ? n[2] - n[1] : n[1] - n[0];\n        Math.abs(i) > 1 && t !== Math.floor(t) && (i = t - Math.floor(t));\n        var a = H.log10(Math.abs(i)),\n            r = \"\";\n        if (0 !== t) {\n          if (Math.max(Math.abs(n[0]), Math.abs(n[n.length - 1])) < 1e-4) {\n            var o = H.log10(Math.abs(t)),\n                s = Math.floor(o) - Math.floor(a);\n            s = Math.max(Math.min(s, 20), 0), r = t.toExponential(s);\n          } else {\n            var l = -1 * Math.floor(a);\n            l = Math.max(Math.min(l, 20), 0), r = t.toFixed(l);\n          }\n        } else r = \"0\";\n        return r;\n      },\n      logarithmic: function logarithmic(t, e, n) {\n        var i = t / Math.pow(10, Math.floor(H.log10(t)));\n        return 0 === t ? \"0\" : 1 === i || 2 === i || 5 === i || 0 === e || e === n.length - 1 ? t.toExponential() : \"\";\n      }\n    }\n  },\n      sn = H.isArray,\n      ln = H.isNullOrUndef,\n      un = H.valueOrDefault,\n      dn = H.valueAtIndexOrDefault;\n\n  function hn(t, e, n) {\n    var i,\n        a = t.getTicks().length,\n        r = Math.min(e, a - 1),\n        o = t.getPixelForTick(r),\n        s = t._startPixel,\n        l = t._endPixel;\n    if (!(n && (i = 1 === a ? Math.max(o - s, l - o) : 0 === e ? (t.getPixelForTick(1) - o) / 2 : (o - t.getPixelForTick(r - 1)) / 2, (o += r < e ? i : -i) < s - 1e-6 || o > l + 1e-6))) return o;\n  }\n\n  function cn(t, e, n, i) {\n    var a,\n        r,\n        o,\n        s,\n        l,\n        u,\n        d,\n        h,\n        c,\n        f,\n        g,\n        p,\n        m,\n        v = n.length,\n        b = [],\n        x = [],\n        y = [],\n        _ = 0,\n        k = 0;\n\n    for (a = 0; a < v; ++a) {\n      if (s = n[a].label, l = n[a].major ? e.major : e.minor, t.font = u = l.string, d = i[u] = i[u] || {\n        data: {},\n        gc: []\n      }, h = l.lineHeight, c = f = 0, ln(s) || sn(s)) {\n        if (sn(s)) for (r = 0, o = s.length; r < o; ++r) {\n          g = s[r], ln(g) || sn(g) || (c = H.measureText(t, d.data, d.gc, c, g), f += h);\n        }\n      } else c = H.measureText(t, d.data, d.gc, c, s), f = h;\n\n      b.push(c), x.push(f), y.push(h / 2), _ = Math.max(c, _), k = Math.max(f, k);\n    }\n\n    function w(t) {\n      return {\n        width: b[t] || 0,\n        height: x[t] || 0,\n        offset: y[t] || 0\n      };\n    }\n\n    return function (t, e) {\n      H.each(t, function (t) {\n        var n,\n            i = t.gc,\n            a = i.length / 2;\n\n        if (a > e) {\n          for (n = 0; n < a; ++n) {\n            delete t.data[i[n]];\n          }\n\n          i.splice(0, a);\n        }\n      });\n    }(i, v), p = b.indexOf(_), m = x.indexOf(k), {\n      first: w(0),\n      last: w(v - 1),\n      widest: w(p),\n      highest: w(m)\n    };\n  }\n\n  function fn(t) {\n    return t.drawTicks ? t.tickMarkLength : 0;\n  }\n\n  function gn(t) {\n    var e, n;\n    return t.display ? (e = H.options._parseFont(t), n = H.options.toPadding(t.padding), e.lineHeight + n.height) : 0;\n  }\n\n  function pn(t, e) {\n    return H.extend(H.options._parseFont({\n      fontFamily: un(e.fontFamily, t.fontFamily),\n      fontSize: un(e.fontSize, t.fontSize),\n      fontStyle: un(e.fontStyle, t.fontStyle),\n      lineHeight: un(e.lineHeight, t.lineHeight)\n    }), {\n      color: H.options.resolve([e.fontColor, t.fontColor, N.global.defaultFontColor])\n    });\n  }\n\n  function mn(t) {\n    var e = pn(t, t.minor);\n    return {\n      minor: e,\n      major: t.major.enabled ? pn(t, t.major) : e\n    };\n  }\n\n  function vn(t) {\n    var e,\n        n,\n        i,\n        a = [];\n\n    for (n = 0, i = t.length; n < i; ++n) {\n      void 0 !== (e = t[n])._index && a.push(e);\n    }\n\n    return a;\n  }\n\n  function bn(t, e, n, i) {\n    var a,\n        r,\n        o,\n        s,\n        l = un(n, 0),\n        u = Math.min(un(i, t.length), t.length),\n        d = 0;\n\n    for (e = Math.ceil(e), i && (e = (a = i - n) / Math.floor(a / e)), s = l; s < 0;) {\n      d++, s = Math.round(l + d * e);\n    }\n\n    for (r = Math.max(l, 0); r < u; r++) {\n      o = t[r], r === s ? (o._index = r, d++, s = Math.round(l + d * e)) : delete o.label;\n    }\n  }\n\n  N._set(\"scale\", {\n    display: !0,\n    position: \"left\",\n    offset: !1,\n    gridLines: {\n      display: !0,\n      color: \"rgba(0,0,0,0.1)\",\n      lineWidth: 1,\n      drawBorder: !0,\n      drawOnChartArea: !0,\n      drawTicks: !0,\n      tickMarkLength: 10,\n      zeroLineWidth: 1,\n      zeroLineColor: \"rgba(0,0,0,0.25)\",\n      zeroLineBorderDash: [],\n      zeroLineBorderDashOffset: 0,\n      offsetGridLines: !1,\n      borderDash: [],\n      borderDashOffset: 0\n    },\n    scaleLabel: {\n      display: !1,\n      labelString: \"\",\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    ticks: {\n      beginAtZero: !1,\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: !1,\n      padding: 0,\n      reverse: !1,\n      display: !0,\n      autoSkip: !0,\n      autoSkipPadding: 0,\n      labelOffset: 0,\n      callback: on.formatters.values,\n      minor: {},\n      major: {}\n    }\n  });\n\n  var xn = K.extend({\n    zeroLineIndex: 0,\n    getPadding: function getPadding() {\n      return {\n        left: this.paddingLeft || 0,\n        top: this.paddingTop || 0,\n        right: this.paddingRight || 0,\n        bottom: this.paddingBottom || 0\n      };\n    },\n    getTicks: function getTicks() {\n      return this._ticks;\n    },\n    _getLabels: function _getLabels() {\n      var t = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];\n    },\n    mergeTicksOptions: function mergeTicksOptions() {},\n    beforeUpdate: function beforeUpdate() {\n      H.callback(this.options.beforeUpdate, [this]);\n    },\n    update: function update(t, e, n) {\n      var i,\n          a,\n          r,\n          o,\n          s,\n          l = this,\n          u = l.options.ticks,\n          d = u.sampleSize;\n      if (l.beforeUpdate(), l.maxWidth = t, l.maxHeight = e, l.margins = H.extend({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, n), l._ticks = null, l.ticks = null, l._labelSizes = null, l._maxLabelLines = 0, l.longestLabelWidth = 0, l.longestTextCache = l.longestTextCache || {}, l._gridLineItems = null, l._labelItems = null, l.beforeSetDimensions(), l.setDimensions(), l.afterSetDimensions(), l.beforeDataLimits(), l.determineDataLimits(), l.afterDataLimits(), l.beforeBuildTicks(), o = l.buildTicks() || [], (!(o = l.afterBuildTicks(o) || o) || !o.length) && l.ticks) for (o = [], i = 0, a = l.ticks.length; i < a; ++i) {\n        o.push({\n          value: l.ticks[i],\n          major: !1\n        });\n      }\n      return l._ticks = o, s = d < o.length, r = l._convertTicksToLabels(s ? function (t, e) {\n        for (var n = [], i = t.length / e, a = 0, r = t.length; a < r; a += i) {\n          n.push(t[Math.floor(a)]);\n        }\n\n        return n;\n      }(o, d) : o), l._configure(), l.beforeCalculateTickRotation(), l.calculateTickRotation(), l.afterCalculateTickRotation(), l.beforeFit(), l.fit(), l.afterFit(), l._ticksToDraw = u.display && (u.autoSkip || \"auto\" === u.source) ? l._autoSkip(o) : o, s && (r = l._convertTicksToLabels(l._ticksToDraw)), l.ticks = r, l.afterUpdate(), l.minSize;\n    },\n    _configure: function _configure() {\n      var t,\n          e,\n          n = this,\n          i = n.options.ticks.reverse;\n      n.isHorizontal() ? (t = n.left, e = n.right) : (t = n.top, e = n.bottom, i = !i), n._startPixel = t, n._endPixel = e, n._reversePixels = i, n._length = e - t;\n    },\n    afterUpdate: function afterUpdate() {\n      H.callback(this.options.afterUpdate, [this]);\n    },\n    beforeSetDimensions: function beforeSetDimensions() {\n      H.callback(this.options.beforeSetDimensions, [this]);\n    },\n    setDimensions: function setDimensions() {\n      var t = this;\n      t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;\n    },\n    afterSetDimensions: function afterSetDimensions() {\n      H.callback(this.options.afterSetDimensions, [this]);\n    },\n    beforeDataLimits: function beforeDataLimits() {\n      H.callback(this.options.beforeDataLimits, [this]);\n    },\n    determineDataLimits: H.noop,\n    afterDataLimits: function afterDataLimits() {\n      H.callback(this.options.afterDataLimits, [this]);\n    },\n    beforeBuildTicks: function beforeBuildTicks() {\n      H.callback(this.options.beforeBuildTicks, [this]);\n    },\n    buildTicks: H.noop,\n    afterBuildTicks: function afterBuildTicks(t) {\n      var e = this;\n      return sn(t) && t.length ? H.callback(e.options.afterBuildTicks, [e, t]) : (e.ticks = H.callback(e.options.afterBuildTicks, [e, e.ticks]) || e.ticks, t);\n    },\n    beforeTickToLabelConversion: function beforeTickToLabelConversion() {\n      H.callback(this.options.beforeTickToLabelConversion, [this]);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var t = this.options.ticks;\n      this.ticks = this.ticks.map(t.userCallback || t.callback, this);\n    },\n    afterTickToLabelConversion: function afterTickToLabelConversion() {\n      H.callback(this.options.afterTickToLabelConversion, [this]);\n    },\n    beforeCalculateTickRotation: function beforeCalculateTickRotation() {\n      H.callback(this.options.beforeCalculateTickRotation, [this]);\n    },\n    calculateTickRotation: function calculateTickRotation() {\n      var t,\n          e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s = this,\n          l = s.options,\n          u = l.ticks,\n          d = s.getTicks().length,\n          h = u.minRotation || 0,\n          c = u.maxRotation,\n          f = h;\n      !s._isVisible() || !u.display || h >= c || d <= 1 || !s.isHorizontal() ? s.labelRotation = h : (e = (t = s._getLabelSizes()).widest.width, n = t.highest.height - t.highest.offset, i = Math.min(s.maxWidth, s.chart.width - e), e + 6 > (a = l.offset ? s.maxWidth / d : i / (d - 1)) && (a = i / (d - (l.offset ? .5 : 1)), r = s.maxHeight - fn(l.gridLines) - u.padding - gn(l.scaleLabel), o = Math.sqrt(e * e + n * n), f = H.toDegrees(Math.min(Math.asin(Math.min((t.highest.height + 6) / a, 1)), Math.asin(Math.min(r / o, 1)) - Math.asin(n / o))), f = Math.max(h, Math.min(c, f))), s.labelRotation = f);\n    },\n    afterCalculateTickRotation: function afterCalculateTickRotation() {\n      H.callback(this.options.afterCalculateTickRotation, [this]);\n    },\n    beforeFit: function beforeFit() {\n      H.callback(this.options.beforeFit, [this]);\n    },\n    fit: function fit() {\n      var t = this,\n          e = t.minSize = {\n        width: 0,\n        height: 0\n      },\n          n = t.chart,\n          i = t.options,\n          a = i.ticks,\n          r = i.scaleLabel,\n          o = i.gridLines,\n          s = t._isVisible(),\n          l = \"bottom\" === i.position,\n          u = t.isHorizontal();\n\n      if (u ? e.width = t.maxWidth : s && (e.width = fn(o) + gn(r)), u ? s && (e.height = fn(o) + gn(r)) : e.height = t.maxHeight, a.display && s) {\n        var d = mn(a),\n            h = t._getLabelSizes(),\n            c = h.first,\n            f = h.last,\n            g = h.widest,\n            p = h.highest,\n            m = .4 * d.minor.lineHeight,\n            v = a.padding;\n\n        if (u) {\n          var b = 0 !== t.labelRotation,\n              x = H.toRadians(t.labelRotation),\n              y = Math.cos(x),\n              _ = Math.sin(x),\n              k = _ * g.width + y * (p.height - (b ? p.offset : 0)) + (b ? 0 : m);\n\n          e.height = Math.min(t.maxHeight, e.height + k + v);\n          var w,\n              M,\n              S = t.getPixelForTick(0) - t.left,\n              C = t.right - t.getPixelForTick(t.getTicks().length - 1);\n          b ? (w = l ? y * c.width + _ * c.offset : _ * (c.height - c.offset), M = l ? _ * (f.height - f.offset) : y * f.width + _ * f.offset) : (w = c.width / 2, M = f.width / 2), t.paddingLeft = Math.max((w - S) * t.width / (t.width - S), 0) + 3, t.paddingRight = Math.max((M - C) * t.width / (t.width - C), 0) + 3;\n        } else {\n          var P = a.mirror ? 0 : g.width + v + m;\n          e.width = Math.min(t.maxWidth, e.width + P), t.paddingTop = c.height / 2, t.paddingBottom = f.height / 2;\n        }\n      }\n\n      t.handleMargins(), u ? (t.width = t._length = n.width - t.margins.left - t.margins.right, t.height = e.height) : (t.width = e.width, t.height = t._length = n.height - t.margins.top - t.margins.bottom);\n    },\n    handleMargins: function handleMargins() {\n      var t = this;\n      t.margins && (t.margins.left = Math.max(t.paddingLeft, t.margins.left), t.margins.top = Math.max(t.paddingTop, t.margins.top), t.margins.right = Math.max(t.paddingRight, t.margins.right), t.margins.bottom = Math.max(t.paddingBottom, t.margins.bottom));\n    },\n    afterFit: function afterFit() {\n      H.callback(this.options.afterFit, [this]);\n    },\n    isHorizontal: function isHorizontal() {\n      var t = this.options.position;\n      return \"top\" === t || \"bottom\" === t;\n    },\n    isFullWidth: function isFullWidth() {\n      return this.options.fullWidth;\n    },\n    getRightValue: function getRightValue(t) {\n      if (ln(t)) return NaN;\n      if ((\"number\" == typeof t || t instanceof Number) && !isFinite(t)) return NaN;\n      if (t) if (this.isHorizontal()) {\n        if (void 0 !== t.x) return this.getRightValue(t.x);\n      } else if (void 0 !== t.y) return this.getRightValue(t.y);\n      return t;\n    },\n    _convertTicksToLabels: function _convertTicksToLabels(t) {\n      var e,\n          n,\n          i,\n          a = this;\n\n      for (a.ticks = t.map(function (t) {\n        return t.value;\n      }), a.beforeTickToLabelConversion(), e = a.convertTicksToLabels(t) || a.ticks, a.afterTickToLabelConversion(), n = 0, i = t.length; n < i; ++n) {\n        t[n].label = e[n];\n      }\n\n      return e;\n    },\n    _getLabelSizes: function _getLabelSizes() {\n      var t = this,\n          e = t._labelSizes;\n      return e || (t._labelSizes = e = cn(t.ctx, mn(t.options.ticks), t.getTicks(), t.longestTextCache), t.longestLabelWidth = e.widest.width), e;\n    },\n    _parseValue: function _parseValue(t) {\n      var e, n, i, a;\n      return sn(t) ? (e = +this.getRightValue(t[0]), n = +this.getRightValue(t[1]), i = Math.min(e, n), a = Math.max(e, n)) : (e = void 0, n = t = +this.getRightValue(t), i = t, a = t), {\n        min: i,\n        max: a,\n        start: e,\n        end: n\n      };\n    },\n    _getScaleLabel: function _getScaleLabel(t) {\n      var e = this._parseValue(t);\n\n      return void 0 !== e.start ? \"[\" + e.start + \", \" + e.end + \"]\" : +this.getRightValue(t);\n    },\n    getLabelForIndex: H.noop,\n    getPixelForValue: H.noop,\n    getValueForPixel: H.noop,\n    getPixelForTick: function getPixelForTick(t) {\n      var e = this.options.offset,\n          n = this._ticks.length,\n          i = 1 / Math.max(n - (e ? 0 : 1), 1);\n      return t < 0 || t > n - 1 ? null : this.getPixelForDecimal(t * i + (e ? i / 2 : 0));\n    },\n    getPixelForDecimal: function getPixelForDecimal(t) {\n      return this._reversePixels && (t = 1 - t), this._startPixel + t * this._length;\n    },\n    getDecimalForPixel: function getDecimalForPixel(t) {\n      var e = (t - this._startPixel) / this._length;\n      return this._reversePixels ? 1 - e : e;\n    },\n    getBasePixel: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    },\n    getBaseValue: function getBaseValue() {\n      var t = this.min,\n          e = this.max;\n      return this.beginAtZero ? 0 : t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0;\n    },\n    _autoSkip: function _autoSkip(t) {\n      var e,\n          n,\n          i,\n          a,\n          r = this.options.ticks,\n          o = this._length,\n          s = r.maxTicksLimit || o / this._tickSize() + 1,\n          l = r.major.enabled ? function (t) {\n        var e,\n            n,\n            i = [];\n\n        for (e = 0, n = t.length; e < n; e++) {\n          t[e].major && i.push(e);\n        }\n\n        return i;\n      }(t) : [],\n          u = l.length,\n          d = l[0],\n          h = l[u - 1];\n      if (u > s) return function (t, e, n) {\n        var i,\n            a,\n            r = 0,\n            o = e[0];\n\n        for (n = Math.ceil(n), i = 0; i < t.length; i++) {\n          a = t[i], i === o ? (a._index = i, o = e[++r * n]) : delete a.label;\n        }\n      }(t, l, u / s), vn(t);\n\n      if (i = function (t, e, n, i) {\n        var a,\n            r,\n            o,\n            s,\n            l = function (t) {\n          var e,\n              n,\n              i = t.length;\n          if (i < 2) return !1;\n\n          for (n = t[0], e = 1; e < i; ++e) {\n            if (t[e] - t[e - 1] !== n) return !1;\n          }\n\n          return n;\n        }(t),\n            u = (e.length - 1) / i;\n\n        if (!l) return Math.max(u, 1);\n\n        for (o = 0, s = (a = H.math._factorize(l)).length - 1; o < s; o++) {\n          if ((r = a[o]) > u) return r;\n        }\n\n        return Math.max(u, 1);\n      }(l, t, 0, s), u > 0) {\n        for (e = 0, n = u - 1; e < n; e++) {\n          bn(t, i, l[e], l[e + 1]);\n        }\n\n        return a = u > 1 ? (h - d) / (u - 1) : null, bn(t, i, H.isNullOrUndef(a) ? 0 : d - a, d), bn(t, i, h, H.isNullOrUndef(a) ? t.length : h + a), vn(t);\n      }\n\n      return bn(t, i), vn(t);\n    },\n    _tickSize: function _tickSize() {\n      var t = this.options.ticks,\n          e = H.toRadians(this.labelRotation),\n          n = Math.abs(Math.cos(e)),\n          i = Math.abs(Math.sin(e)),\n          a = this._getLabelSizes(),\n          r = t.autoSkipPadding || 0,\n          o = a ? a.widest.width + r : 0,\n          s = a ? a.highest.height + r : 0;\n\n      return this.isHorizontal() ? s * n > o * i ? o / n : s / i : s * i < o * n ? s / n : o / i;\n    },\n    _isVisible: function _isVisible() {\n      var t,\n          e,\n          n,\n          i = this.chart,\n          a = this.options.display;\n      if (\"auto\" !== a) return !!a;\n\n      for (t = 0, e = i.data.datasets.length; t < e; ++t) {\n        if (i.isDatasetVisible(t) && ((n = i.getDatasetMeta(t)).xAxisID === this.id || n.yAxisID === this.id)) return !0;\n      }\n\n      return !1;\n    },\n    _computeGridLineItems: function _computeGridLineItems(t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u,\n          d,\n          h,\n          c,\n          f,\n          g,\n          p,\n          m,\n          v,\n          b = this,\n          x = b.chart,\n          y = b.options,\n          _ = y.gridLines,\n          k = y.position,\n          w = _.offsetGridLines,\n          M = b.isHorizontal(),\n          S = b._ticksToDraw,\n          C = S.length + (w ? 1 : 0),\n          P = fn(_),\n          A = [],\n          D = _.drawBorder ? dn(_.lineWidth, 0, 0) : 0,\n          T = D / 2,\n          I = H._alignPixel,\n          F = function F(t) {\n        return I(x, t, D);\n      };\n\n      for (\"top\" === k ? (e = F(b.bottom), s = b.bottom - P, u = e - T, h = F(t.top) + T, f = t.bottom) : \"bottom\" === k ? (e = F(b.top), h = t.top, f = F(t.bottom) - T, s = e + T, u = b.top + P) : \"left\" === k ? (e = F(b.right), o = b.right - P, l = e - T, d = F(t.left) + T, c = t.right) : (e = F(b.left), d = t.left, c = F(t.right) - T, o = e + T, l = b.left + P), n = 0; n < C; ++n) {\n        i = S[n] || {}, ln(i.label) && n < S.length || (n === b.zeroLineIndex && y.offset === w ? (g = _.zeroLineWidth, p = _.zeroLineColor, m = _.zeroLineBorderDash || [], v = _.zeroLineBorderDashOffset || 0) : (g = dn(_.lineWidth, n, 1), p = dn(_.color, n, \"rgba(0,0,0,0.1)\"), m = _.borderDash || [], v = _.borderDashOffset || 0), void 0 !== (a = hn(b, i._index || n, w)) && (r = I(x, a, g), M ? o = l = d = c = r : s = u = h = f = r, A.push({\n          tx1: o,\n          ty1: s,\n          tx2: l,\n          ty2: u,\n          x1: d,\n          y1: h,\n          x2: c,\n          y2: f,\n          width: g,\n          color: p,\n          borderDash: m,\n          borderDashOffset: v\n        })));\n      }\n\n      return A.ticksLength = C, A.borderValue = e, A;\n    },\n    _computeLabelItems: function _computeLabelItems() {\n      var t,\n          e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u,\n          d,\n          h,\n          c = this,\n          f = c.options,\n          g = f.ticks,\n          p = f.position,\n          m = g.mirror,\n          v = c.isHorizontal(),\n          b = c._ticksToDraw,\n          x = mn(g),\n          y = g.padding,\n          _ = fn(f.gridLines),\n          k = -H.toRadians(c.labelRotation),\n          w = [];\n\n      for (\"top\" === p ? (r = c.bottom - _ - y, o = k ? \"left\" : \"center\") : \"bottom\" === p ? (r = c.top + _ + y, o = k ? \"right\" : \"center\") : \"left\" === p ? (a = c.right - (m ? 0 : _) - y, o = m ? \"left\" : \"right\") : (a = c.left + (m ? 0 : _) + y, o = m ? \"right\" : \"left\"), t = 0, e = b.length; t < e; ++t) {\n        i = (n = b[t]).label, ln(i) || (s = c.getPixelForTick(n._index || t) + g.labelOffset, u = (l = n.major ? x.major : x.minor).lineHeight, d = sn(i) ? i.length : 1, v ? (a = s, h = \"top\" === p ? ((k ? 1 : .5) - d) * u : (k ? 0 : .5) * u) : (r = s, h = (1 - d) * u / 2), w.push({\n          x: a,\n          y: r,\n          rotation: k,\n          label: i,\n          font: l,\n          textOffset: h,\n          textAlign: o\n        }));\n      }\n\n      return w;\n    },\n    _drawGrid: function _drawGrid(t) {\n      var e = this,\n          n = e.options.gridLines;\n\n      if (n.display) {\n        var i,\n            a,\n            r,\n            o,\n            s,\n            l = e.ctx,\n            u = e.chart,\n            d = H._alignPixel,\n            h = n.drawBorder ? dn(n.lineWidth, 0, 0) : 0,\n            c = e._gridLineItems || (e._gridLineItems = e._computeGridLineItems(t));\n\n        for (r = 0, o = c.length; r < o; ++r) {\n          i = (s = c[r]).width, a = s.color, i && a && (l.save(), l.lineWidth = i, l.strokeStyle = a, l.setLineDash && (l.setLineDash(s.borderDash), l.lineDashOffset = s.borderDashOffset), l.beginPath(), n.drawTicks && (l.moveTo(s.tx1, s.ty1), l.lineTo(s.tx2, s.ty2)), n.drawOnChartArea && (l.moveTo(s.x1, s.y1), l.lineTo(s.x2, s.y2)), l.stroke(), l.restore());\n        }\n\n        if (h) {\n          var f,\n              g,\n              p,\n              m,\n              v = h,\n              b = dn(n.lineWidth, c.ticksLength - 1, 1),\n              x = c.borderValue;\n          e.isHorizontal() ? (f = d(u, e.left, v) - v / 2, g = d(u, e.right, b) + b / 2, p = m = x) : (p = d(u, e.top, v) - v / 2, m = d(u, e.bottom, b) + b / 2, f = g = x), l.lineWidth = h, l.strokeStyle = dn(n.color, 0), l.beginPath(), l.moveTo(f, p), l.lineTo(g, m), l.stroke();\n        }\n      }\n    },\n    _drawLabels: function _drawLabels() {\n      var t = this;\n\n      if (t.options.ticks.display) {\n        var e,\n            n,\n            i,\n            a,\n            r,\n            o,\n            s,\n            l,\n            u = t.ctx,\n            d = t._labelItems || (t._labelItems = t._computeLabelItems());\n\n        for (e = 0, i = d.length; e < i; ++e) {\n          if (o = (r = d[e]).font, u.save(), u.translate(r.x, r.y), u.rotate(r.rotation), u.font = o.string, u.fillStyle = o.color, u.textBaseline = \"middle\", u.textAlign = r.textAlign, s = r.label, l = r.textOffset, sn(s)) for (n = 0, a = s.length; n < a; ++n) {\n            u.fillText(\"\" + s[n], 0, l), l += o.lineHeight;\n          } else u.fillText(s, 0, l);\n          u.restore();\n        }\n      }\n    },\n    _drawTitle: function _drawTitle() {\n      var t = this,\n          e = t.ctx,\n          n = t.options,\n          i = n.scaleLabel;\n\n      if (i.display) {\n        var a,\n            r,\n            o = un(i.fontColor, N.global.defaultFontColor),\n            s = H.options._parseFont(i),\n            l = H.options.toPadding(i.padding),\n            u = s.lineHeight / 2,\n            d = n.position,\n            h = 0;\n\n        if (t.isHorizontal()) a = t.left + t.width / 2, r = \"bottom\" === d ? t.bottom - u - l.bottom : t.top + u + l.top;else {\n          var c = \"left\" === d;\n          a = c ? t.left + u + l.top : t.right - u - l.top, r = t.top + t.height / 2, h = c ? -.5 * Math.PI : .5 * Math.PI;\n        }\n        e.save(), e.translate(a, r), e.rotate(h), e.textAlign = \"center\", e.textBaseline = \"middle\", e.fillStyle = o, e.font = s.string, e.fillText(i.labelString, 0, 0), e.restore();\n      }\n    },\n    draw: function draw(t) {\n      this._isVisible() && (this._drawGrid(t), this._drawTitle(), this._drawLabels());\n    },\n    _layers: function _layers() {\n      var t = this,\n          e = t.options,\n          n = e.ticks && e.ticks.z || 0,\n          i = e.gridLines && e.gridLines.z || 0;\n      return t._isVisible() && n !== i && t.draw === t._draw ? [{\n        z: i,\n        draw: function draw() {\n          t._drawGrid.apply(t, arguments), t._drawTitle.apply(t, arguments);\n        }\n      }, {\n        z: n,\n        draw: function draw() {\n          t._drawLabels.apply(t, arguments);\n        }\n      }] : [{\n        z: n,\n        draw: function draw() {\n          t.draw.apply(t, arguments);\n        }\n      }];\n    },\n    _getMatchingVisibleMetas: function _getMatchingVisibleMetas(t) {\n      var e = this,\n          n = e.isHorizontal();\n      return e.chart._getSortedVisibleDatasetMetas().filter(function (i) {\n        return (!t || i.type === t) && (n ? i.xAxisID === e.id : i.yAxisID === e.id);\n      });\n    }\n  });\n  xn.prototype._draw = xn.prototype.draw;\n  var yn = xn,\n      _n = H.isNullOrUndef,\n      kn = yn.extend({\n    determineDataLimits: function determineDataLimits() {\n      var t,\n          e = this,\n          n = e._getLabels(),\n          i = e.options.ticks,\n          a = i.min,\n          r = i.max,\n          o = 0,\n          s = n.length - 1;\n\n      void 0 !== a && (t = n.indexOf(a)) >= 0 && (o = t), void 0 !== r && (t = n.indexOf(r)) >= 0 && (s = t), e.minIndex = o, e.maxIndex = s, e.min = n[o], e.max = n[s];\n    },\n    buildTicks: function buildTicks() {\n      var t = this._getLabels(),\n          e = this.minIndex,\n          n = this.maxIndex;\n\n      this.ticks = 0 === e && n === t.length - 1 ? t : t.slice(e, n + 1);\n    },\n    getLabelForIndex: function getLabelForIndex(t, e) {\n      var n = this.chart;\n      return n.getDatasetMeta(e).controller._getValueScaleId() === this.id ? this.getRightValue(n.data.datasets[e].data[t]) : this._getLabels()[t];\n    },\n    _configure: function _configure() {\n      var t = this,\n          e = t.options.offset,\n          n = t.ticks;\n      yn.prototype._configure.call(t), t.isHorizontal() || (t._reversePixels = !t._reversePixels), n && (t._startValue = t.minIndex - (e ? .5 : 0), t._valueRange = Math.max(n.length - (e ? 0 : 1), 1));\n    },\n    getPixelForValue: function getPixelForValue(t, e, n) {\n      var i,\n          a,\n          r,\n          o = this;\n      return _n(e) || _n(n) || (t = o.chart.data.datasets[n].data[e]), _n(t) || (i = o.isHorizontal() ? t.x : t.y), (void 0 !== i || void 0 !== t && isNaN(e)) && (a = o._getLabels(), t = H.valueOrDefault(i, t), e = -1 !== (r = a.indexOf(t)) ? r : e, isNaN(e) && (e = t)), o.getPixelForDecimal((e - o._startValue) / o._valueRange);\n    },\n    getPixelForTick: function getPixelForTick(t) {\n      var e = this.ticks;\n      return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t], t + this.minIndex);\n    },\n    getValueForPixel: function getValueForPixel(t) {\n      var e = Math.round(this._startValue + this.getDecimalForPixel(t) * this._valueRange);\n      return Math.min(Math.max(e, 0), this.ticks.length - 1);\n    },\n    getBasePixel: function getBasePixel() {\n      return this.bottom;\n    }\n  }),\n      wn = {\n    position: \"bottom\"\n  };\n  kn._defaults = wn;\n  var Mn = H.noop,\n      Sn = H.isNullOrUndef;\n  var Cn = yn.extend({\n    getRightValue: function getRightValue(t) {\n      return \"string\" == typeof t ? +t : yn.prototype.getRightValue.call(this, t);\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var t = this,\n          e = t.options.ticks;\n\n      if (e.beginAtZero) {\n        var n = H.sign(t.min),\n            i = H.sign(t.max);\n        n < 0 && i < 0 ? t.max = 0 : n > 0 && i > 0 && (t.min = 0);\n      }\n\n      var a = void 0 !== e.min || void 0 !== e.suggestedMin,\n          r = void 0 !== e.max || void 0 !== e.suggestedMax;\n      void 0 !== e.min ? t.min = e.min : void 0 !== e.suggestedMin && (null === t.min ? t.min = e.suggestedMin : t.min = Math.min(t.min, e.suggestedMin)), void 0 !== e.max ? t.max = e.max : void 0 !== e.suggestedMax && (null === t.max ? t.max = e.suggestedMax : t.max = Math.max(t.max, e.suggestedMax)), a !== r && t.min >= t.max && (a ? t.max = t.min + 1 : t.min = t.max - 1), t.min === t.max && (t.max++, e.beginAtZero || t.min--);\n    },\n    getTickLimit: function getTickLimit() {\n      var t,\n          e = this.options.ticks,\n          n = e.stepSize,\n          i = e.maxTicksLimit;\n      return n ? t = Math.ceil(this.max / n) - Math.floor(this.min / n) + 1 : (t = this._computeTickLimit(), i = i || 11), i && (t = Math.min(i, t)), t;\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    },\n    handleDirectionalChanges: Mn,\n    buildTicks: function buildTicks() {\n      var t = this,\n          e = t.options.ticks,\n          n = t.getTickLimit(),\n          i = {\n        maxTicks: n = Math.max(2, n),\n        min: e.min,\n        max: e.max,\n        precision: e.precision,\n        stepSize: H.valueOrDefault(e.fixedStepSize, e.stepSize)\n      },\n          a = t.ticks = function (t, e) {\n        var n,\n            i,\n            a,\n            r,\n            o = [],\n            s = t.stepSize,\n            l = s || 1,\n            u = t.maxTicks - 1,\n            d = t.min,\n            h = t.max,\n            c = t.precision,\n            f = e.min,\n            g = e.max,\n            p = H.niceNum((g - f) / u / l) * l;\n        if (p < 1e-14 && Sn(d) && Sn(h)) return [f, g];\n        (r = Math.ceil(g / p) - Math.floor(f / p)) > u && (p = H.niceNum(r * p / u / l) * l), s || Sn(c) ? n = Math.pow(10, H._decimalPlaces(p)) : (n = Math.pow(10, c), p = Math.ceil(p * n) / n), i = Math.floor(f / p) * p, a = Math.ceil(g / p) * p, s && (!Sn(d) && H.almostWhole(d / p, p / 1e3) && (i = d), !Sn(h) && H.almostWhole(h / p, p / 1e3) && (a = h)), r = (a - i) / p, r = H.almostEquals(r, Math.round(r), p / 1e3) ? Math.round(r) : Math.ceil(r), i = Math.round(i * n) / n, a = Math.round(a * n) / n, o.push(Sn(d) ? i : d);\n\n        for (var m = 1; m < r; ++m) {\n          o.push(Math.round((i + m * p) * n) / n);\n        }\n\n        return o.push(Sn(h) ? a : h), o;\n      }(i, t);\n\n      t.handleDirectionalChanges(), t.max = H.max(a), t.min = H.min(a), e.reverse ? (a.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max);\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var t = this;\n      t.ticksAsNumbers = t.ticks.slice(), t.zeroLineIndex = t.ticks.indexOf(0), yn.prototype.convertTicksToLabels.call(t);\n    },\n    _configure: function _configure() {\n      var t,\n          e = this,\n          n = e.getTicks(),\n          i = e.min,\n          a = e.max;\n      yn.prototype._configure.call(e), e.options.offset && n.length && (i -= t = (a - i) / Math.max(n.length - 1, 1) / 2, a += t), e._startValue = i, e._endValue = a, e._valueRange = a - i;\n    }\n  }),\n      Pn = {\n    position: \"left\",\n    ticks: {\n      callback: on.formatters.linear\n    }\n  };\n\n  function An(t, e, n, i) {\n    var a,\n        r,\n        o = t.options,\n        s = function (t, e, n) {\n      var i = [n.type, void 0 === e && void 0 === n.stack ? n.index : \"\", n.stack].join(\".\");\n      return void 0 === t[i] && (t[i] = {\n        pos: [],\n        neg: []\n      }), t[i];\n    }(e, o.stacked, n),\n        l = s.pos,\n        u = s.neg,\n        d = i.length;\n\n    for (a = 0; a < d; ++a) {\n      r = t._parseValue(i[a]), isNaN(r.min) || isNaN(r.max) || n.data[a].hidden || (l[a] = l[a] || 0, u[a] = u[a] || 0, o.relativePoints ? l[a] = 100 : r.min < 0 || r.max < 0 ? u[a] += r.min : l[a] += r.max);\n    }\n  }\n\n  function Dn(t, e, n) {\n    var i,\n        a,\n        r = n.length;\n\n    for (i = 0; i < r; ++i) {\n      a = t._parseValue(n[i]), isNaN(a.min) || isNaN(a.max) || e.data[i].hidden || (t.min = Math.min(t.min, a.min), t.max = Math.max(t.max, a.max));\n    }\n  }\n\n  var Tn = Cn.extend({\n    determineDataLimits: function determineDataLimits() {\n      var t,\n          e,\n          n,\n          i,\n          a = this,\n          r = a.options,\n          o = a.chart.data.datasets,\n          s = a._getMatchingVisibleMetas(),\n          l = r.stacked,\n          u = {},\n          d = s.length;\n\n      if (a.min = Number.POSITIVE_INFINITY, a.max = Number.NEGATIVE_INFINITY, void 0 === l) for (t = 0; !l && t < d; ++t) {\n        l = void 0 !== (e = s[t]).stack;\n      }\n\n      for (t = 0; t < d; ++t) {\n        n = o[(e = s[t]).index].data, l ? An(a, u, e, n) : Dn(a, e, n);\n      }\n\n      H.each(u, function (t) {\n        i = t.pos.concat(t.neg), a.min = Math.min(a.min, H.min(i)), a.max = Math.max(a.max, H.max(i));\n      }), a.min = H.isFinite(a.min) && !isNaN(a.min) ? a.min : 0, a.max = H.isFinite(a.max) && !isNaN(a.max) ? a.max : 1, a.handleTickRangeOptions();\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      var t;\n      return this.isHorizontal() ? Math.ceil(this.width / 40) : (t = H.options._parseFont(this.options.ticks), Math.ceil(this.height / t.lineHeight));\n    },\n    handleDirectionalChanges: function handleDirectionalChanges() {\n      this.isHorizontal() || this.ticks.reverse();\n    },\n    getLabelForIndex: function getLabelForIndex(t, e) {\n      return this._getScaleLabel(this.chart.data.datasets[e].data[t]);\n    },\n    getPixelForValue: function getPixelForValue(t) {\n      return this.getPixelForDecimal((+this.getRightValue(t) - this._startValue) / this._valueRange);\n    },\n    getValueForPixel: function getValueForPixel(t) {\n      return this._startValue + this.getDecimalForPixel(t) * this._valueRange;\n    },\n    getPixelForTick: function getPixelForTick(t) {\n      var e = this.ticksAsNumbers;\n      return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t]);\n    }\n  }),\n      In = Pn;\n  Tn._defaults = In;\n  var Fn = H.valueOrDefault,\n      On = H.math.log10;\n  var Ln = {\n    position: \"left\",\n    ticks: {\n      callback: on.formatters.logarithmic\n    }\n  };\n\n  function Rn(t, e) {\n    return H.isFinite(t) && t >= 0 ? t : e;\n  }\n\n  var zn = yn.extend({\n    determineDataLimits: function determineDataLimits() {\n      var t,\n          e,\n          n,\n          i,\n          a,\n          r,\n          o = this,\n          s = o.options,\n          l = o.chart,\n          u = l.data.datasets,\n          d = o.isHorizontal();\n\n      function h(t) {\n        return d ? t.xAxisID === o.id : t.yAxisID === o.id;\n      }\n\n      o.min = Number.POSITIVE_INFINITY, o.max = Number.NEGATIVE_INFINITY, o.minNotZero = Number.POSITIVE_INFINITY;\n      var c = s.stacked;\n      if (void 0 === c) for (t = 0; t < u.length; t++) {\n        if (e = l.getDatasetMeta(t), l.isDatasetVisible(t) && h(e) && void 0 !== e.stack) {\n          c = !0;\n          break;\n        }\n      }\n\n      if (s.stacked || c) {\n        var f = {};\n\n        for (t = 0; t < u.length; t++) {\n          var g = [(e = l.getDatasetMeta(t)).type, void 0 === s.stacked && void 0 === e.stack ? t : \"\", e.stack].join(\".\");\n          if (l.isDatasetVisible(t) && h(e)) for (void 0 === f[g] && (f[g] = []), a = 0, r = (i = u[t].data).length; a < r; a++) {\n            var p = f[g];\n            n = o._parseValue(i[a]), isNaN(n.min) || isNaN(n.max) || e.data[a].hidden || n.min < 0 || n.max < 0 || (p[a] = p[a] || 0, p[a] += n.max);\n          }\n        }\n\n        H.each(f, function (t) {\n          if (t.length > 0) {\n            var e = H.min(t),\n                n = H.max(t);\n            o.min = Math.min(o.min, e), o.max = Math.max(o.max, n);\n          }\n        });\n      } else for (t = 0; t < u.length; t++) {\n        if (e = l.getDatasetMeta(t), l.isDatasetVisible(t) && h(e)) for (a = 0, r = (i = u[t].data).length; a < r; a++) {\n          n = o._parseValue(i[a]), isNaN(n.min) || isNaN(n.max) || e.data[a].hidden || n.min < 0 || n.max < 0 || (o.min = Math.min(n.min, o.min), o.max = Math.max(n.max, o.max), 0 !== n.min && (o.minNotZero = Math.min(n.min, o.minNotZero)));\n        }\n      }\n\n      o.min = H.isFinite(o.min) ? o.min : null, o.max = H.isFinite(o.max) ? o.max : null, o.minNotZero = H.isFinite(o.minNotZero) ? o.minNotZero : null, this.handleTickRangeOptions();\n    },\n    handleTickRangeOptions: function handleTickRangeOptions() {\n      var t = this,\n          e = t.options.ticks;\n      t.min = Rn(e.min, t.min), t.max = Rn(e.max, t.max), t.min === t.max && (0 !== t.min && null !== t.min ? (t.min = Math.pow(10, Math.floor(On(t.min)) - 1), t.max = Math.pow(10, Math.floor(On(t.max)) + 1)) : (t.min = 1, t.max = 10)), null === t.min && (t.min = Math.pow(10, Math.floor(On(t.max)) - 1)), null === t.max && (t.max = 0 !== t.min ? Math.pow(10, Math.floor(On(t.min)) + 1) : 10), null === t.minNotZero && (t.min > 0 ? t.minNotZero = t.min : t.max < 1 ? t.minNotZero = Math.pow(10, Math.floor(On(t.max))) : t.minNotZero = 1);\n    },\n    buildTicks: function buildTicks() {\n      var t = this,\n          e = t.options.ticks,\n          n = !t.isHorizontal(),\n          i = {\n        min: Rn(e.min),\n        max: Rn(e.max)\n      },\n          a = t.ticks = function (t, e) {\n        var n,\n            i,\n            a = [],\n            r = Fn(t.min, Math.pow(10, Math.floor(On(e.min)))),\n            o = Math.floor(On(e.max)),\n            s = Math.ceil(e.max / Math.pow(10, o));\n        0 === r ? (n = Math.floor(On(e.minNotZero)), i = Math.floor(e.minNotZero / Math.pow(10, n)), a.push(r), r = i * Math.pow(10, n)) : (n = Math.floor(On(r)), i = Math.floor(r / Math.pow(10, n)));\n        var l = n < 0 ? Math.pow(10, Math.abs(n)) : 1;\n\n        do {\n          a.push(r), 10 === ++i && (i = 1, l = ++n >= 0 ? 1 : l), r = Math.round(i * Math.pow(10, n) * l) / l;\n        } while (n < o || n === o && i < s);\n\n        var u = Fn(t.max, r);\n        return a.push(u), a;\n      }(i, t);\n\n      t.max = H.max(a), t.min = H.min(a), e.reverse ? (n = !n, t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), n && a.reverse();\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      this.tickValues = this.ticks.slice(), yn.prototype.convertTicksToLabels.call(this);\n    },\n    getLabelForIndex: function getLabelForIndex(t, e) {\n      return this._getScaleLabel(this.chart.data.datasets[e].data[t]);\n    },\n    getPixelForTick: function getPixelForTick(t) {\n      var e = this.tickValues;\n      return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t]);\n    },\n    _getFirstTickValue: function _getFirstTickValue(t) {\n      var e = Math.floor(On(t));\n      return Math.floor(t / Math.pow(10, e)) * Math.pow(10, e);\n    },\n    _configure: function _configure() {\n      var t = this,\n          e = t.min,\n          n = 0;\n      yn.prototype._configure.call(t), 0 === e && (e = t._getFirstTickValue(t.minNotZero), n = Fn(t.options.ticks.fontSize, N.global.defaultFontSize) / t._length), t._startValue = On(e), t._valueOffset = n, t._valueRange = (On(t.max) - On(e)) / (1 - n);\n    },\n    getPixelForValue: function getPixelForValue(t) {\n      var e = this,\n          n = 0;\n      return (t = +e.getRightValue(t)) > e.min && t > 0 && (n = (On(t) - e._startValue) / e._valueRange + e._valueOffset), e.getPixelForDecimal(n);\n    },\n    getValueForPixel: function getValueForPixel(t) {\n      var e = this,\n          n = e.getDecimalForPixel(t);\n      return 0 === n && 0 === e.min ? 0 : Math.pow(10, e._startValue + (n - e._valueOffset) * e._valueRange);\n    }\n  }),\n      Nn = Ln;\n  zn._defaults = Nn;\n  var Bn = H.valueOrDefault,\n      En = H.valueAtIndexOrDefault,\n      Wn = H.options.resolve,\n      Vn = {\n    display: !0,\n    animate: !0,\n    position: \"chartArea\",\n    angleLines: {\n      display: !0,\n      color: \"rgba(0,0,0,0.1)\",\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0\n    },\n    gridLines: {\n      circular: !1\n    },\n    ticks: {\n      showLabelBackdrop: !0,\n      backdropColor: \"rgba(255,255,255,0.75)\",\n      backdropPaddingY: 2,\n      backdropPaddingX: 2,\n      callback: on.formatters.linear\n    },\n    pointLabels: {\n      display: !0,\n      fontSize: 10,\n      callback: function callback(t) {\n        return t;\n      }\n    }\n  };\n\n  function Hn(t) {\n    var e = t.ticks;\n    return e.display && t.display ? Bn(e.fontSize, N.global.defaultFontSize) + 2 * e.backdropPaddingY : 0;\n  }\n\n  function jn(t, e, n, i, a) {\n    return t === i || t === a ? {\n      start: e - n / 2,\n      end: e + n / 2\n    } : t < i || t > a ? {\n      start: e - n,\n      end: e\n    } : {\n      start: e,\n      end: e + n\n    };\n  }\n\n  function qn(t) {\n    return 0 === t || 180 === t ? \"center\" : t < 180 ? \"left\" : \"right\";\n  }\n\n  function Un(t, e, n, i) {\n    var a,\n        r,\n        o = n.y + i / 2;\n    if (H.isArray(e)) for (a = 0, r = e.length; a < r; ++a) {\n      t.fillText(e[a], n.x, o), o += i;\n    } else t.fillText(e, n.x, o);\n  }\n\n  function Yn(t, e, n) {\n    90 === t || 270 === t ? n.y -= e.h / 2 : (t > 270 || t < 90) && (n.y -= e.h);\n  }\n\n  function Gn(t) {\n    return H.isNumber(t) ? t : 0;\n  }\n\n  var Xn = Cn.extend({\n    setDimensions: function setDimensions() {\n      var t = this;\n      t.width = t.maxWidth, t.height = t.maxHeight, t.paddingTop = Hn(t.options) / 2, t.xCenter = Math.floor(t.width / 2), t.yCenter = Math.floor((t.height - t.paddingTop) / 2), t.drawingArea = Math.min(t.height - t.paddingTop, t.width) / 2;\n    },\n    determineDataLimits: function determineDataLimits() {\n      var t = this,\n          e = t.chart,\n          n = Number.POSITIVE_INFINITY,\n          i = Number.NEGATIVE_INFINITY;\n      H.each(e.data.datasets, function (a, r) {\n        if (e.isDatasetVisible(r)) {\n          var o = e.getDatasetMeta(r);\n          H.each(a.data, function (e, a) {\n            var r = +t.getRightValue(e);\n            isNaN(r) || o.data[a].hidden || (n = Math.min(r, n), i = Math.max(r, i));\n          });\n        }\n      }), t.min = n === Number.POSITIVE_INFINITY ? 0 : n, t.max = i === Number.NEGATIVE_INFINITY ? 0 : i, t.handleTickRangeOptions();\n    },\n    _computeTickLimit: function _computeTickLimit() {\n      return Math.ceil(this.drawingArea / Hn(this.options));\n    },\n    convertTicksToLabels: function convertTicksToLabels() {\n      var t = this;\n      Cn.prototype.convertTicksToLabels.call(t), t.pointLabels = t.chart.data.labels.map(function () {\n        var e = H.callback(t.options.pointLabels.callback, arguments, t);\n        return e || 0 === e ? e : \"\";\n      });\n    },\n    getLabelForIndex: function getLabelForIndex(t, e) {\n      return +this.getRightValue(this.chart.data.datasets[e].data[t]);\n    },\n    fit: function fit() {\n      var t = this.options;\n      t.display && t.pointLabels.display ? function (t) {\n        var e,\n            n,\n            i,\n            a = H.options._parseFont(t.options.pointLabels),\n            r = {\n          l: 0,\n          r: t.width,\n          t: 0,\n          b: t.height - t.paddingTop\n        },\n            o = {};\n\n        t.ctx.font = a.string, t._pointLabelSizes = [];\n        var s,\n            l,\n            u,\n            d = t.chart.data.labels.length;\n\n        for (e = 0; e < d; e++) {\n          i = t.getPointPosition(e, t.drawingArea + 5), s = t.ctx, l = a.lineHeight, u = t.pointLabels[e], n = H.isArray(u) ? {\n            w: H.longestText(s, s.font, u),\n            h: u.length * l\n          } : {\n            w: s.measureText(u).width,\n            h: l\n          }, t._pointLabelSizes[e] = n;\n          var h = t.getIndexAngle(e),\n              c = H.toDegrees(h) % 360,\n              f = jn(c, i.x, n.w, 0, 180),\n              g = jn(c, i.y, n.h, 90, 270);\n          f.start < r.l && (r.l = f.start, o.l = h), f.end > r.r && (r.r = f.end, o.r = h), g.start < r.t && (r.t = g.start, o.t = h), g.end > r.b && (r.b = g.end, o.b = h);\n        }\n\n        t.setReductions(t.drawingArea, r, o);\n      }(this) : this.setCenterPoint(0, 0, 0, 0);\n    },\n    setReductions: function setReductions(t, e, n) {\n      var i = this,\n          a = e.l / Math.sin(n.l),\n          r = Math.max(e.r - i.width, 0) / Math.sin(n.r),\n          o = -e.t / Math.cos(n.t),\n          s = -Math.max(e.b - (i.height - i.paddingTop), 0) / Math.cos(n.b);\n      a = Gn(a), r = Gn(r), o = Gn(o), s = Gn(s), i.drawingArea = Math.min(Math.floor(t - (a + r) / 2), Math.floor(t - (o + s) / 2)), i.setCenterPoint(a, r, o, s);\n    },\n    setCenterPoint: function setCenterPoint(t, e, n, i) {\n      var a = this,\n          r = a.width - e - a.drawingArea,\n          o = t + a.drawingArea,\n          s = n + a.drawingArea,\n          l = a.height - a.paddingTop - i - a.drawingArea;\n      a.xCenter = Math.floor((o + r) / 2 + a.left), a.yCenter = Math.floor((s + l) / 2 + a.top + a.paddingTop);\n    },\n    getIndexAngle: function getIndexAngle(t) {\n      var e = this.chart,\n          n = (t * (360 / e.data.labels.length) + ((e.options || {}).startAngle || 0)) % 360;\n      return (n < 0 ? n + 360 : n) * Math.PI * 2 / 360;\n    },\n    getDistanceFromCenterForValue: function getDistanceFromCenterForValue(t) {\n      var e = this;\n      if (H.isNullOrUndef(t)) return NaN;\n      var n = e.drawingArea / (e.max - e.min);\n      return e.options.ticks.reverse ? (e.max - t) * n : (t - e.min) * n;\n    },\n    getPointPosition: function getPointPosition(t, e) {\n      var n = this.getIndexAngle(t) - Math.PI / 2;\n      return {\n        x: Math.cos(n) * e + this.xCenter,\n        y: Math.sin(n) * e + this.yCenter\n      };\n    },\n    getPointPositionForValue: function getPointPositionForValue(t, e) {\n      return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));\n    },\n    getBasePosition: function getBasePosition(t) {\n      var e = this.min,\n          n = this.max;\n      return this.getPointPositionForValue(t || 0, this.beginAtZero ? 0 : e < 0 && n < 0 ? n : e > 0 && n > 0 ? e : 0);\n    },\n    _drawGrid: function _drawGrid() {\n      var t,\n          e,\n          n,\n          i = this,\n          a = i.ctx,\n          r = i.options,\n          o = r.gridLines,\n          s = r.angleLines,\n          l = Bn(s.lineWidth, o.lineWidth),\n          u = Bn(s.color, o.color);\n\n      if (r.pointLabels.display && function (t) {\n        var e = t.ctx,\n            n = t.options,\n            i = n.pointLabels,\n            a = Hn(n),\n            r = t.getDistanceFromCenterForValue(n.ticks.reverse ? t.min : t.max),\n            o = H.options._parseFont(i);\n\n        e.save(), e.font = o.string, e.textBaseline = \"middle\";\n\n        for (var s = t.chart.data.labels.length - 1; s >= 0; s--) {\n          var l = 0 === s ? a / 2 : 0,\n              u = t.getPointPosition(s, r + l + 5),\n              d = En(i.fontColor, s, N.global.defaultFontColor);\n          e.fillStyle = d;\n          var h = t.getIndexAngle(s),\n              c = H.toDegrees(h);\n          e.textAlign = qn(c), Yn(c, t._pointLabelSizes[s], u), Un(e, t.pointLabels[s], u, o.lineHeight);\n        }\n\n        e.restore();\n      }(i), o.display && H.each(i.ticks, function (t, n) {\n        0 !== n && (e = i.getDistanceFromCenterForValue(i.ticksAsNumbers[n]), function (t, e, n, i) {\n          var a,\n              r = t.ctx,\n              o = e.circular,\n              s = t.chart.data.labels.length,\n              l = En(e.color, i - 1),\n              u = En(e.lineWidth, i - 1);\n\n          if ((o || s) && l && u) {\n            if (r.save(), r.strokeStyle = l, r.lineWidth = u, r.setLineDash && (r.setLineDash(e.borderDash || []), r.lineDashOffset = e.borderDashOffset || 0), r.beginPath(), o) r.arc(t.xCenter, t.yCenter, n, 0, 2 * Math.PI);else {\n              a = t.getPointPosition(0, n), r.moveTo(a.x, a.y);\n\n              for (var d = 1; d < s; d++) {\n                a = t.getPointPosition(d, n), r.lineTo(a.x, a.y);\n              }\n            }\n            r.closePath(), r.stroke(), r.restore();\n          }\n        }(i, o, e, n));\n      }), s.display && l && u) {\n        for (a.save(), a.lineWidth = l, a.strokeStyle = u, a.setLineDash && (a.setLineDash(Wn([s.borderDash, o.borderDash, []])), a.lineDashOffset = Wn([s.borderDashOffset, o.borderDashOffset, 0])), t = i.chart.data.labels.length - 1; t >= 0; t--) {\n          e = i.getDistanceFromCenterForValue(r.ticks.reverse ? i.min : i.max), n = i.getPointPosition(t, e), a.beginPath(), a.moveTo(i.xCenter, i.yCenter), a.lineTo(n.x, n.y), a.stroke();\n        }\n\n        a.restore();\n      }\n    },\n    _drawLabels: function _drawLabels() {\n      var t = this,\n          e = t.ctx,\n          n = t.options.ticks;\n\n      if (n.display) {\n        var i,\n            a,\n            r = t.getIndexAngle(0),\n            o = H.options._parseFont(n),\n            s = Bn(n.fontColor, N.global.defaultFontColor);\n\n        e.save(), e.font = o.string, e.translate(t.xCenter, t.yCenter), e.rotate(r), e.textAlign = \"center\", e.textBaseline = \"middle\", H.each(t.ticks, function (r, l) {\n          (0 !== l || n.reverse) && (i = t.getDistanceFromCenterForValue(t.ticksAsNumbers[l]), n.showLabelBackdrop && (a = e.measureText(r).width, e.fillStyle = n.backdropColor, e.fillRect(-a / 2 - n.backdropPaddingX, -i - o.size / 2 - n.backdropPaddingY, a + 2 * n.backdropPaddingX, o.size + 2 * n.backdropPaddingY)), e.fillStyle = s, e.fillText(r, 0, -i));\n        }), e.restore();\n      }\n    },\n    _drawTitle: H.noop\n  }),\n      Kn = Vn;\n  Xn._defaults = Kn;\n  var Zn = H._deprecated,\n      $n = H.options.resolve,\n      Jn = H.valueOrDefault,\n      Qn = Number.MIN_SAFE_INTEGER || -9007199254740991,\n      ti = Number.MAX_SAFE_INTEGER || 9007199254740991,\n      ei = {\n    millisecond: {\n      common: !0,\n      size: 1,\n      steps: 1e3\n    },\n    second: {\n      common: !0,\n      size: 1e3,\n      steps: 60\n    },\n    minute: {\n      common: !0,\n      size: 6e4,\n      steps: 60\n    },\n    hour: {\n      common: !0,\n      size: 36e5,\n      steps: 24\n    },\n    day: {\n      common: !0,\n      size: 864e5,\n      steps: 30\n    },\n    week: {\n      common: !1,\n      size: 6048e5,\n      steps: 4\n    },\n    month: {\n      common: !0,\n      size: 2628e6,\n      steps: 12\n    },\n    quarter: {\n      common: !1,\n      size: 7884e6,\n      steps: 4\n    },\n    year: {\n      common: !0,\n      size: 3154e7\n    }\n  },\n      ni = Object.keys(ei);\n\n  function ii(t, e) {\n    return t - e;\n  }\n\n  function ai(t) {\n    return H.valueOrDefault(t.time.min, t.ticks.min);\n  }\n\n  function ri(t) {\n    return H.valueOrDefault(t.time.max, t.ticks.max);\n  }\n\n  function oi(t, e, n, i) {\n    var a = function (t, e, n) {\n      for (var i, a, r, o = 0, s = t.length - 1; o >= 0 && o <= s;) {\n        if (a = t[(i = o + s >> 1) - 1] || null, r = t[i], !a) return {\n          lo: null,\n          hi: r\n        };\n        if (r[e] < n) o = i + 1;else {\n          if (!(a[e] > n)) return {\n            lo: a,\n            hi: r\n          };\n          s = i - 1;\n        }\n      }\n\n      return {\n        lo: r,\n        hi: null\n      };\n    }(t, e, n),\n        r = a.lo ? a.hi ? a.lo : t[t.length - 2] : t[0],\n        o = a.lo ? a.hi ? a.hi : t[t.length - 1] : t[1],\n        s = o[e] - r[e],\n        l = s ? (n - r[e]) / s : 0,\n        u = (o[i] - r[i]) * l;\n\n    return r[i] + u;\n  }\n\n  function si(t, e) {\n    var n = t._adapter,\n        i = t.options.time,\n        a = i.parser,\n        r = a || i.format,\n        o = e;\n    return \"function\" == typeof a && (o = a(o)), H.isFinite(o) || (o = \"string\" == typeof r ? n.parse(o, r) : n.parse(o)), null !== o ? +o : (a || \"function\" != typeof r || (o = r(e), H.isFinite(o) || (o = n.parse(o))), o);\n  }\n\n  function li(t, e) {\n    if (H.isNullOrUndef(e)) return null;\n    var n = t.options.time,\n        i = si(t, t.getRightValue(e));\n    return null === i ? i : (n.round && (i = +t._adapter.startOf(i, n.round)), i);\n  }\n\n  function ui(t, e, n, i) {\n    var a,\n        r,\n        o,\n        s = ni.length;\n\n    for (a = ni.indexOf(t); a < s - 1; ++a) {\n      if (o = (r = ei[ni[a]]).steps ? r.steps : ti, r.common && Math.ceil((n - e) / (o * r.size)) <= i) return ni[a];\n    }\n\n    return ni[s - 1];\n  }\n\n  function di(t, e, n) {\n    var i,\n        a,\n        r = [],\n        o = {},\n        s = e.length;\n\n    for (i = 0; i < s; ++i) {\n      o[a = e[i]] = i, r.push({\n        value: a,\n        major: !1\n      });\n    }\n\n    return 0 !== s && n ? function (t, e, n, i) {\n      var a,\n          r,\n          o = t._adapter,\n          s = +o.startOf(e[0].value, i),\n          l = e[e.length - 1].value;\n\n      for (a = s; a <= l; a = +o.add(a, 1, i)) {\n        (r = n[a]) >= 0 && (e[r].major = !0);\n      }\n\n      return e;\n    }(t, r, o, n) : r;\n  }\n\n  var hi = yn.extend({\n    initialize: function initialize() {\n      this.mergeTicksOptions(), yn.prototype.initialize.call(this);\n    },\n    update: function update() {\n      var t = this,\n          e = t.options,\n          n = e.time || (e.time = {}),\n          i = t._adapter = new rn._date(e.adapters.date);\n      return Zn(\"time scale\", n.format, \"time.format\", \"time.parser\"), Zn(\"time scale\", n.min, \"time.min\", \"ticks.min\"), Zn(\"time scale\", n.max, \"time.max\", \"ticks.max\"), H.mergeIf(n.displayFormats, i.formats()), yn.prototype.update.apply(t, arguments);\n    },\n    getRightValue: function getRightValue(t) {\n      return t && void 0 !== t.t && (t = t.t), yn.prototype.getRightValue.call(this, t);\n    },\n    determineDataLimits: function determineDataLimits() {\n      var t,\n          e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s = this,\n          l = s.chart,\n          u = s._adapter,\n          d = s.options,\n          h = d.time.unit || \"day\",\n          c = ti,\n          f = Qn,\n          g = [],\n          p = [],\n          m = [],\n          v = s._getLabels();\n\n      for (t = 0, n = v.length; t < n; ++t) {\n        m.push(li(s, v[t]));\n      }\n\n      for (t = 0, n = (l.data.datasets || []).length; t < n; ++t) {\n        if (l.isDatasetVisible(t)) {\n          if (a = l.data.datasets[t].data, H.isObject(a[0])) for (p[t] = [], e = 0, i = a.length; e < i; ++e) {\n            r = li(s, a[e]), g.push(r), p[t][e] = r;\n          } else p[t] = m.slice(0), o || (g = g.concat(m), o = !0);\n        } else p[t] = [];\n      }\n\n      m.length && (c = Math.min(c, m[0]), f = Math.max(f, m[m.length - 1])), g.length && (g = n > 1 ? function (t) {\n        var e,\n            n,\n            i,\n            a = {},\n            r = [];\n\n        for (e = 0, n = t.length; e < n; ++e) {\n          a[i = t[e]] || (a[i] = !0, r.push(i));\n        }\n\n        return r;\n      }(g).sort(ii) : g.sort(ii), c = Math.min(c, g[0]), f = Math.max(f, g[g.length - 1])), c = li(s, ai(d)) || c, f = li(s, ri(d)) || f, c = c === ti ? +u.startOf(Date.now(), h) : c, f = f === Qn ? +u.endOf(Date.now(), h) + 1 : f, s.min = Math.min(c, f), s.max = Math.max(c + 1, f), s._table = [], s._timestamps = {\n        data: g,\n        datasets: p,\n        labels: m\n      };\n    },\n    buildTicks: function buildTicks() {\n      var t,\n          e,\n          n,\n          i = this,\n          a = i.min,\n          r = i.max,\n          o = i.options,\n          s = o.ticks,\n          l = o.time,\n          u = i._timestamps,\n          d = [],\n          h = i.getLabelCapacity(a),\n          c = s.source,\n          f = o.distribution;\n\n      for (u = \"data\" === c || \"auto\" === c && \"series\" === f ? u.data : \"labels\" === c ? u.labels : function (t, e, n, i) {\n        var a,\n            r = t._adapter,\n            o = t.options,\n            s = o.time,\n            l = s.unit || ui(s.minUnit, e, n, i),\n            u = $n([s.stepSize, s.unitStepSize, 1]),\n            d = \"week\" === l && s.isoWeekday,\n            h = e,\n            c = [];\n        if (d && (h = +r.startOf(h, \"isoWeek\", d)), h = +r.startOf(h, d ? \"day\" : l), r.diff(n, e, l) > 1e5 * u) throw e + \" and \" + n + \" are too far apart with stepSize of \" + u + \" \" + l;\n\n        for (a = h; a < n; a = +r.add(a, u, l)) {\n          c.push(a);\n        }\n\n        return a !== n && \"ticks\" !== o.bounds || c.push(a), c;\n      }(i, a, r, h), \"ticks\" === o.bounds && u.length && (a = u[0], r = u[u.length - 1]), a = li(i, ai(o)) || a, r = li(i, ri(o)) || r, t = 0, e = u.length; t < e; ++t) {\n        (n = u[t]) >= a && n <= r && d.push(n);\n      }\n\n      return i.min = a, i.max = r, i._unit = l.unit || (s.autoSkip ? ui(l.minUnit, i.min, i.max, h) : function (t, e, n, i, a) {\n        var r, o;\n\n        for (r = ni.length - 1; r >= ni.indexOf(n); r--) {\n          if (o = ni[r], ei[o].common && t._adapter.diff(a, i, o) >= e - 1) return o;\n        }\n\n        return ni[n ? ni.indexOf(n) : 0];\n      }(i, d.length, l.minUnit, i.min, i.max)), i._majorUnit = s.major.enabled && \"year\" !== i._unit ? function (t) {\n        for (var e = ni.indexOf(t) + 1, n = ni.length; e < n; ++e) {\n          if (ei[ni[e]].common) return ni[e];\n        }\n      }(i._unit) : void 0, i._table = function (t, e, n, i) {\n        if (\"linear\" === i || !t.length) return [{\n          time: e,\n          pos: 0\n        }, {\n          time: n,\n          pos: 1\n        }];\n        var a,\n            r,\n            o,\n            s,\n            l,\n            u = [],\n            d = [e];\n\n        for (a = 0, r = t.length; a < r; ++a) {\n          (s = t[a]) > e && s < n && d.push(s);\n        }\n\n        for (d.push(n), a = 0, r = d.length; a < r; ++a) {\n          l = d[a + 1], o = d[a - 1], s = d[a], void 0 !== o && void 0 !== l && Math.round((l + o) / 2) === s || u.push({\n            time: s,\n            pos: a / (r - 1)\n          });\n        }\n\n        return u;\n      }(i._timestamps.data, a, r, f), i._offsets = function (t, e, n, i, a) {\n        var r,\n            o,\n            s = 0,\n            l = 0;\n        return a.offset && e.length && (r = oi(t, \"time\", e[0], \"pos\"), s = 1 === e.length ? 1 - r : (oi(t, \"time\", e[1], \"pos\") - r) / 2, o = oi(t, \"time\", e[e.length - 1], \"pos\"), l = 1 === e.length ? o : (o - oi(t, \"time\", e[e.length - 2], \"pos\")) / 2), {\n          start: s,\n          end: l,\n          factor: 1 / (s + 1 + l)\n        };\n      }(i._table, d, 0, 0, o), s.reverse && d.reverse(), di(i, d, i._majorUnit);\n    },\n    getLabelForIndex: function getLabelForIndex(t, e) {\n      var n = this,\n          i = n._adapter,\n          a = n.chart.data,\n          r = n.options.time,\n          o = a.labels && t < a.labels.length ? a.labels[t] : \"\",\n          s = a.datasets[e].data[t];\n      return H.isObject(s) && (o = n.getRightValue(s)), r.tooltipFormat ? i.format(si(n, o), r.tooltipFormat) : \"string\" == typeof o ? o : i.format(si(n, o), r.displayFormats.datetime);\n    },\n    tickFormatFunction: function tickFormatFunction(t, e, n, i) {\n      var a = this._adapter,\n          r = this.options,\n          o = r.time.displayFormats,\n          s = o[this._unit],\n          l = this._majorUnit,\n          u = o[l],\n          d = n[e],\n          h = r.ticks,\n          c = l && u && d && d.major,\n          f = a.format(t, i || (c ? u : s)),\n          g = c ? h.major : h.minor,\n          p = $n([g.callback, g.userCallback, h.callback, h.userCallback]);\n      return p ? p(f, e, n) : f;\n    },\n    convertTicksToLabels: function convertTicksToLabels(t) {\n      var e,\n          n,\n          i = [];\n\n      for (e = 0, n = t.length; e < n; ++e) {\n        i.push(this.tickFormatFunction(t[e].value, e, t));\n      }\n\n      return i;\n    },\n    getPixelForOffset: function getPixelForOffset(t) {\n      var e = this._offsets,\n          n = oi(this._table, \"time\", t, \"pos\");\n      return this.getPixelForDecimal((e.start + n) * e.factor);\n    },\n    getPixelForValue: function getPixelForValue(t, e, n) {\n      var i = null;\n      if (void 0 !== e && void 0 !== n && (i = this._timestamps.datasets[n][e]), null === i && (i = li(this, t)), null !== i) return this.getPixelForOffset(i);\n    },\n    getPixelForTick: function getPixelForTick(t) {\n      var e = this.getTicks();\n      return t >= 0 && t < e.length ? this.getPixelForOffset(e[t].value) : null;\n    },\n    getValueForPixel: function getValueForPixel(t) {\n      var e = this._offsets,\n          n = this.getDecimalForPixel(t) / e.factor - e.end,\n          i = oi(this._table, \"pos\", n, \"time\");\n      return this._adapter._create(i);\n    },\n    _getLabelSize: function _getLabelSize(t) {\n      var e = this.options.ticks,\n          n = this.ctx.measureText(t).width,\n          i = H.toRadians(this.isHorizontal() ? e.maxRotation : e.minRotation),\n          a = Math.cos(i),\n          r = Math.sin(i),\n          o = Jn(e.fontSize, N.global.defaultFontSize);\n      return {\n        w: n * a + o * r,\n        h: n * r + o * a\n      };\n    },\n    getLabelWidth: function getLabelWidth(t) {\n      return this._getLabelSize(t).w;\n    },\n    getLabelCapacity: function getLabelCapacity(t) {\n      var e = this,\n          n = e.options.time,\n          i = n.displayFormats,\n          a = i[n.unit] || i.millisecond,\n          r = e.tickFormatFunction(t, 0, di(e, [t], e._majorUnit), a),\n          o = e._getLabelSize(r),\n          s = Math.floor(e.isHorizontal() ? e.width / o.w : e.height / o.h);\n\n      return e.options.offset && s--, s > 0 ? s : 1;\n    }\n  }),\n      ci = {\n    position: \"bottom\",\n    distribution: \"linear\",\n    bounds: \"data\",\n    adapters: {},\n    time: {\n      parser: !1,\n      unit: !1,\n      round: !1,\n      displayFormat: !1,\n      isoWeekday: !1,\n      minUnit: \"millisecond\",\n      displayFormats: {}\n    },\n    ticks: {\n      autoSkip: !1,\n      source: \"auto\",\n      major: {\n        enabled: !1\n      }\n    }\n  };\n  hi._defaults = ci;\n  var fi = {\n    category: kn,\n    linear: Tn,\n    logarithmic: zn,\n    radialLinear: Xn,\n    time: hi\n  },\n      gi = {\n    datetime: \"MMM D, YYYY, h:mm:ss a\",\n    millisecond: \"h:mm:ss.SSS a\",\n    second: \"h:mm:ss a\",\n    minute: \"h:mm a\",\n    hour: \"hA\",\n    day: \"MMM D\",\n    week: \"ll\",\n    month: \"MMM YYYY\",\n    quarter: \"[Q]Q - YYYY\",\n    year: \"YYYY\"\n  };\n  rn._date.override(\"function\" == typeof t ? {\n    _id: \"moment\",\n    formats: function formats() {\n      return gi;\n    },\n    parse: function parse(e, n) {\n      return \"string\" == typeof e && \"string\" == typeof n ? e = t(e, n) : e instanceof t || (e = t(e)), e.isValid() ? e.valueOf() : null;\n    },\n    format: function format(e, n) {\n      return t(e).format(n);\n    },\n    add: function add(e, n, i) {\n      return t(e).add(n, i).valueOf();\n    },\n    diff: function diff(e, n, i) {\n      return t(e).diff(t(n), i);\n    },\n    startOf: function startOf(e, n, i) {\n      return e = t(e), \"isoWeek\" === n ? e.isoWeekday(i).valueOf() : e.startOf(n).valueOf();\n    },\n    endOf: function endOf(e, n) {\n      return t(e).endOf(n).valueOf();\n    },\n    _create: function _create(e) {\n      return t(e);\n    }\n  } : {}), N._set(\"global\", {\n    plugins: {\n      filler: {\n        propagate: !0\n      }\n    }\n  });\n  var pi = {\n    dataset: function dataset(t) {\n      var e = t.fill,\n          n = t.chart,\n          i = n.getDatasetMeta(e),\n          a = i && n.isDatasetVisible(e) && i.dataset._children || [],\n          r = a.length || 0;\n      return r ? function (t, e) {\n        return e < r && a[e]._view || null;\n      } : null;\n    },\n    boundary: function boundary(t) {\n      var e = t.boundary,\n          n = e ? e.x : null,\n          i = e ? e.y : null;\n      return H.isArray(e) ? function (t, n) {\n        return e[n];\n      } : function (t) {\n        return {\n          x: null === n ? t.x : n,\n          y: null === i ? t.y : i\n        };\n      };\n    }\n  };\n\n  function mi(t, e, n) {\n    var i,\n        a = t._model || {},\n        r = a.fill;\n    if (void 0 === r && (r = !!a.backgroundColor), !1 === r || null === r) return !1;\n    if (!0 === r) return \"origin\";\n    if (i = parseFloat(r, 10), isFinite(i) && Math.floor(i) === i) return \"-\" !== r[0] && \"+\" !== r[0] || (i = e + i), !(i === e || i < 0 || i >= n) && i;\n\n    switch (r) {\n      case \"bottom\":\n        return \"start\";\n\n      case \"top\":\n        return \"end\";\n\n      case \"zero\":\n        return \"origin\";\n\n      case \"origin\":\n      case \"start\":\n      case \"end\":\n        return r;\n\n      default:\n        return !1;\n    }\n  }\n\n  function vi(t) {\n    return (t.el._scale || {}).getPointPositionForValue ? function (t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o = t.el._scale,\n          s = o.options,\n          l = o.chart.data.labels.length,\n          u = t.fill,\n          d = [];\n      if (!l) return null;\n\n      for (e = s.ticks.reverse ? o.max : o.min, n = s.ticks.reverse ? o.min : o.max, i = o.getPointPositionForValue(0, e), a = 0; a < l; ++a) {\n        r = \"start\" === u || \"end\" === u ? o.getPointPositionForValue(a, \"start\" === u ? e : n) : o.getBasePosition(a), s.gridLines.circular && (r.cx = i.x, r.cy = i.y, r.angle = o.getIndexAngle(a) - Math.PI / 2), d.push(r);\n      }\n\n      return d;\n    }(t) : function (t) {\n      var e,\n          n = t.el._model || {},\n          i = t.el._scale || {},\n          a = t.fill,\n          r = null;\n      if (isFinite(a)) return null;\n\n      if (\"start\" === a ? r = void 0 === n.scaleBottom ? i.bottom : n.scaleBottom : \"end\" === a ? r = void 0 === n.scaleTop ? i.top : n.scaleTop : void 0 !== n.scaleZero ? r = n.scaleZero : i.getBasePixel && (r = i.getBasePixel()), null != r) {\n        if (void 0 !== r.x && void 0 !== r.y) return r;\n        if (H.isFinite(r)) return {\n          x: (e = i.isHorizontal()) ? r : null,\n          y: e ? null : r\n        };\n      }\n\n      return null;\n    }(t);\n  }\n\n  function bi(t, e, n) {\n    var i,\n        a = t[e].fill,\n        r = [e];\n    if (!n) return a;\n\n    for (; !1 !== a && -1 === r.indexOf(a);) {\n      if (!isFinite(a)) return a;\n      if (!(i = t[a])) return !1;\n      if (i.visible) return a;\n      r.push(a), a = i.fill;\n    }\n\n    return !1;\n  }\n\n  function xi(t) {\n    var e = t.fill,\n        n = \"dataset\";\n    return !1 === e ? null : (isFinite(e) || (n = \"boundary\"), pi[n](t));\n  }\n\n  function yi(t) {\n    return t && !t.skip;\n  }\n\n  function _i(t, e, n, i, a) {\n    var r, o, s, l;\n\n    if (i && a) {\n      for (t.moveTo(e[0].x, e[0].y), r = 1; r < i; ++r) {\n        H.canvas.lineTo(t, e[r - 1], e[r]);\n      }\n\n      if (void 0 === n[0].angle) for (t.lineTo(n[a - 1].x, n[a - 1].y), r = a - 1; r > 0; --r) {\n        H.canvas.lineTo(t, n[r], n[r - 1], !0);\n      } else for (o = n[0].cx, s = n[0].cy, l = Math.sqrt(Math.pow(n[0].x - o, 2) + Math.pow(n[0].y - s, 2)), r = a - 1; r > 0; --r) {\n        t.arc(o, s, l, n[r].angle, n[r - 1].angle, !0);\n      }\n    }\n  }\n\n  function ki(t, e, n, i, a, r) {\n    var o,\n        s,\n        l,\n        u,\n        d,\n        h,\n        c,\n        f,\n        g = e.length,\n        p = i.spanGaps,\n        m = [],\n        v = [],\n        b = 0,\n        x = 0;\n\n    for (t.beginPath(), o = 0, s = g; o < s; ++o) {\n      d = n(u = e[l = o % g]._view, l, i), h = yi(u), c = yi(d), r && void 0 === f && h && (s = g + (f = o + 1)), h && c ? (b = m.push(u), x = v.push(d)) : b && x && (p ? (h && m.push(u), c && v.push(d)) : (_i(t, m, v, b, x), b = x = 0, m = [], v = []));\n    }\n\n    _i(t, m, v, b, x), t.closePath(), t.fillStyle = a, t.fill();\n  }\n\n  var wi = {\n    id: \"filler\",\n    afterDatasetsUpdate: function afterDatasetsUpdate(t, e) {\n      var n,\n          i,\n          a,\n          r,\n          o = (t.data.datasets || []).length,\n          s = e.propagate,\n          l = [];\n\n      for (i = 0; i < o; ++i) {\n        r = null, (a = (n = t.getDatasetMeta(i)).dataset) && a._model && a instanceof kt.Line && (r = {\n          visible: t.isDatasetVisible(i),\n          fill: mi(a, i, o),\n          chart: t,\n          el: a\n        }), n.$filler = r, l.push(r);\n      }\n\n      for (i = 0; i < o; ++i) {\n        (r = l[i]) && (r.fill = bi(l, i, s), r.boundary = vi(r), r.mapper = xi(r));\n      }\n    },\n    beforeDatasetsDraw: function beforeDatasetsDraw(t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s,\n          l = t._getSortedVisibleDatasetMetas(),\n          u = t.ctx;\n\n      for (n = l.length - 1; n >= 0; --n) {\n        (e = l[n].$filler) && e.visible && (a = (i = e.el)._view, r = i._children || [], o = e.mapper, s = a.backgroundColor || N.global.defaultColor, o && s && r.length && (H.canvas.clipArea(u, t.chartArea), ki(u, r, o, a, s, i._loop), H.canvas.unclipArea(u)));\n      }\n    }\n  },\n      Mi = H.rtl.getRtlAdapter,\n      Si = H.noop,\n      Ci = H.valueOrDefault;\n\n  function Pi(t, e) {\n    return t.usePointStyle && t.boxWidth > e ? e : t.boxWidth;\n  }\n\n  N._set(\"global\", {\n    legend: {\n      display: !0,\n      position: \"top\",\n      align: \"center\",\n      fullWidth: !0,\n      reverse: !1,\n      weight: 1e3,\n      onClick: function onClick(t, e) {\n        var n = e.datasetIndex,\n            i = this.chart,\n            a = i.getDatasetMeta(n);\n        a.hidden = null === a.hidden ? !i.data.datasets[n].hidden : null, i.update();\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        boxWidth: 40,\n        padding: 10,\n        generateLabels: function generateLabels(t) {\n          var e = t.data.datasets,\n              n = t.options.legend || {},\n              i = n.labels && n.labels.usePointStyle;\n          return t._getSortedDatasetMetas().map(function (n) {\n            var a = n.controller.getStyle(i ? 0 : void 0);\n            return {\n              text: e[n.index].label,\n              fillStyle: a.backgroundColor,\n              hidden: !t.isDatasetVisible(n.index),\n              lineCap: a.borderCapStyle,\n              lineDash: a.borderDash,\n              lineDashOffset: a.borderDashOffset,\n              lineJoin: a.borderJoinStyle,\n              lineWidth: a.borderWidth,\n              strokeStyle: a.borderColor,\n              pointStyle: a.pointStyle,\n              rotation: a.rotation,\n              datasetIndex: n.index\n            };\n          }, this);\n        }\n      }\n    },\n    legendCallback: function legendCallback(t) {\n      var e,\n          n,\n          i,\n          a = document.createElement(\"ul\"),\n          r = t.data.datasets;\n\n      for (a.setAttribute(\"class\", t.id + \"-legend\"), e = 0, n = r.length; e < n; e++) {\n        (i = a.appendChild(document.createElement(\"li\"))).appendChild(document.createElement(\"span\")).style.backgroundColor = r[e].backgroundColor, r[e].label && i.appendChild(document.createTextNode(r[e].label));\n      }\n\n      return a.outerHTML;\n    }\n  });\n\n  var Ai = K.extend({\n    initialize: function initialize(t) {\n      H.extend(this, t), this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = !1;\n    },\n    beforeUpdate: Si,\n    update: function update(t, e, n) {\n      var i = this;\n      return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = n, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n    },\n    afterUpdate: Si,\n    beforeSetDimensions: Si,\n    setDimensions: function setDimensions() {\n      var t = this;\n      t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: Si,\n    beforeBuildLabels: Si,\n    buildLabels: function buildLabels() {\n      var t = this,\n          e = t.options.labels || {},\n          n = H.callback(e.generateLabels, [t.chart], t) || [];\n      e.filter && (n = n.filter(function (n) {\n        return e.filter(n, t.chart.data);\n      })), t.options.reverse && n.reverse(), t.legendItems = n;\n    },\n    afterBuildLabels: Si,\n    beforeFit: Si,\n    fit: function fit() {\n      var t = this,\n          e = t.options,\n          n = e.labels,\n          i = e.display,\n          a = t.ctx,\n          r = H.options._parseFont(n),\n          o = r.size,\n          s = t.legendHitBoxes = [],\n          l = t.minSize,\n          u = t.isHorizontal();\n\n      if (u ? (l.width = t.maxWidth, l.height = i ? 10 : 0) : (l.width = i ? 10 : 0, l.height = t.maxHeight), i) {\n        if (a.font = r.string, u) {\n          var d = t.lineWidths = [0],\n              h = 0;\n          a.textAlign = \"left\", a.textBaseline = \"middle\", H.each(t.legendItems, function (t, e) {\n            var i = Pi(n, o) + o / 2 + a.measureText(t.text).width;\n            (0 === e || d[d.length - 1] + i + 2 * n.padding > l.width) && (h += o + n.padding, d[d.length - (e > 0 ? 0 : 1)] = 0), s[e] = {\n              left: 0,\n              top: 0,\n              width: i,\n              height: o\n            }, d[d.length - 1] += i + n.padding;\n          }), l.height += h;\n        } else {\n          var c = n.padding,\n              f = t.columnWidths = [],\n              g = t.columnHeights = [],\n              p = n.padding,\n              m = 0,\n              v = 0;\n          H.each(t.legendItems, function (t, e) {\n            var i = Pi(n, o) + o / 2 + a.measureText(t.text).width;\n            e > 0 && v + o + 2 * c > l.height && (p += m + n.padding, f.push(m), g.push(v), m = 0, v = 0), m = Math.max(m, i), v += o + c, s[e] = {\n              left: 0,\n              top: 0,\n              width: i,\n              height: o\n            };\n          }), p += m, f.push(m), g.push(v), l.width += p;\n        }\n\n        t.width = l.width, t.height = l.height;\n      } else t.width = l.width = t.height = l.height = 0;\n    },\n    afterFit: Si,\n    isHorizontal: function isHorizontal() {\n      return \"top\" === this.options.position || \"bottom\" === this.options.position;\n    },\n    draw: function draw() {\n      var t = this,\n          e = t.options,\n          n = e.labels,\n          i = N.global,\n          a = i.defaultColor,\n          r = i.elements.line,\n          o = t.height,\n          s = t.columnHeights,\n          l = t.width,\n          u = t.lineWidths;\n\n      if (e.display) {\n        var d,\n            h = Mi(e.rtl, t.left, t.minSize.width),\n            c = t.ctx,\n            f = Ci(n.fontColor, i.defaultFontColor),\n            g = H.options._parseFont(n),\n            p = g.size;\n\n        c.textAlign = h.textAlign(\"left\"), c.textBaseline = \"middle\", c.lineWidth = .5, c.strokeStyle = f, c.fillStyle = f, c.font = g.string;\n\n        var m = Pi(n, p),\n            v = t.legendHitBoxes,\n            b = function b(t, i) {\n          switch (e.align) {\n            case \"start\":\n              return n.padding;\n\n            case \"end\":\n              return t - i;\n\n            default:\n              return (t - i + n.padding) / 2;\n          }\n        },\n            x = t.isHorizontal();\n\n        d = x ? {\n          x: t.left + b(l, u[0]),\n          y: t.top + n.padding,\n          line: 0\n        } : {\n          x: t.left + n.padding,\n          y: t.top + b(o, s[0]),\n          line: 0\n        }, H.rtl.overrideTextDirection(t.ctx, e.textDirection);\n        var y = p + n.padding;\n        H.each(t.legendItems, function (e, i) {\n          var f = c.measureText(e.text).width,\n              g = m + p / 2 + f,\n              _ = d.x,\n              k = d.y;\n          h.setWidth(t.minSize.width), x ? i > 0 && _ + g + n.padding > t.left + t.minSize.width && (k = d.y += y, d.line++, _ = d.x = t.left + b(l, u[d.line])) : i > 0 && k + y > t.top + t.minSize.height && (_ = d.x = _ + t.columnWidths[d.line] + n.padding, d.line++, k = d.y = t.top + b(o, s[d.line]));\n          var w = h.x(_);\n          !function (t, e, i) {\n            if (!(isNaN(m) || m <= 0)) {\n              c.save();\n              var o = Ci(i.lineWidth, r.borderWidth);\n\n              if (c.fillStyle = Ci(i.fillStyle, a), c.lineCap = Ci(i.lineCap, r.borderCapStyle), c.lineDashOffset = Ci(i.lineDashOffset, r.borderDashOffset), c.lineJoin = Ci(i.lineJoin, r.borderJoinStyle), c.lineWidth = o, c.strokeStyle = Ci(i.strokeStyle, a), c.setLineDash && c.setLineDash(Ci(i.lineDash, r.borderDash)), n && n.usePointStyle) {\n                var s = m * Math.SQRT2 / 2,\n                    l = h.xPlus(t, m / 2),\n                    u = e + p / 2;\n                H.canvas.drawPoint(c, i.pointStyle, s, l, u, i.rotation);\n              } else c.fillRect(h.leftForLtr(t, m), e, m, p), 0 !== o && c.strokeRect(h.leftForLtr(t, m), e, m, p);\n\n              c.restore();\n            }\n          }(w, k, e), v[i].left = h.leftForLtr(w, v[i].width), v[i].top = k, function (t, e, n, i) {\n            var a = p / 2,\n                r = h.xPlus(t, m + a),\n                o = e + a;\n            c.fillText(n.text, r, o), n.hidden && (c.beginPath(), c.lineWidth = 2, c.moveTo(r, o), c.lineTo(h.xPlus(r, i), o), c.stroke());\n          }(w, k, e, f), x ? d.x += g + n.padding : d.y += y;\n        }), H.rtl.restoreTextDirection(t.ctx, e.textDirection);\n      }\n    },\n    _getLegendItemAt: function _getLegendItemAt(t, e) {\n      var n,\n          i,\n          a,\n          r = this;\n      if (t >= r.left && t <= r.right && e >= r.top && e <= r.bottom) for (a = r.legendHitBoxes, n = 0; n < a.length; ++n) {\n        if (t >= (i = a[n]).left && t <= i.left + i.width && e >= i.top && e <= i.top + i.height) return r.legendItems[n];\n      }\n      return null;\n    },\n    handleEvent: function handleEvent(t) {\n      var e,\n          n = this,\n          i = n.options,\n          a = \"mouseup\" === t.type ? \"click\" : t.type;\n\n      if (\"mousemove\" === a) {\n        if (!i.onHover && !i.onLeave) return;\n      } else {\n        if (\"click\" !== a) return;\n        if (!i.onClick) return;\n      }\n\n      e = n._getLegendItemAt(t.x, t.y), \"click\" === a ? e && i.onClick && i.onClick.call(n, t[\"native\"], e) : (i.onLeave && e !== n._hoveredItem && (n._hoveredItem && i.onLeave.call(n, t[\"native\"], n._hoveredItem), n._hoveredItem = e), i.onHover && e && i.onHover.call(n, t[\"native\"], e));\n    }\n  });\n\n  function Di(t, e) {\n    var n = new Ai({\n      ctx: t.ctx,\n      options: e,\n      chart: t\n    });\n    pe.configure(t, n, e), pe.addBox(t, n), t.legend = n;\n  }\n\n  var Ti = {\n    id: \"legend\",\n    _element: Ai,\n    beforeInit: function beforeInit(t) {\n      var e = t.options.legend;\n      e && Di(t, e);\n    },\n    beforeUpdate: function beforeUpdate(t) {\n      var e = t.options.legend,\n          n = t.legend;\n      e ? (H.mergeIf(e, N.global.legend), n ? (pe.configure(t, n, e), n.options = e) : Di(t, e)) : n && (pe.removeBox(t, n), delete t.legend);\n    },\n    afterEvent: function afterEvent(t, e) {\n      var n = t.legend;\n      n && n.handleEvent(e);\n    }\n  },\n      Ii = H.noop;\n\n  N._set(\"global\", {\n    title: {\n      display: !1,\n      fontStyle: \"bold\",\n      fullWidth: !0,\n      padding: 10,\n      position: \"top\",\n      text: \"\",\n      weight: 2e3\n    }\n  });\n\n  var Fi = K.extend({\n    initialize: function initialize(t) {\n      H.extend(this, t), this.legendHitBoxes = [];\n    },\n    beforeUpdate: Ii,\n    update: function update(t, e, n) {\n      var i = this;\n      return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = n, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize;\n    },\n    afterUpdate: Ii,\n    beforeSetDimensions: Ii,\n    setDimensions: function setDimensions() {\n      var t = this;\n      t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {\n        width: 0,\n        height: 0\n      };\n    },\n    afterSetDimensions: Ii,\n    beforeBuildLabels: Ii,\n    buildLabels: Ii,\n    afterBuildLabels: Ii,\n    beforeFit: Ii,\n    fit: function fit() {\n      var t,\n          e = this,\n          n = e.options,\n          i = e.minSize = {},\n          a = e.isHorizontal();\n      n.display ? (t = (H.isArray(n.text) ? n.text.length : 1) * H.options._parseFont(n).lineHeight + 2 * n.padding, e.width = i.width = a ? e.maxWidth : t, e.height = i.height = a ? t : e.maxHeight) : e.width = i.width = e.height = i.height = 0;\n    },\n    afterFit: Ii,\n    isHorizontal: function isHorizontal() {\n      var t = this.options.position;\n      return \"top\" === t || \"bottom\" === t;\n    },\n    draw: function draw() {\n      var t = this,\n          e = t.ctx,\n          n = t.options;\n\n      if (n.display) {\n        var i,\n            a,\n            r,\n            o = H.options._parseFont(n),\n            s = o.lineHeight,\n            l = s / 2 + n.padding,\n            u = 0,\n            d = t.top,\n            h = t.left,\n            c = t.bottom,\n            f = t.right;\n\n        e.fillStyle = H.valueOrDefault(n.fontColor, N.global.defaultFontColor), e.font = o.string, t.isHorizontal() ? (a = h + (f - h) / 2, r = d + l, i = f - h) : (a = \"left\" === n.position ? h + l : f - l, r = d + (c - d) / 2, i = c - d, u = Math.PI * (\"left\" === n.position ? -.5 : .5)), e.save(), e.translate(a, r), e.rotate(u), e.textAlign = \"center\", e.textBaseline = \"middle\";\n        var g = n.text;\n        if (H.isArray(g)) for (var p = 0, m = 0; m < g.length; ++m) {\n          e.fillText(g[m], 0, p, i), p += s;\n        } else e.fillText(g, 0, 0, i);\n        e.restore();\n      }\n    }\n  });\n\n  function Oi(t, e) {\n    var n = new Fi({\n      ctx: t.ctx,\n      options: e,\n      chart: t\n    });\n    pe.configure(t, n, e), pe.addBox(t, n), t.titleBlock = n;\n  }\n\n  var Li = {},\n      Ri = wi,\n      zi = Ti,\n      Ni = {\n    id: \"title\",\n    _element: Fi,\n    beforeInit: function beforeInit(t) {\n      var e = t.options.title;\n      e && Oi(t, e);\n    },\n    beforeUpdate: function beforeUpdate(t) {\n      var e = t.options.title,\n          n = t.titleBlock;\n      e ? (H.mergeIf(e, N.global.title), n ? (pe.configure(t, n, e), n.options = e) : Oi(t, e)) : n && (pe.removeBox(t, n), delete t.titleBlock);\n    }\n  };\n\n  for (var Bi in Li.filler = Ri, Li.legend = zi, Li.title = Ni, en.helpers = H, function () {\n    function t(t, e, n) {\n      var i;\n      return \"string\" == typeof t ? (i = parseInt(t, 10), -1 !== t.indexOf(\"%\") && (i = i / 100 * e.parentNode[n])) : i = t, i;\n    }\n\n    function e(t) {\n      return null != t && \"none\" !== t;\n    }\n\n    function n(n, i, a) {\n      var r = document.defaultView,\n          o = H._getParentNode(n),\n          s = r.getComputedStyle(n)[i],\n          l = r.getComputedStyle(o)[i],\n          u = e(s),\n          d = e(l),\n          h = Number.POSITIVE_INFINITY;\n\n      return u || d ? Math.min(u ? t(s, n, a) : h, d ? t(l, o, a) : h) : \"none\";\n    }\n\n    H.where = function (t, e) {\n      if (H.isArray(t) && Array.prototype.filter) return t.filter(e);\n      var n = [];\n      return H.each(t, function (t) {\n        e(t) && n.push(t);\n      }), n;\n    }, H.findIndex = Array.prototype.findIndex ? function (t, e, n) {\n      return t.findIndex(e, n);\n    } : function (t, e, n) {\n      n = void 0 === n ? t : n;\n\n      for (var i = 0, a = t.length; i < a; ++i) {\n        if (e.call(n, t[i], i, t)) return i;\n      }\n\n      return -1;\n    }, H.findNextWhere = function (t, e, n) {\n      H.isNullOrUndef(n) && (n = -1);\n\n      for (var i = n + 1; i < t.length; i++) {\n        var a = t[i];\n        if (e(a)) return a;\n      }\n    }, H.findPreviousWhere = function (t, e, n) {\n      H.isNullOrUndef(n) && (n = t.length);\n\n      for (var i = n - 1; i >= 0; i--) {\n        var a = t[i];\n        if (e(a)) return a;\n      }\n    }, H.isNumber = function (t) {\n      return !isNaN(parseFloat(t)) && isFinite(t);\n    }, H.almostEquals = function (t, e, n) {\n      return Math.abs(t - e) < n;\n    }, H.almostWhole = function (t, e) {\n      var n = Math.round(t);\n      return n - e <= t && n + e >= t;\n    }, H.max = function (t) {\n      return t.reduce(function (t, e) {\n        return isNaN(e) ? t : Math.max(t, e);\n      }, Number.NEGATIVE_INFINITY);\n    }, H.min = function (t) {\n      return t.reduce(function (t, e) {\n        return isNaN(e) ? t : Math.min(t, e);\n      }, Number.POSITIVE_INFINITY);\n    }, H.sign = Math.sign ? function (t) {\n      return Math.sign(t);\n    } : function (t) {\n      return 0 === (t = +t) || isNaN(t) ? t : t > 0 ? 1 : -1;\n    }, H.toRadians = function (t) {\n      return t * (Math.PI / 180);\n    }, H.toDegrees = function (t) {\n      return t * (180 / Math.PI);\n    }, H._decimalPlaces = function (t) {\n      if (H.isFinite(t)) {\n        for (var e = 1, n = 0; Math.round(t * e) / e !== t;) {\n          e *= 10, n++;\n        }\n\n        return n;\n      }\n    }, H.getAngleFromPoint = function (t, e) {\n      var n = e.x - t.x,\n          i = e.y - t.y,\n          a = Math.sqrt(n * n + i * i),\n          r = Math.atan2(i, n);\n      return r < -.5 * Math.PI && (r += 2 * Math.PI), {\n        angle: r,\n        distance: a\n      };\n    }, H.distanceBetweenPoints = function (t, e) {\n      return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));\n    }, H.aliasPixel = function (t) {\n      return t % 2 == 0 ? 0 : .5;\n    }, H._alignPixel = function (t, e, n) {\n      var i = t.currentDevicePixelRatio,\n          a = n / 2;\n      return Math.round((e - a) * i) / i + a;\n    }, H.splineCurve = function (t, e, n, i) {\n      var a = t.skip ? e : t,\n          r = e,\n          o = n.skip ? e : n,\n          s = Math.sqrt(Math.pow(r.x - a.x, 2) + Math.pow(r.y - a.y, 2)),\n          l = Math.sqrt(Math.pow(o.x - r.x, 2) + Math.pow(o.y - r.y, 2)),\n          u = s / (s + l),\n          d = l / (s + l),\n          h = i * (u = isNaN(u) ? 0 : u),\n          c = i * (d = isNaN(d) ? 0 : d);\n      return {\n        previous: {\n          x: r.x - h * (o.x - a.x),\n          y: r.y - h * (o.y - a.y)\n        },\n        next: {\n          x: r.x + c * (o.x - a.x),\n          y: r.y + c * (o.y - a.y)\n        }\n      };\n    }, H.EPSILON = Number.EPSILON || 1e-14, H.splineCurveMonotone = function (t) {\n      var e,\n          n,\n          i,\n          a,\n          r,\n          o,\n          s,\n          l,\n          u,\n          d = (t || []).map(function (t) {\n        return {\n          model: t._model,\n          deltaK: 0,\n          mK: 0\n        };\n      }),\n          h = d.length;\n\n      for (e = 0; e < h; ++e) {\n        if (!(i = d[e]).model.skip) {\n          if (n = e > 0 ? d[e - 1] : null, (a = e < h - 1 ? d[e + 1] : null) && !a.model.skip) {\n            var c = a.model.x - i.model.x;\n            i.deltaK = 0 !== c ? (a.model.y - i.model.y) / c : 0;\n          }\n\n          !n || n.model.skip ? i.mK = i.deltaK : !a || a.model.skip ? i.mK = n.deltaK : this.sign(n.deltaK) !== this.sign(i.deltaK) ? i.mK = 0 : i.mK = (n.deltaK + i.deltaK) / 2;\n        }\n      }\n\n      for (e = 0; e < h - 1; ++e) {\n        i = d[e], a = d[e + 1], i.model.skip || a.model.skip || (H.almostEquals(i.deltaK, 0, this.EPSILON) ? i.mK = a.mK = 0 : (r = i.mK / i.deltaK, o = a.mK / i.deltaK, (l = Math.pow(r, 2) + Math.pow(o, 2)) <= 9 || (s = 3 / Math.sqrt(l), i.mK = r * s * i.deltaK, a.mK = o * s * i.deltaK)));\n      }\n\n      for (e = 0; e < h; ++e) {\n        (i = d[e]).model.skip || (n = e > 0 ? d[e - 1] : null, a = e < h - 1 ? d[e + 1] : null, n && !n.model.skip && (u = (i.model.x - n.model.x) / 3, i.model.controlPointPreviousX = i.model.x - u, i.model.controlPointPreviousY = i.model.y - u * i.mK), a && !a.model.skip && (u = (a.model.x - i.model.x) / 3, i.model.controlPointNextX = i.model.x + u, i.model.controlPointNextY = i.model.y + u * i.mK));\n      }\n    }, H.nextItem = function (t, e, n) {\n      return n ? e >= t.length - 1 ? t[0] : t[e + 1] : e >= t.length - 1 ? t[t.length - 1] : t[e + 1];\n    }, H.previousItem = function (t, e, n) {\n      return n ? e <= 0 ? t[t.length - 1] : t[e - 1] : e <= 0 ? t[0] : t[e - 1];\n    }, H.niceNum = function (t, e) {\n      var n = Math.floor(H.log10(t)),\n          i = t / Math.pow(10, n);\n      return (e ? i < 1.5 ? 1 : i < 3 ? 2 : i < 7 ? 5 : 10 : i <= 1 ? 1 : i <= 2 ? 2 : i <= 5 ? 5 : 10) * Math.pow(10, n);\n    }, H.requestAnimFrame = \"undefined\" == typeof window ? function (t) {\n      t();\n    } : window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\n      return window.setTimeout(t, 1e3 / 60);\n    }, H.getRelativePosition = function (t, e) {\n      var n,\n          i,\n          a = t.originalEvent || t,\n          r = t.target || t.srcElement,\n          o = r.getBoundingClientRect(),\n          s = a.touches;\n      s && s.length > 0 ? (n = s[0].clientX, i = s[0].clientY) : (n = a.clientX, i = a.clientY);\n      var l = parseFloat(H.getStyle(r, \"padding-left\")),\n          u = parseFloat(H.getStyle(r, \"padding-top\")),\n          d = parseFloat(H.getStyle(r, \"padding-right\")),\n          h = parseFloat(H.getStyle(r, \"padding-bottom\")),\n          c = o.right - o.left - l - d,\n          f = o.bottom - o.top - u - h;\n      return {\n        x: n = Math.round((n - o.left - l) / c * r.width / e.currentDevicePixelRatio),\n        y: i = Math.round((i - o.top - u) / f * r.height / e.currentDevicePixelRatio)\n      };\n    }, H.getConstraintWidth = function (t) {\n      return n(t, \"max-width\", \"clientWidth\");\n    }, H.getConstraintHeight = function (t) {\n      return n(t, \"max-height\", \"clientHeight\");\n    }, H._calculatePadding = function (t, e, n) {\n      return (e = H.getStyle(t, e)).indexOf(\"%\") > -1 ? n * parseInt(e, 10) / 100 : parseInt(e, 10);\n    }, H._getParentNode = function (t) {\n      var e = t.parentNode;\n      return e && \"[object ShadowRoot]\" === e.toString() && (e = e.host), e;\n    }, H.getMaximumWidth = function (t) {\n      var e = H._getParentNode(t);\n\n      if (!e) return t.clientWidth;\n\n      var n = e.clientWidth,\n          i = n - H._calculatePadding(e, \"padding-left\", n) - H._calculatePadding(e, \"padding-right\", n),\n          a = H.getConstraintWidth(t);\n\n      return isNaN(a) ? i : Math.min(i, a);\n    }, H.getMaximumHeight = function (t) {\n      var e = H._getParentNode(t);\n\n      if (!e) return t.clientHeight;\n\n      var n = e.clientHeight,\n          i = n - H._calculatePadding(e, \"padding-top\", n) - H._calculatePadding(e, \"padding-bottom\", n),\n          a = H.getConstraintHeight(t);\n\n      return isNaN(a) ? i : Math.min(i, a);\n    }, H.getStyle = function (t, e) {\n      return t.currentStyle ? t.currentStyle[e] : document.defaultView.getComputedStyle(t, null).getPropertyValue(e);\n    }, H.retinaScale = function (t, e) {\n      var n = t.currentDevicePixelRatio = e || \"undefined\" != typeof window && window.devicePixelRatio || 1;\n\n      if (1 !== n) {\n        var i = t.canvas,\n            a = t.height,\n            r = t.width;\n        i.height = a * n, i.width = r * n, t.ctx.scale(n, n), i.style.height || i.style.width || (i.style.height = a + \"px\", i.style.width = r + \"px\");\n      }\n    }, H.fontString = function (t, e, n) {\n      return e + \" \" + t + \"px \" + n;\n    }, H.longestText = function (t, e, n, i) {\n      var a = (i = i || {}).data = i.data || {},\n          r = i.garbageCollect = i.garbageCollect || [];\n      i.font !== e && (a = i.data = {}, r = i.garbageCollect = [], i.font = e), t.font = e;\n      var o,\n          s,\n          l,\n          u,\n          d,\n          h = 0,\n          c = n.length;\n\n      for (o = 0; o < c; o++) {\n        if (null != (u = n[o]) && !0 !== H.isArray(u)) h = H.measureText(t, a, r, h, u);else if (H.isArray(u)) for (s = 0, l = u.length; s < l; s++) {\n          null == (d = u[s]) || H.isArray(d) || (h = H.measureText(t, a, r, h, d));\n        }\n      }\n\n      var f = r.length / 2;\n\n      if (f > n.length) {\n        for (o = 0; o < f; o++) {\n          delete a[r[o]];\n        }\n\n        r.splice(0, f);\n      }\n\n      return h;\n    }, H.measureText = function (t, e, n, i, a) {\n      var r = e[a];\n      return r || (r = e[a] = t.measureText(a).width, n.push(a)), r > i && (i = r), i;\n    }, H.numberOfLabelLines = function (t) {\n      var e = 1;\n      return H.each(t, function (t) {\n        H.isArray(t) && t.length > e && (e = t.length);\n      }), e;\n    }, H.color = _ ? function (t) {\n      return t instanceof CanvasGradient && (t = N.global.defaultColor), _(t);\n    } : function (t) {\n      return console.error(\"Color.js not found!\"), t;\n    }, H.getHoverColor = function (t) {\n      return t instanceof CanvasPattern || t instanceof CanvasGradient ? t : H.color(t).saturate(.5).darken(.1).rgbString();\n    };\n  }(), en._adapters = rn, en.Animation = $, en.animationService = J, en.controllers = Jt, en.DatasetController = it, en.defaults = N, en.Element = K, en.elements = kt, en.Interaction = re, en.layouts = pe, en.platform = Oe, en.plugins = Le, en.Scale = yn, en.scaleService = Re, en.Ticks = on, en.Tooltip = Ye, en.helpers.each(fi, function (t, e) {\n    en.scaleService.registerScaleType(e, t, t._defaults);\n  }), Li) {\n    Li.hasOwnProperty(Bi) && en.plugins.register(Li[Bi]);\n  }\n\n  en.platform.initialize();\n  var Ei = en;\n  return \"undefined\" != typeof window && (window.Chart = en), en.Chart = en, en.Legend = Li.legend._element, en.Title = Li.title._element, en.pluginService = en.plugins, en.PluginBase = en.Element.extend({}), en.canvasHelpers = en.helpers.canvas, en.layoutService = en.layouts, en.LinearScaleBase = Cn, en.helpers.each([\"Bar\", \"Bubble\", \"Doughnut\", \"Line\", \"PolarArea\", \"Radar\", \"Scatter\"], function (t) {\n    en[t] = function (e, n) {\n      return new en(e, en.helpers.merge(n || {}, {\n        type: t.charAt(0).toLowerCase() + t.slice(1)\n      }));\n    };\n  }), Ei;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/chart/Chart.min.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/Chart.min": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/chart/Chart.min.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;